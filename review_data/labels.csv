issue_id,comment_id,comment,labels,reviewed
1035,3396429,"IMO it is not a good idea to call OrderedHash a Hash, i hope that some time in the future Hash in Ruby will become unordered again, and ordered hash will be called OrderedHash.

http://bugs.ruby-lang.org/issues/5123",['Objection'],False
1035,3396434,nice - should we deprecate the constructor/class too so it can eventually be removed?,['Question'],False
1035,3396522,"No, but i think that it is a bad idea to call ordered hash a hash, not because it can be removed, but because it is good to document in the code whether the ordering is used.

In my opinion it was a bad idea in the first place to specify that Hash in Ruby 1.9 is ordered, i think it shouldn't be.",['Objection'],False
1035,3875575,"OrderedHash serializes as an omap in yaml so there's still valid functionality there.

Additionally, deprecating it is just giving busy work to users who upgrade, there's no harm in having a few lines of code lying around to avoid having thousands of people getting thousands of error messages.

We could take another pull request which removed any remaining unnecessary uses of OrderedHash internally, but there's no need to do this.",['Suggestion'],False
1030,3838721,Whoops. Sorry. Made a mess. Closing this out in favor of this pull request: https://github.com/rails/rails/pull/4916,['URL'],False
529,3638801,/cc @tenderlove ,['Mention'],False
529,3691905,@tenderlove Could you glance at the related change #3457?,['Request'],False
1034,3874346,"If we are doing this, it shouldnt be a constant, but a Rails accessor. And please send feature requests to master. Thanks.","['Confirmation', 'Request']",False
89,5518881,Any thoughts on this @tenderlove / @jonleighton?,"['Mention', 'Question']",False
89,6453591,I am curious too. Seems like a nifty feature.,['Confirmation'],False
89,6465826,Added code and tests for this feature. Please comment! Thanks.,['Request'],False
89,6465897,"I think we should be able not to have a proc, but a ""normal"" value too.

    class_attribute :bar, default: 'foo'",['Suggestion'],False
89,6465939,I realize that I went slightly against my own spec – I'll update it such that the proc is passed the attribute name.,"['Fixing', 'Confirmation']",False
89,6474136,"Rather than add an option here, you can override the reader method in the abstract superclass:

```ruby
class Abstract
  class_attribute :bar

  def self.bar
    raise NotImplementedError
  end
end

class Subclass < Abstract
  self.bar = 'now defined'
end
```","['Code', 'Suggestion']",False
89,6494703,"@jeremy this is true, but that does kind of grapple against the declarative nature of class_attribute. By allowing for a callable thing to be passed as an option, it keeps the logic localized.",['Mention'],False
89,6494759,It adds complexity to an otherwise very simple declaration. Ruby doesn't have defaults on `attr_accessor` either and we get along ok :),"['Answer', 'Objection', 'Suggestion']",False
285,3690313,"I like it. It will reduce the mistakes related to join tables a lot. If other core team members agree with this patch, we could even add a generator shortcut like: `rails g migration join_table_users_and_labels` (yes, I am a lazy bastard)","['Suggestion', 'Confirmation', 'Accept', 'Answer']",False
285,3691368,"Seems easy to forget that there's a special way to create join tables, though.

Could we solve the original problem by just populating timestamps on join tables, too?","['Suggestion', 'Question']",False
285,3691382,"@jeremy I am also fine with populating timestamps on join tables, although it seems @jonleighton doesn't like the idea much.",['Mention'],False
285,3691694,"I'm not a fan of more complexity there either, but it feels worth being able to use a ""stock"" `create_table` as a join table.

Less for people to think about or look up in docs, and it's interchangeable with a `has_many :through` without migrating.","['Suggestion', 'Objection']",False
818,4860830,"your PR needs a rebase!


Thanks :-)","['Suggestion', 'Gratitude', 'Objection']",False
818,4868185,Voilà !,"['Answer', 'Non-english']",False
818,4920171,"thanks for rebasing. Let me get someone to review this :-) 

Cheers, 
Arun

cc/ @spastorino can you look this PR ?",['Gratitude'],False
818,5544331,@jeremy please take a look in this pull request and also see if [this comment](https://github.com/rails/rails/pull/4254/files#L0R442) is still relevant,"['Mention', 'Request']",False
818,5616495,"Ok, looking good to me! Thanks for your patience, @alexeymuranov  :)","['Mention', 'Confirmation', 'Gratitude']",False
818,5619839,yay!,['Gratitude'],False
647,3692683,Why are you resubmitting the same PR once every few days?? #4600 #4622 #4638,['Question'],False
647,3692720,"@vijaydev I am sorry but there was some problem with my fork so had to delete them, reopen the PR.",['Mention'],False
647,3965292,Why is this change needed? ,['Question'],False
647,3967069,"@vijaydev  as there is already a ````logger```` method defined which returns ````@target.logger```` , so instead of calling ````@target.logger ```` again, it makes sense to use the ````logger```` method. ",['Mention'],False
647,3977596,"@railsaholic, u r right!!","['Confirmation', 'Mention']",False
647,4546947,@josevalim  Is it good enough?  Thanks,"['Question', 'Mention']",False
647,4547125,"Actually this only adds one more method call without any profit.
Plus if `logger` method is redefined by user, but `logger?` is not for some reason - this can lead to bugs as checked and returned objects can be different","['Suggestion', 'Answer', 'Bug']",False
647,5438847,"@railsaholic thank you for your patch, but I believe the method is clearer by using `@target.logger` since it already tests for `@target.respond_to?(:logger)` in the same line.",['Mention'],False
821,3671649,"@rafaelfranca Hey, we don't allow changelogs to be edited in docrails.",['Mention'],False
821,3671696,"Yeah, you are right. Sorry, I thought that was a typo in a Guide",['Apology'],False
822,3671731,Why use a symbol instead of just passing the separator as a string?,['Question'],False
822,3680990,"It just looks aesthetically acceptable to me.
If you think it's useless, I'll close this pull request.",['Accept'],False
822,3682692,@josevalim wdyt? ,['Mention'],False
822,3682873,Thanks but I will close this since I checked with the others and they are :-1: on it as well.,"['Gratitude', 'Reject']",False
820,3669834,"Using `:rubygems` in the Gemfile means that it's actually accessing http://rubygems.org instead of https.  I'd like to propose that we revert this change as I think https is a better default.  Thoughts?


FYI - Some time back I had submitted a pull request to bundler to change the default usage of `:rubygems` to be https but it was not merged due to SemVer.  More info here: https://github.com/carlhuda/bundler/pull/1585",['Suggestion'],False
820,3670624,There's honestly no benefit to using HTTPS when requesting rubygems. I don't see why the argument is made one way or another here.,['Objection'],False
824,3673204,"Rather than disable the GC, why don't we just close the tempfile after performing the mv?  It seems like we could just flush the tempfile, move, then close.

/cc @jeremy ","['Suggestion', 'Answer']",False
824,5518302,Any thoughts on this @tenderlove?,"['Mention', 'Question', 'Fixing']",False
824,5520309,"Closing the tempfile shouldn't expose it to possible GC - wtf?

/blame @NZKoz ",['Objection'],False
824,5520483,@jeremy tempfiles are rm'd from the filesystem [via a finalizer](https://github.com/ruby/ruby/blob/trunk/lib/tempfile.rb#L133-134). /play tmyk,"['Mention', 'Answer']",False
824,5520532,"Yeah, but there's still a live reference to the Tempfile object. Closing the file descriptor shouldn't cause it to be eligible for GC.","['Objection', 'Bug', 'Answer']",False
824,5520816,"You're right.  The only thing I can think is that somehow [`check_name` somehow collides with the actual tempfile name](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/file/atomic.rb#L35-38), or somehow the FS is cleaning up the temp file dir.  Either way, I don't see how GC could have anything to do with this.","['Suggestion', 'Confirmation', 'Answer']",False
824,5522448,"Yeah, I fail to see how GC could be causing this,  sticking GC.start in the method didn't trigger it.

seems more likely that @tenderlove's check_name theory is the culprit.","['Suggestion', 'Mention']",False
824,5522492,I'm closing this until we have a repro.  Thanks!,"['Confirmation', 'Reject']",False
831,3667844,"Is there any failing test so we can check with that?? 

",['Question'],False
831,3677403,"No I can not, because apparently it works fine.

I am not sure why it was not working for me, nor am I sure why it does work since Date#advance is not defined in Time::Calculations and none of the requires at the top of Time::Calculations add it.

    rails[master]/ › irb
    >> require 'active_support/duration'
    => true
    >> require 'active_support/core_ext/time/zones'
    => true
    >> require 'active_support/core_ext/time/conversions'
    => true
    >> Date.new.advance minutes: 1
    NoMethodError: undefined method `advance' for #<Date: -4712-01-01 (-1/2,0,2299161)>
        from (irb):4
        from /home/caleb/.rvm/rubies/ruby-1.9.2-p290/bin/irb:16:in `<main>'
    >> Time.new.to_date.advance minutes: 1
    NoMethodError: undefined method `advance' for #<Date: 2012-01-26 (4911905/2,0,2299161)>
            from (irb):5
            from /home/caleb/.rvm/rubies/ruby-1.9.2-p290/bin/irb:16:in `<main>'

But...

    rails[master]/ › irb
    >> require 'active_support/core_ext/time/calculations'
    => true
    >> Date.new.advance minutes: 1
    => #<Date: -4712-01-01 (-1/2,0,2299161)>

So it clearly works somehow.  I'm just not sure where active_support/core_ext/date/calculations is being required, or more specifically where Date#advance is being defined.


",['Fixing'],False
829,3674757,This breaks shared_examples_for in rspec so it'd be awesome if this could be backported to 3.2 as well.,['Suggestion'],False
826,3673908,"Thanks for the patch. I've added some comments. Please address them and file a new PR against master, not 3-2-stable.",['Request'],False
826,3673919,Another comment: new applications should be generated with `config.active_record.dependent_restrict_raises = false`.,['Suggestion'],False
826,3673926,Please also specify in the documentation that an error will be added to the model.,"['Suggestion', 'Request']",False
826,3673928,"Also, needs a CHANGELOG entry.",['Suggestion'],False
828,3669873,Bad Pull Request. Please fix this. Or create new one.,['Objection'],False
828,3669884,Yep. Definitely a bad one. Sorry about that.,['Apology'],False
833,3396184,"+1 @chinshr and I recently came across this issue at work, would be good to see this pulled.","['+1 (Plus One)', 'Mention']",False
833,3667867,Can you please do a rebase with your PR. I think some of the change are already there.,['Request'],False
833,3680756,@arunagw I rebased but the issue is still present.,"['Bug', 'Mention']",False
833,4017417,cc/ @tenderlove ,['Mention'],False
833,4024906,"Can we do this test without an `instance_variable_set`?  I believe the logger could be nil, but surely we should test the public API that causes it to be nil.","['Request', 'Question']",False
833,4390245,"@pwim seems your changes is already done here b5c939dcb3979901fc31f8c79a4fde58999052e8

Can you please fix the test and fix this PR??

Cheers, 
Arun","['Request', 'Fixing']",False
833,4406745,"Yes, the changes are there so this PR is no longer necessary.","['Confirmation', 'Answer']",False
833,4409652,@pwim Cool thanks :-),"['Gratitude', 'Mention']",False
843,3687199,"I found this

```
./railties/guides/source/configuring.textile:* +config.colorize_logging+ specifies whether or not to use ANSI color codes when logging information. Defaults to true.
```",['Code'],False
838,3684839,+1,['+1 (Plus One)'],False
838,3684852,+1,['+1 (Plus One)'],False
838,3684963,+1,['+1 (Plus One)'],False
838,3684975,+1,['+1 (Plus One)'],False
838,3685044,+1,['+1 (Plus One)'],False
838,5487327,"The tests all pass;  Though should the following lines `Time.now.to_f` be changed to `Time.now.to_i` ?

cc @tenderlove ",['Mention'],False
838,5493358,I don't think we need to change the `Time.now` line.,['Reject'],False
846,3696474,"Umm... Thanks, again!",['Gratitude'],False
849,2188173,cc @spastorino,['Mention'],False
849,2188174,cc @josevalim,['Mention'],False
849,3702780,"This patch breaks mswin32 ruby. Because mswin32 version of ruby installed rake.bat instead of rake with shebang line and rake.bat is bat file (special type of windows shell script) embeded ruby script in it.
The patch makes re-launch command line as 'ruby.exe rake.bat assets:precompile'. Then ruby will read bat file directly and makes error : PATH/rake.bat:1: syntax error, unexpected tIDENTIFIER, expecting $end
Here is fixed version of the patch.   https://gist.github.com/1695503

I wonder if you pull the patch, thanks.",['Bug'],False
849,3702853,@arton please provide a PR so everyone can follow the discussion,['Mention'],False
849,3703025,"@spastorino Oh, sorry. I'll try it.",['Mention'],False
848,3700412,Way easier to read :) :+1:,['+1 (Plus One)'],False
848,3700816,:+1:,['+1 (Plus One)'],False
845,3543368,Thanks for the pull. I am in general not a fan of overriding `to_s`. But let's see what other core members think about it. /cc @tenderlove @jonleighton @fxn ,"['Gratitude', 'Suggestion', 'Mention']",False
845,3545690,"I agree with @josevalim; `render` is domain specific terminology, whereas `to_s` is not. If these classes were public then maybe I would be persuaded otherwise, but I think we are agreed that they should remain private, hence there is no great advantage in making it easier for people to use in their erb files.","['Mention', 'Accept', 'Confirmation']",False
845,3547932,":-1: to change `render` to `to_s`, for the same reasons that @jonleighton. But I liked the others changes.","['Mention', 'Suggestion', 'Objection']",False
845,3694975,"I believe the most important changes were already applied by @rafaelfranca's pull request, so this issue could be closed.","['Mention', 'Reject']",False
844,3694939,"Awesome, this feature is a lot more useful this way, great work :+1:","['Gratitude', '+1 (Plus One)']",False
844,3698612,:+1: Fantastic work @Manoj! Looking forward to seeing this merged! /cc @jonleighton ,['+1 (Plus One)'],False
844,3699560,"Added some more comments, thanks.",['Gratitude'],False
844,3707470,@asanghi @carlosantoniodasilva @NoICE Thank you all for your input. :),"['Mention', 'Gratitude']",False
844,3707472,"@jonleighton Thanks for the comments, I have addressed the suggested modifications. Please comment. :)","['Mention', 'Gratitude']",False
844,3707902,I'd simplified how the error message is defined [15154c0](https://github.com/pacoguzman/rails/commit/15154c0d8c656b664fb0d387951a5bd62b0a9da7),"['URL', 'Bug']",False
844,3722339,@pacoguzman thx for the refactoring :),"['Mention', 'Gratitude']",False
844,3729275,added some more comments. please also pull in @pacoguzman's refactorings.,"['Mention', 'Request']",False
844,3735550,"@jonleighton addressed the suggested improvements, also included @pacoguzman's refactorings. :)",['Mention'],False
844,3739478,"@jonleighton Any chance we can get this ""dont raise an exception"" feature backported to Rails 3.2.x ? Or has that boat has totally sailed? 

There won't be any deprecation warning in 3.2 of course but at least we'll be able to use the feature by using the configuration option. What do you think?",['Question'],False
844,3744166,@asanghi I think the ship has sailed I'm afraid - we can't add more features to 3.2 now it has been released.,"['Answer', 'Mention']",False
844,4032150,"I'm not sure if this is the right place to ask, but don't forget to document `:restrict` here: http://guides.rubyonrails.org/association_basics.html

Thanks, looking forward to using this feature.",['URL'],False
844,4032359,"@jaredbeck done .. committed to docrails https://github.com/lifo/docrails/commit/f49ec92866f6d8f27617b5723bff99ac0f7ca92f
/cc @vijaydev ",['Mention'],False
844,7564210,I really don't like this global setting. Let's push this down to where it's being defined and go explicit. So have dependent: :restrict_with_exception and :restrict_with_validation or something like that.,['Suggestion'],False
844,10632543,"If I try to delete associated model with nested attributes will it work correctly? I think that parent model won't hold error messages so. I don't see tests for this case, so I see that it won't work as it expected",['Question'],False
856,3707987,"this part already merged with given commit 
https://github.com/rails/rails/commit/e89a7f5ceeadc7b7d654c82b730d6340176e5a99

closing.",['URL'],False
853,1126561,"Are you sure this would work as intended? IIRC, Rails stores (date)times in UTC. My system runs in CEST (UTC+2), the application's time zone is set to 'Berlin' (also CEST/UTC+2) but the values are stored as UTC.

I have:
TimeEntry.create!(:date => '01.05.2011', :starts_at => '09:00', :ends_at => '19:00')

Querying this directly via connection.select_value gives me 2011-05-01 07:00:00. If I use the ActiveRecord object in stead, I'm getting Sun, 01 May 2011 09:00:00 CEST +02:00.

Note that this could also be because my PostgreSQL server is configured this way – it's one of my first PG projects. :-) (Yes, I've seen that your patch is for MySQL – but the way Rails stores datetimes with regard to time zones is the same across databases, right?) But if I'm right, your patch would probably have to be adapted to ensure that the time zone's always UTC. If I'm wrong, don't mind me. :-)",['Question'],False
853,1127086,"Hi, clemens. I am sorry, but I don't get what you are trying to say or why  are you talking about PostgreSQL. This patch is about getting useful values from `UNIX_TIMESTAMP` or other MySQL functions, which rely on the setting of  time zone of the MySQL RDBMS (`CURRENT_TIMESTAMP()`, `CURRENT_TIME()`, `CURRENT_DATE()`, and `FROM_UNIXTIME()`). 

As I wrote in the first post, the setting of the time zone of the MySQL RDBMS is usually `SYSTEM`, which means, that the time zone is set to whatever the system administrator decided, which will usually be the local time zone  of the place, where the system physically resides.

You have correctly pointed out, that the values stored by Rails in `datetime` columns are usually in `UTC`.  What you get if you query (from Rails app.) the `UNIX_TIMESTAMP` of any such value?  (Sidenote: `UNIX_TIMESTAMP` function returns an integer value, so no time-related conversion in Rails takes place.) Now is the answer ""that depens, probably something incorrect, because the `UTC` value was interpreted (in MySQL) as a value in `SYSTEM` time zone, which is ... (_something nobody cares, because you are using some hosting abroad_)"".  My intend is to use this patch to set the time zone of my sessions to `UTC` to always get proper values from functions like `UNIX_TIMESTAMP` applied to `datetime` type of values.  If someone is using `config.active_record.default_timezone = :local`, then he'll probably not set his sessions time zone to `UTC`.","['Code', 'Objection']",False
853,2335034,"I recommend you use a datetime column and the UTC_TIMESTAMP() function instead.

Otherwise, this is such a niche case that I don't think it qualifies for inclusion in main database.yml config. It's something you can set yourself in a config/initializer, though!",['Suggestion'],False
853,3706672,"@jeremy This is primarily a problem for legacy databases. Or for those of us with large datasets ie billions of rows the space saving made by using timestamp can really add up.

At the moment I do the following in config initializer


    require 'active_record/connection_adapters/mysql2_adapter'
    module ActiveRecord
      module ConnectionAdapters
        class Mysql2Adapter
          private
          alias old_configure_connection configure_connection
          def configure_connection
            old_configure_connection
            execute(""SET SESSION time_zone='+0:00'"", :skip_logging)
          end
        end
      end
    end

It would be great if there was a nicer way",['Code'],False
853,3768283,I ran into this today as well.. big pain to track this down.,['Confirmation'],False
853,3768295,"Note: not Rails' fault this provides more detail:

http://bugs.mysql.com/bug.php?id=15654",['URL'],False
858,3711269,This looks great! Gives the exact behavior I was looking for in the issue,['Confirmation'],False
858,3725366,"+1, good for me",['+1 (Plus One)'],False
858,3745537,Please send this pull request to master and not 3-2-stable.  We can decide whether or not to backport after it has been applied to master.,['Request'],False
858,3745795,"@tenderlove, [done](https://github.com/rails/rails/pull/4806). It'd be nice if you leave some comments on the inconsistent behavior I described in the comment to the original issue. Should we do smth about that?",['Mention'],False
857,3710321,Seems fine to me but please don't change the code under vendor,"['Request', 'Confirmation']",False
857,3710425,"Fixed, sorry I missed that",['Apology'],False
857,3711000,"In most of these cases, `for` is easier to read than the `#each` equivalent.

No sense changing them wholesale because a Reddit thread says they're uncommon!","['Suggestion', 'Answer']",False
857,3711318,"I've applied the patch not because of Reddit thread, probably I should've commented my thoughts first :(.
I've applied it because I find the code better to read but if you don't like feel free to revert it","['Answer', 'Fixing']",False
857,3711387,"Thanks for the feedback. Now that I look at it again, I agree that `for` loops are easier to read when dealing with ranges.

Here's a [pull request](https://github.com/rails/rails/pull/4747) to revert to using `for` loops for ranges.","['Accept', 'Gratitude']",False
879,3725116,That isn't a typo. That's the 5 hours time difference between UTC and EST.,['Objection'],False
879,3725959,Oh. Thanks for the clarification. I see that the zone is set to EST up higher in the doc.,['Gratitude'],False
854,3707154,Not sure about this patch. This can hide errors when you actually want to pluck given an order. I think it is actually up to your application to call `unscoped/reorder/only/except` when you want to ignore the previous conditions.,"['Suggestion', 'Answer', 'Bug']",False
854,3707156,"Anyway, thanks for the pull request and the well described issue. I will leave it open to see what others think.",['Gratitude'],False
854,3725922,Can anyone shed some light? Is currently a blocker for us (as described in #4758),"['Question', 'Request']",False
854,3735505,"@josevalim I agree with you in general, but this is breaking the _ids method on some associations where that previously worked on 3.1. So I think we need to deal with that in some way. Probably we should revert the _ids method to not use `pluck`?","['Mention', 'Suggestion']",False
854,3735626,"The problem is in `uniq` that was added to `ids_reader`. In previous version of `ids_read` there was no uniqueness.
See this line in collection_association.rb `relation.uniq.pluck(column)`. See commit 109db5a that introduced that change.
`uniq` gives SELECT DISTINCT and that's why error is thrown.

Let's ask @lest why he added `uniq` in relation.",['Mention'],False
854,3735686,"Yeah, we can either do the uniq in Ruby or change it to not use pluck.
Probably the second.","['Answer', 'Suggestion']",False
854,3736338,"Uniqueness wasn't present in previous versions of ids_reader, that's why we can just remove `uniq` from relation. See #4783","['Answer', 'Suggestion']",False
861,3713965,`for` loops use each underneath and it's not idiomatic.,"['Answer', 'Suggestion']",False
861,3714054,Not keen on this either. IMO for in ruby is basically vestigial limb inherited from earlier block-less languages.,['Suggestion'],False
861,3738365,"imho, in most of these cases upto is better then using each and ranges :)",['Suggestion'],False
861,3738524,Doesn't make much sense for me either. :-1:,['Objection'],False
861,3745311,"I agree with @jurriaan, it seems better that we use `upto` rather than loops and ranges.  Anyway, I don't find `for` to be readable at all.  </2cents>",['Mention'],False
896,3011301,"Not sure when sqlite3-journal files generated. 

Also your PR needs a rebase.",['Suggestion'],False
896,3730889,Closing this for now. Please submit a new PR again.,"['Request', 'Reject']",False
883,3611476,"You might want to just update the code in the original pull request, to keep the conversation together there.

BTW I'm +1 on this idea. .where('1 = 0') is a lame hack.","['+1 (Plus One)', 'Suggestion']",False
883,3617656,"I'm OK with this, but I'd like more opinions.  @jonleighton ?",['Mention'],False
883,3621135,"I'm okay with this too, but I think it would be better if:

* The rationale was explained in the documentation (also explained in terms of the 'null object pattern' as that's what this is)
* There was a CHANGELOG entry
* Ideally I'd prefer if we used polymorphism. I.e. if Relation#none returned an instance of a NullRelation that implemented this behaviour, rather than having to have a `@none_value` var and special code in `exec_queries`.

Thanks.",['Suggestion'],False
883,3637043,"I agree with @jonleighton.  @xuanxu can you make those changes, and we'll merge it in.  Thanks for the contribution! :-)",['Mention'],False
883,3637693,"OK, I will try to make those changes","['Fixing', 'Answer']",False
883,3727293,"@tenderlove Done!: #4768
¿should I backport it to 3.2?",['Question'],False
883,3745091,"@jonleighton can you review?

@xuanxu no, we will not backport this (as it is a new feature).",['Mention'],False
869,3720125,cc/ @jonleighton ,['Mention'],False
869,3746270,This broke the build with identity map turned on.  Can you please fix the tests and resend?  Thanks.,"['Request', 'Question']",False
869,3755456,"Sorry about that, my bad.
I got a fix working, but one test still fails:

test_instantiation_doesnt_try_to_require_corresponding_file(InheritanceComputeTypeTest) [../inheritance_test.rb:267]:
ActiveRecord::RecordNotFound expected but nothing was raised.

I am looking into it.","['Fixing', 'Code']",False
869,3766792,I submitted https://github.com/rails/rails/pull/4833 as a fix for the failing tests in active_record,"['URL', 'Answer', 'Fixing']",False
897,1871355,"Nice fix. It would certainly solve our problems with getting a users IP when the user, proxy and app server are all on the LAN. We've had to fall back to reading X_FORWARDED_FOR directly.","['URL', 'Confirmation']",False
897,2720910,"Very useful, I hope someone merge it soon ^^","['Gratitude', 'Request', 'Confirmation', 'Suggestion']",False
897,3730895,@gsterndale your PR needs a rebase. I think some cod changes is done in the same file.,"['Mention', 'Suggestion']",False
897,3851077,Thanks @arunagw rebased.,"['Mention', 'Gratitude']",False
897,3851142,cc/ @josevalim ,['Mention'],False
897,4243925,Will this be included in 3.2.2 final?,['Question'],False
897,10257684,It would be nice to get this into 3.2.x at some point. I've been monkey-patching this for months. @spastorino can you do anything?,"['Mention', 'Request', 'Suggestion']",False
897,34154738,Looks like this never made it in to 3.2.16 even though it was merged to master 2 years ago?! *confused*,"['Objection', 'Question']",False
897,34164527,"@courtland @donaldpiret : If you look at the merge commit, you can see just under the message the releases that include it. Moreover, 3.2.x don't receive any new fixes anymore (apart from security ones).","['Mention', 'Suggestion']",False
897,34183059,"@robin850 Thanks for clarifying, that makes sense!","['Gratitude', 'Mention']",False
901,3730961,Your PR needs a rebase. Some code changes is done in this file. I think after that we can bring more attention on this from team.,['Suggestion'],False
901,3798820,"Rebased master onto my branch and squashed the commits.

Personally, I ended up throwing in the towel on using Perforce directly and now use it via git-p4. I still think there should be options to skip/configure the git specific stuff though.","['Fixing', 'Digression', 'Suggestion']",False
901,5476451,"The tests encounter a parse error at 
rails/railties/lib/rails/generators/rails/app/app_generator.rb:302

ruby-1.9.3-p194","['URL', 'Bug']",False
901,5479882,"Apparently the same tests are being added to both app_generator and plugin_new_generator, confirm? If so, you can probably move them to [SharedGeneratorTests](https://github.com/rails/rails/blob/master/railties/test/generators/shared_generator_tests.rb), that is included in both.","['URL', 'Request']",False
901,5495894,I'll take care of that tonight and try to do a rebase on master as well.,['Fixing'],False
901,5500892,"I spoke too soon. I'm having trouble successfully installing the gem dependencies as described in the [edgeguide](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#set-up-and-run-the-tests). I get compatibility errors from bundler. Until i can figure out what to do about those, I can't run any tests.","['URL', 'Bug']",False
901,5961827,what's happening with this PR guys ??,['Question'],False
901,6134656,"I've just had baby, so I haven't had any time to make the suggested changes
and rebase.

On Mon, May 28, 2012 at 5:26 AM, Arun Agrawal <
reply@reply.github.com
> wrote:

> what's happening with this PR guys ??
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/2808#issuecomment-5961827
>","['Apology', 'Answer']",False
901,8494071,Closed in favor of #7614,"['Reject', 'Accept']",False
907,3007701,"Thanks for reporting the bug. I think perhaps we should be using `base_class` here. E.g. something like:

``` ruby
def sequence_name
  if base_class == self
    @seqence_name ||= reset_sequence_name
  else
    (@sequence_name ||= nil) || base_class.sequence_name
  end
end
```

Could you look into that please?
    ",['Code'],False
907,3007796,"Yes, it works, I also updated my pull request.","['Accept', 'Confirmation', 'Answer']",False
907,3731311,"This seems to break code where an inheritance tree defines both a table_name_prefix and defines a sequence pattern for all models inheriting from this tree.

Given:

```ruby
class A < B
end

class B < ActiveRecord::Base
  self.abstract_class = true
  self.table_name_prefix = 'core.'
  self.sequence_name = :autogenerated
end
```

The queries will work correctly, but because of the behavior of base_class, when the connection asks for the sequence_name, base_class returns A and not B.  A then resets the sequence_name and it is no longer pulled from the super, instead, you get a sequence name 'core.a_seq'

Seems we are missing a test case where the sequence_name is set in the base class and is retained in the subclass.

Are there any suggestions for work arounds? ",['Code'],False
903,2104229,There is a problem with this approach: calling `count` on an ActiveRecord::Relation mitigates any limit(n) that was previously set,['Objection'],False
903,2104283,"Inspect is meant to be used in tests and console only, not in a codebase.
Therefore I don't see any moment when we wouldn't want to have this set to true.
Moreover, if we're comparing a lot of objects in a test, the result will be biased.

-1",['Objection'],False
903,2113054,"The problem only exists when in production one has a exception notifier that sends an email containing the backtrace + an inspection of the env variables back at the developers. I believe that filling the production machine's memory with a huge inspection string is not one of the admin's favorite things.

My solution might be a bit ugly but in development it served me and a couple of my colleagues well when a broken Arel query inspection started filling in more than 2GB of ram.","['Suggestion', 'Answer']",False
903,3730914,What's happening to this PR guys! Are we still on this?? Or this can be closed??,['Question'],False
903,4450718,"Closing this for now. Please reopen this with more details. 


Cheers, 
Arun","['Reject', 'Request']",False
916,3735248,"Cheery-picked to `3-2-stable`. If you would like, please submit a backport for `3-1-stable`.",['Request'],False
906,3731635,"Humm, the generated url was not shown, I'll paste the code in the gist: https://gist.github.com/1707977",['URL'],False
906,3734442,"This change is backwards incompatible for people relying on the old behavior. That said, could you please add an entry to the CHANGELOG saying that this helper will now use the favicon in app/assets by default?","['Request', 'Mention']",False
906,3737595,"and tests, the existing ones passes? do we need new ones?","['Question', 'Accept']",False
906,3739490,Done :-),"['Fixing', 'Answer']",False
906,3741064,Squash the commits into one please and push -f,"['Suggestion', 'Request']",False
906,3743736,"PR contains *.swp files, remove them please",['Request'],False
906,3743846,"Ok, I saw the .swp files.. sorry, I'll remove them.",['Apology'],False
906,3744001,"I already squashed the commits into one and make a new pull request: https://github.com/rails/rails/pull/4803

I'll close this one, ok?!","['Accept', 'URL']",False
917,3736427,Thanks for the fix! This would close #4758,['Gratitude'],False
923,3764165,Done in another PR. Closing.,['Reject'],False
921,3608397,"Nice, I like the method not hitting the database, but don't like it using the where method, I've implemented it using a none_value attribute here: https://github.com/rails/rails/pull/4609

 ",['URL'],False
921,3762016,https://github.com/rails/rails/pull/4805 is merged. Closing.,"['Accept', 'URL']",False
919,5495860,"All of the tests pass.

cc @tenderlove ","['Mention', 'Confirmation']",False
919,5505610,"Any thoughts about the names by the way?  'Filter' sounds too general, can be reserved for more complex operations.  Maybe `#deep_slice` and `#deep_except`?","['Question', 'Suggestion']",False
919,5730207,"Hey guys. We think that this kind of things should go to plugins. Active Support is for things that we use in the Rails code and common patterns.

Thank you for the pull request.","['Gratitude', 'Suggestion']",False
927,3769181,"*bump*

Would it make this any more compelling if I pointed out that this isn't just an optimization to reduce the number of objects created.   By running, eg, 

```ruby
client = company.clients.find_or_initialize_by_foo('bar')
client.save
company.save
```

you end up persisting two Client objects to the database - one in the return value from `find_or_initialize`, and one that's autosaved along with the `company.save`.",['Code'],False
927,3769304,"merged, thanks",['Accept'],False
924,3764366,"Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.",['Request'],False
924,3946677,"Hi Aaron,
I've submitted the pull request against master and tested everything
out. It awaits your leisure:

https://github.com/rails/rails/pull/4834

Cheers,
sk

On Wed, Feb 1, 2012 at 1:38 PM, Aaron Patterson
<reply@reply.github.com>
wrote:
> Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/4810#issuecomment-3764366",['Request'],False
924,4139215,"Hi Aaron,
Was looking at https://github.com/rails/rails/compare/v3.2.1...v3.2.2.rc1
and I noticed that the change to pslq didn't get backported. Do you
think that this will make 3.2.2?

Cheers,
sk

On Mon, Feb 13, 2012 at 1:55 PM, Sean Kirby <sskirby@gmail.com> wrote:
> Hi Aaron,
> I've submitted the pull request against master and tested everything
> out. It awaits your leisure:
>
> https://github.com/rails/rails/pull/4834
>
> Cheers,
> sk
>
> On Wed, Feb 1, 2012 at 1:38 PM, Aaron Patterson
> <reply@reply.github.com>
> wrote:
>> Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.
>>
>> ---
>> Reply to this email directly or view it on GitHub:
>> https://github.com/rails/rails/pull/4810#issuecomment-3764366",['Question'],False
924,4142581,"@sskirby thanks for reviewing the commits!  Yes, I meant to backport this before the release but totally forgot.  This will be in 3.2.2 final.",['Mention'],False
926,3767456,"We should honestly get rid of identity map. It was a great effort but the current limitations make it unusable in most apps. Alternatively, we can fix it and make it default.",['Suggestion'],False
926,3768577,"@josevalim agree.  [1, 2, 3, not it](http://www.urbandictionary.com/define.php?term=123%20not%20it).","['Mention', 'URL']",False
926,3774024,@josevalim what would be needed to make it usuable?,"['Mention', 'Question']",False
926,4707480,"I guess that should be closed now that IM was removed from master, thoughts?","['Question', 'Reject']",False
926,5530217,@carlosantoniodasilva agreed.,['Mention'],False
918,3737047,Can we add a test for at least 1 of those keywords?,"['Request', 'Question']",False
918,3737987,Is not enough to just prepend self always instead of checking against RUBY_KEYWORDS ?,['Question'],False
918,3738006,"Yeah, probably :P","['Confirmation', 'Answer']",False
918,3738444,@ayamomiji please do it and squash your commits :),"['Mention', 'Request']",False
918,3753661,"But i cannot just prepend `self.` always, this causes the DirtyTest to raise errors like these:

```
test_setting_attribute_will_result_in_change(DirtyTest):
NoMethodError: private method `attribute_changed?' called for #<DirtyTest::DirtyModel:0x007faa6b038b40>
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:373:in `method_missing'
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:314:in `name_changed?'
...

NoMethodError: private method `attribute_will_change!' called for #<DirtyTest::DirtyModel:0x007faa6b057568 @name=nil, @color=nil>
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:373:in `method_missing'
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:314:in `color_will_change!'
...
```","['Code', 'Bug']",False
918,3753752,"i'll use `send` instead of prepending `self.` for prevent make aliases on private attributes.
i'm not sure should attributes always be public?",['Question'],False
918,4450456,What's happening here? :) ,"['Digression', 'Question']",False
918,5523658,Is this still an issue?,['Question'],False
918,5532907,"/cc @josevalim I don't see another way of doing this but I don't like it neither :/. Or we leave the Ruby keywords list or we remove the CALL_COMPILABLE_REGEXP optimization and always do send(:'#{send}', #{extra})","['Mention', 'Suggestion']",False
918,5544342,+1 for always do `send`.,['+1 (Plus One)'],False
918,5550786,":-1: I think this is just hacky. :( If they are reserved, we shouldn't be messing with it. We should do make behavior as predictable as possible. In other languages, users have to respect the reserved words. I think we should too. Just my $0.02",['Objection'],False
918,5556157,"@isaacsanders disagree, you can define a method called begin for your classes in pure Ruby. So why stopping people for doing that on AM attributes?","['Mention', 'Question']",False
918,5556311,I don't know. It is just my opinion. I feel bad that I can't vocalize why I feel the way I do.,"['Digression', 'Objection']",False
918,5559397,"@isaacsanders no worries :), I was giving my opinion too :heart: :heart: :heart:",['Mention'],False
918,5672714,@spastorino @josevalim are we good to go here? :),['Mention'],False
918,5672827,"@carlosantoniodasilva read my comment where I've /cced to @josevalim, let's wait for him","['Mention', 'Request']",False
918,5674748,"We should just use `self.` The reason `self.` is making dirty tests fail is because your changes are affecting a place it should not to. There are two methods in the attributes module that calls `define_optimized_call`, one is alias attribute and there is a second one. You are mistakenly affecting the second one. Here is a patch for example that makes your tests pass:

https://gist.github.com/2686886

Can you please update accordingly?",['Suggestion'],False
918,5921779,@josevalim are we good to go now? :),"['Mention', 'Question']",False
934,3778224,/cc @josevalim ,['Mention'],False
934,3778481,"@jeremy it looks good to me, let's merge?",['Mention'],False
934,3780153,"Nice job, especially with updated docs and guide.

There are a lot of other refactorings and style changes included, too, making it hard to review the code carefully.

:+1: here but please do separate pulls for refactoring and style changes next time!","['+1 (Plus One)', 'Gratitude']",False
934,3780285,"@jeremy thanks, we will be paying more attention to that from now on.",['Mention'],False
933,3740561,"Pretty please. Some of us still use Rails 2.3.x, and latest 2.3.x with latest rubygems results in ~40 lines of deprecation warnings from rubygems on startup. 

See: https://github.com/rubygems/rubygems/issues/145   

The rubygems team does not seem to consider it a problem. ",['URL'],False
933,3778169,"@jrochkind can you test this patch on your app, as I said in the note above I wasn't able to find instructions on how to setup a 2-3-stable development env so some feedback would be useful",['Mention'],False
933,3778246,"(about to be on vacation for two weeks, will try to do after I return.  
If I can figure out how to apply a patch to rails in a 2-3 app myself,  
I don't know either.)

On Feb 2, 2012, at 8:53 AM, Elia Schito wrote:

> @jrochkind can you test this patch on your app, as I said in the  
> note above I wasn't able to find instructions on how to setup a 2-3- 
> stable development env so some feedback would be useful
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/4422#issuecomment-3778169","['Mention', 'Answer']",False
933,3778305,"It's probably enough to put:

```ruby
require 'rails/gem_dependency'

module Rails::GemDependency
  def self.add_frozen_gem_path
    @@paths_loaded ||= begin
      original_source_index = Gem::Specification.respond_to?(:dirs) ? Gem::SourceIndex.new(Gem::Specification.dirs) : Gem.source_index
      source_index = Rails::VendorGemSourceIndex.new(original_source_index)
      Gem.clear_paths
      Gem.source_index = source_index
      # loaded before us - we can't change them, so mark them
      Gem.loaded_specs.each do |name, spec|
        @@framework_gems[name] = spec
      end
      true
    end
  end
end
```

right before `Rails.boot!` in your application `config/boot.rb`.
",['Code'],False
933,4403969,"@elia The snippet in your last comment doesn't quite work. I got this error when I tried it:

    GemDependency is not a module (TypeError)

Changing module to class results in the error going away and the original warning being silenced. Have not tried this in production yet.",['Mention'],False
933,4424373,"@jwarchol that was a paste from a hack directly in rubygems :blush:

I tried and for me doesn't work *before* `Rails.boot!` but only **after**:

```ruby
# config/boot.rb stuff here...
# possibly bundler stuff here...

# All that for this:
Rails.boot!

require 'rails/gem_dependency'

class Rails::GemDependency
  def self.add_frozen_gem_path
    @@paths_loaded ||= begin
      original_source_index = Gem::Specification.respond_to?(:dirs) ? Gem::SourceIndex.new(Gem::Specification.dirs) : Gem.source_index
      source_index = Rails::VendorGemSourceIndex.new(original_source_index)
      Gem.clear_paths
      Gem.source_index = source_index
      # loaded before us - we can't change them, so mark them
      Gem.loaded_specs.each do |name, spec|
        @@framework_gems[name] = spec
      end
      true
    end
  end
end

```
","['Code', 'Mention']",False
933,4495483,"I'm working on removing all deprecations for all gem version in [elia#fix-railties-tests-for-latest-rubygems](https://github.com/elia/rails/tree/fix-railties-tests-for-latest-rubygems)

Right now I think I'm done from rubygems 1.3 up to 1.7, I also added some info on setting up dev environment in the README

Any feedback/help is really appreciated :bowtie:","['URL', 'Fixing']",False
933,5544380,"@jeremy @jonleighton @tenderlove hey guys, this pull request is pointing 2-3-stable branch. Could you take a look on it and see if we will accept or close it?

Thanks.",['Mention'],False
933,5561514,"I'm not seeing a final resolution or verified fix here. @elia could you open a pull request for your changes, instead?","['Mention', 'Objection']",False
933,5570277,"@jeremy, @rafaelfranca: see pull #6202, closing this one.",['Mention'],False
929,3774199,"Thanks :).

In principle I am hesitant to add that check, because it may hide that some code is not passing the bindings in its instrumentation call. Binds are a collection and so when no binds are used there's a collection, empty, but not `nil`.

There was a recent issue related to CACHE queries that I fixed in de161003c36a0cd967aa393e7706b12055770174 and will ship in 3.2.2. Have you seen any other use case?
","['Question', 'Gratitude']",False
929,3775395,"The cases where I was seeing this error appear were all using `find` with an `:include`, for example:

```ruby
User.find(
  current_user.id,
  :include => [
    :credit_card,
    :user_image,
    :sent_offers => {
      :sender => :user_image,
      :receiver => :user_image,
      :listing => [:listing_image, :listing_images]
    },
    :received_offers => {
      :sender => :user_image,
      :receiver => :user_image,
      :listing => [:listing_image, :listing_images]
    }
  ]
)
```","['Bug', 'Code']",False
929,3786584,"I cannot reproduce this failure on 3-2-stable with user has many posts. See the session:


    fxn@rails:~/tmp/test-4844 $ grep threshold config/environments/development.rb 
      config.active_record.auto_explain_threshold_in_seconds = 0
    fxn@rails:~/tmp/test-4844 $ script/rails c
    Loading development environment (Rails 3.2.1)
    1.9.3-p0 :001 > User.find(1, :include => :posts)
      User Load (3.3ms)  SELECT ""users"".* FROM ""users"" WHERE ""users"".""id"" = ? LIMIT 1  [[""id"", 1]]
      Post Load (0.5ms)  SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""user_id"" IN (1)
      EXPLAIN (0.6ms)  EXPLAIN QUERY PLAN SELECT ""users"".* FROM ""users"" WHERE ""users"".""id"" = ? LIMIT 1  [[""id"", 1]]
      EXPLAIN (0.1ms)  EXPLAIN QUERY PLAN SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""user_id"" IN (1)
    EXPLAIN for: SELECT  ""users"".* FROM ""users""  WHERE ""users"".""id"" = ? LIMIT 1 [[""id"", 1]]
    0|0|0|SEARCH TABLE users USING INTEGER PRIMARY KEY (rowid=?) (~1 rows)

    EXPLAIN for: SELECT ""posts"".* FROM ""posts""  WHERE ""posts"".""user_id"" IN (1)
    0|0|0|SCAN TABLE posts (~100000 rows)
    0|0|0|EXECUTE LIST SUBQUERY 1

     => #<User id: 1, created_at: ""2012-01-31 07:59:45"", updated_at: ""2012-01-31 07:59:45""> 

Could you post a way to reproduce the error?","['Code', 'Bug']",False
929,3907927,I was just getting this issue on 3.2.1. I changed to 3-2-stable and it's fixed it. Good work.,"['Gratitude', 'Confirmation', 'Fixing']",False
929,3908004,"@ihid excellent, thanks very much for the feedback.

The CACHE notification have binds now (and anyway we are no longer monitoring CACHE notifications). So I think we can close this issue.

@sferik if you find this error again please feel free to reopen.",['Mention'],False
929,3908885,Sounds good. Thanks for following up.,['Gratitude'],False
938,3810303,"Now, I realize that we updated rack-test to 0.6.1 on master, 3-2-stable, and 3-1stable.
Sorry, we miss this PR...

I'm closing this issue.
Thanks !",['Apology'],False
936,3798519,"Also spotted this, but the user argument is still missing.
`set_psql_env` should be handling this, but the rake tasks fail unless I provide an explicit user argument:

    `psql -U #{abcs[env]['username']} -f ""#{filename}"" #{abcs[env]['database']}`",['Bug'],False
936,3806968,"That's very strange, Chris, because my change only removes passing in the template as the last argument. If what you are saying is correct, db:test:prepare should not be working at all in master. Which means no one using PostgreSQL is able to run tests via the standard rake task.

Now that I think of it, however, I did only test the change as it applies to the 3-2-stable branch and not master. I will re-test against master. If something is wrong, I suspect that it's not because of the changes in this patch.",['Fixing'],False
936,3809545,"Well, by default psql uses the current OS user name if one isn't provided on the command line. Are you also running the rake tasks as a user that does not have direct access to the db? If so I'll have to check what's wrong with my environment.",['Question'],False
936,3831567,Just tested my patch against the latest master branch and (after applying https://github.com/rails/rails/pull/4910) everything seems to work just fine. I do not have a pg user that matches my username.,['URL'],False
936,3854345,"Just wondering if the suspicion that a username needs to be explicitly passed in to psql is what's keeping this pull request from being accepted.

If that's the case, the username issue is really a completely different issue and has nothing to do with the changes in this pull request. It should not be blocking this pull request, it should be in it's own ticket.",['Suggestion'],False
936,3857897,"@sskirby agreed. I've tested your patch in another environment and everything's working fine.
+1 for the pull request",['+1 (Plus One)'],False
931,1070412,SQLite 3 tests pass.,['Confirmation'],False
931,1095354,I'd like to avoid changing method signatures until Rails 4.0.  This change will break backwards compatibility with 3rd party adapters.,"['Suggestion', 'Objection']",False
931,1115044,@tenderlove should we leave this open then? or can we close?,"['Mention', 'Question']",False
931,1119560,Set up a milestone and add it?,['Question'],False
931,1119568,"Yes, we should set up a rails 4 milestone and add this.","['Suggestion', 'Confirmation']",False
931,1638469,How about changing its name to something like deprecated for rails 3-1 so people know it's going to go away? That would also minimize the confusion that @smartinez87 cites.,"['Question', 'Suggestion', 'Mention']",False
931,2334958,Milestoned @ Rails 4.0,"['Mention', 'Confirmation']",False
931,3374154,master is rails 4 now right? should this be merged?,['Question'],False
931,3376489,Yeah! Master is Rails 4.0 :heart:,"['Answer', 'Confirmation', 'Gratitude']",False
931,3776180,@smartinez87 I think it'd be good to rebase so it can be merged now :),"['Suggestion', 'Mention']",False
931,3777191,"had trouble rebasing master again, so opened a new PR #4850","['Objection', 'Bug', 'Fixing']",False
931,3782045,"closing this, since #4850 was merged",['Reject'],False
942,3800707,"I don't think we should even call the responder. We should just yield the block, as in respond_to.",['Suggestion'],False
942,3801285,"Ah yeah, you're right. Fixing that now.",['Fixing'],False
942,3801329,`retrieve_response_from_mimes` could probably return the collector and then we ask it directly if there is a response (and invoke) or fallback to the default one (with the responder).,['Suggestion'],False
942,3804100,Code has been updated.,['Answer'],False
942,3810688,"Yay, don't forget #4870 for 3-2-stable as well.",['Request'],False
935,3797518,NIce but the option name is not clear for me. Maybe skip_after_callbacks_if_halted or something like that instead?,['Suggestion'],False
935,3797566,`halted` is something internal. `:terminator` is part of the API. What about `skip_after_callbacks_if_terminated` ?,"['Suggestion', 'Question']",False
935,3797592,Sounds great.,['Confirmation'],False
935,3809525,Renamed.,['Confirmation'],False
935,3809563,"Awesome, thanks!",['Gratitude'],False
945,3825958,"Agreed it is better but if we are going to use present?, we need to require
the proper from AS.","['Confirmation', 'Answer']",False
945,3825970,Its already loaded. Have tested the test cases which is running fine.,['Answer'],False
945,3825987,Are you running the test case in isolation mode?,['Question'],False
945,3826021,Am running all the active model test cases.,['Answer'],False
945,3826050,"You need to run them in isolation in order to catch missing requires. In any case, we should just add the missing require.",['Suggestion'],False
945,3826066,will do if it is missed,['Confirmation'],False
945,3826529,"I made another pull request for this issue,   please refer #4904",['Request'],False
950,2079945,"Could you rebase your commits into one please ?
There's also a test missing :(",['Request'],False
950,3817666,"I think that this issue was fixed on 3-1-stable, 3-2-stable, and master.
I think that I should close this issue. What do you think ?

BTW, I cannot find a testcase for non english filename, and I'll send PR for it.",['Question'],False
950,3829851,"Hi ! @tanin47 
I'm closing this issue, because it seems that this issue is fixed already on 3-1-stable, 3-2-stable, master.
Please comment to this issue, if needed :-)","['Mention', 'Confirmation']",False
950,3849731,Alright :),['Answer'],False
948,3824513,/cc @jonleighton ,['Mention'],False
948,3828319,"Thanks for the patch, but this is not the right way to fix it. We need to fix the attribute accessor within AR to actually return the correct value.","['Fixing', 'Gratitude']",False
948,3829370,"Attribute accessor is working. All test are passing (with and without patch also).

You can try this example with and without my patch

``` ruby
require ""rubygems""
require ""action_view""
require ""active_record""
require ""logger""

ActiveRecord::Base.logger = Logger.new(STDOUT)
ActiveRecord::Base.establish_connection(
  :adapter => 'sqlite3', 
  :database => ':memory:')

ActiveRecord::Schema.define do
  create_table :items, :force=>true do |t|
    t.string :name
  end
end

class MySerializer
  def load(str)
    str.swapcase
  end

  def dump(str)
    str.swapcase
  end
end

class Item < ActiveRecord::Base
  serialize :name, MySerializer.new
end

@item = Item.new
@item.name = ""lowerUPPER""

puts @item.name
puts @item.attributes[""name""]

@item.save!

@saved_item = Item.last

puts @saved_item.name
puts @saved_item.attributes[""name""]

include ActionView::Helpers::FormHelper
puts text_field(:item,:name)
puts text_field(:saved_item,:name)

```

With patch

``` ruby

""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
<input id=""item_name"" name=""item[name]"" size=""30"" type=""text"" value=""LOWERupper"" />
<input id=""saved_item_name"" name=""saved_item[name]"" size=""30"" type=""text"" value=""LOWERupper"" />
```

Without patch

``` ruby
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
<input id=""item_name"" name=""item[name]"" size=""30"" type=""text"" value=""#&lt;struct ActiveRecord::AttributeMethods::Serialization::Attribute coder=#&lt;MySerializer:0x0000000187dad8&gt;, value=&quot;lowerUPPER&quot;, state=:unserialized&gt;"" />
<input id=""saved_item_name"" name=""saved_item[name]"" size=""30"" type=""text"" value=""#&lt;struct ActiveRecord::AttributeMethods::Serialization::Attribute coder=#&lt;MySerializer:0x0000000187dad8&gt;, value=&quot;lowerUPPER&quot;, state=:unserialized&gt;"" />
```

Maybe I'm not getting it. Can you tell me where I'm wrong thinking about this problem @jonleighton? Attribute reader is returning unserialized value. But in form helpers serialized values are used. That's how this was working in Rails 3.1.3.",['Code'],False
948,3829442,"It's the `_before_type_cast` accessor that is broken, i.e. `@saved_item.name_before_type_cast`","['Bug', 'Answer', 'Code']",False
948,3829518,So ```@saved_item.name_before_type_cast``` should be ```LOWERupper``` in my example @jonleighton ?,['Mention'],False
948,3836776,We noticed this bug on v3.2.1. It's definitely a regression from 3.1.1.,"['Bug', 'Confirmation']",False
948,3842266,@listrophy no. 3.1.3 is working still.,['Mention'],False
947,3827936,Commits Squashed to one.,['Answer'],False
947,4795780,@josevalim could you please review / merge?,['Mention'],False
946,2309566,+1 .. drove me nuts for an hour!!,['+1 (Plus One)'],False
946,2309746,.. and is a serious bug which leads to not beeing able to delete any objects when using auth headers,['Bug'],False
946,3827727,hey guys ... where is the problem to merge this ???,['Question'],False
946,4098792,This should have some test included but I can verify the code in this pull requests works... but then again a similar bug (with #build) which also has a test accompanying it has yet to be merged...,['Bug'],False
946,4825229,ActiveResource has moved to you own repository. I'm closing this. Please open a new pull request in the [ActiveResource](https://github.com/rails/activeresource) repository if you want.,['URL'],False
955,3831091,Does this fix #2575?,['Question'],False
955,3831245,It seems that this problem is same one ;-),['Confirmation'],False
955,3831376,@ihid Do you think about this PR ? Will we have any problem ? (or should close #2575 too ?),['Mention'],False
955,3831995,"I've got no issue with this PR at all. It's good. Thanks! :)
I'll check later to check it fixes my issue. I'll either mark the issue as closed or send a further PR that fixes that as well.  ","['Gratitude', 'Accept']",False
955,3905611,Great update guys - wonderful to see this fixed :-) Is it too much to ask to have it posted here when it is inserted into core?,"['Gratitude', 'Question']",False
955,3906603,"Oh, by the way, with core, I mean stable release","['Confirmation', 'Answer', 'Suggestion']",False
955,3910687,"I closed the other ticket and then realised I still had a monkeypatch there that was causing it to work regardless of your patch. I've just spent half an hour trying to get master branch working on my codebase and I'm giving up. I get so many dependancies failing in my Gemfile.

I'm pretty certain that what you've got there will fix it, so I'm just going to leave the other ticket closed and I'll keep an eye on it. Thanks, @kennyj.","['Mention', 'Confirmation', 'Fixing']",False
955,3910707,"@kennyj, sorry - could you put a PR for 3-2-stable too please so I can get rid of my monkey-patch? :)",['Mention'],False
955,4296191,Sorry to jump on the end of this ticket but.. any idea why this would cause resolve/refinerycms#1383 ? ,['Question'],False
958,3833589,"Seems good, but I'm a little annoyed because this value is OS (and possibly filesystem) specific.  I'm annoyed that Ruby doesn't provide an API to `pathconf` so that we can determine the correct length.  Without that value, we're just going to keep chasing numbers until this value is set to the lowest common denominator. :(",['Objection'],False
958,3838420,I agree; it does feel crufty. Am open to a better solution if available...,"['Accept', 'Confirmation']",False
958,4074602,"Just checked on Linux

```
2.6.38-13-generic #54-Ubuntu SMP Tue Jan 3 13:38:12 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux
Natty
```

in my case
On Encrypted FS(Cryptfs):

```
test will fail on filename size >= 144
And will pass on FILENAME_MAX_SIZE = 143
```

Ubuntu community says that is known filesize bug (on cryptfs) and filesize on current dir underlying fs cannot be determined by syscalls from ruby.
This is related to @tenderlove conversation with Motohiro KOSAKI & Yui NARUSE
on https://bugs.ruby-lang.org/issues/5974

On Ext4 unencrypted:

```
test will pass on 230 as expected
```


On FreeBSD UFS unencrypted tests passed on FILENAME_MAX_SIZE = 230 

What about cryptfs on Linux - current FILENAME_MAX_SIZE value will make cache files with long names(usually escaped utf strings) unusable before it hooked and truncated by rails.cache api calls

* Maybe it will be useful to make a hash of limits + fs byte overheads for each FS. But IMO this will be very ugly :)
* Or get a lowest limit on filename size - 143 for ecryptfs and use it for FILENAME_MAX_SIZE - this is ugly too IMO :(

In my particular case - i only can use a constant override to decrease FILENAME_MAX_SIZE to use a cache on dev and prod machines with cryptfs :( Sad




",['Code'],False
958,15665329,"Just ran into this issue on 3.2.11 and ended up overriding the constant to 223. I probably won't submit a pull request to change it in master because 228 should be good enough for most cases, and because we should find a more robust solution as @tenderlove suggests. Maybe catching the ENAMETOOLONG and retrying with a shorter max length, but that may break existing keys.

That said, I'll at least document why I went with 223 instead of 228:
Tempfile adds `""#{t}-#{$$}-#{rand(0x100000000).to_s(36)}-#{n}.lock""` to the end of the filename.
`t` is the date; always 8 chars.
`$$` is the pid; on linux this defaults to a max of 32768, but can be configured to a max of 4.2million or 7 chars.
`rand.to_s` base 36 encode of a 32bit number; max of 7 chars
`n` is the retry count; should never happen, but lets say it could get up to 2 digits before the universe explodes.
That adds up to 32 characters, and 255 - 32 = 223. 

So, 228 should work fine in most real world cases where the max pid is 5 digits long and there are no retries and the max filename length is 255.",['Bug'],False
959,3292205,"Any of the Rails team had a chance to look at this. I added in some tests. Thoughts, comments?  Feedback welcome. ",['Question'],False
959,3292314," i dig it. only thought is are you intentionally not saying ""bundle exec rake db:migrate""?",['Question'],False
959,3292856,"Great suggestion, i'll add it in!","['Gratitude', 'Accept', 'Confirmation']",False
959,3293603,I dig it.  +1,['+1 (Plus One)'],False
959,3294425,+1 makes sense.,['+1 (Plus One)'],False
959,3303225,This will be quite helpful. :+1:,['+1 (Plus One)'],False
959,3325395,+1,['+1 (Plus One)'],False
959,3589175,cool +1,['+1 (Plus One)'],False
959,3815698,+1,['+1 (Plus One)'],False
959,3832106,"@josevalim hate to bug on this one, but can you merge this in or give me some comments? The sooner no one asks me why they're getting a NoMethodError when they haven't migrated the database, the better. If there is someone else that needs to join the conversation let me know, and we can get them in here.","['Mention', 'Request']",False
959,3832192,/cc @tenderlove ,['Mention'],False
959,3833551,"I'm uneasy about this change.  Having the exception handling code checking the migrator does not sound awesome (especially if this is happening in production).  I'm -1 on this change, but I'm willing to hear other opinions. /cc @jonleighton ","['Objection', 'Mention']",False
959,3834163,"I am also a +1 for this, but I understand @tenderlove's concern. How about adding a `!Rails.env.production? &&` clause to each of those 'if' statements checking `if ActiveRecord::Migrator.needs_migration?`. That might address everyone's concerns.","['Suggestion', 'Mention']",False
959,3836554,"@tenderlove & @jonleighton I'm very open to implementation suggestions. Not performing this check in production on _every_ error makes sense. We could add a environment check per @scottwb's suggestion, or make it a config option. Perhaps coming up with a standard way to add debugging suggestions to development error messages could make this pattern more sustainable, but i'm not exactly sure what that would look like. Let me know what you think.","['Suggestion', 'Mention']",False
959,3840553,"This would save me some pain.
+1 and agree we want to be able to enable this for dev only.",['+1 (Plus One)'],False
959,3842993,Making this a `config` option is a good idea. This way I can enable it not only in development environment but also in my other custom environments that resemble development.,"['Confirmation', 'Accept']",False
959,3844555,"I think the idea is good but we shouldn't solve it by changing Active Record. For a start, picking up on specific errors is always going to leave other errors uncaught that were also caused by missing migrations.

I think we should make the feature configurable, and have it work like so by default:

* Development: raise an error on page load if there are pending migrations
* Test: display a warning when test is run if there are pending migrations
* Production: no change",['Suggestion'],False
959,3851336,"@jonleighton I think that addresses everyones concerns and accomplishes everything I want. I can go ahead and rip out the ActiveRecord bits from this pull request and just leave in the migration checking code. 

Would you prefer a separate  pull request for warning/error messages or just amending this one? I'm thinking by default we can have it off, and to turn it on you can do something like this to development/test.rb

```ruby
config.migration_pending = :error
config.migration_pending = :warn
```
","['Question', 'Mention']",False
959,3851478,"As just discussed with @waseem, one could apply a similar approach to the [following based on EpicFail](https://github.com/bsodmike/EpicFail/blob/master/lib/epic_fail/exceptions/rack.rb):

```ruby
module EpicFail
  module Exceptions
    class Rack
      #...
      
      def notify_exception(e, env)
        # Exception: backtrace  exception  message
        EpicFail::Failure.create!(:exception => ""#{e.class}"", :message => ""#{e.message}"", :backtrace => ""#{e.backtrace}"")
      end
    end
  end
end
```

and perform

```ruby
ActiveRecord::Migrator.current_version != (ActiveRecord::Migrator.migrations(migrations_paths).last.try(:version)||0)
```

to detect a pending migration.  `e.message` can be updated accordingly and presented in the rendered error.  All of the above as per @jonleighton still apply.  Thoughts?",['Code'],False
959,3897192,"

Setting up the configuration is straight forward: 

active_record/lib/active_record/base.rb

```ruby

##
# :singleton-method:
# Specify how to notify the user when pending migrations are detected
# use :warn, :error, or :none
cattr_accessor :on_pending_migration , :instance_writer => false
@@on_pending_migration = :none

```


Then actually raising/warning the message is straightforward

```ruby

# Notifies the developer if there are pending migrations
# the type of notification can be configured. Example:
#
#   config.active_record.on_pending_migration = :error
def notify_pending_migrations
  case ActiveRecord::Base.on_pending_migration
  when :error
    raise ActiveRecordError::PendingMigration, ""There are pending migrations run 'bundle exec rake db:migrate' to resolve them"" if ActiveRecord::Migrator.needs_migration?
  when :warn
    warn ""There are pending migrations run 'bundle exec rake db:migrate' to resolve them"" if ActiveRecord::Migrator.needs_migration?
  end
end

```


The thing I'm unsure of is where to call `notify_pending_migrations`. Since migrations are an ActiveRecord specific concept, I would like to keep the code within AR (not rely on a controller/view/etc. to relay the message). It also needs to work in the console and when running on a server. If we don't check _every_ round trip to the server we can't be sure that new migrations haven't been introduced. So we could hook into something like  `ActiveRecord::Base.table_name` that gets called on each round trip to the DB, though that would be a lot of redundant checks. Perhaps there is a better place to do the check?",['Code'],False
959,5519053,Any thoughts on this @tenderlove / @jonleighton?,['Mention'],False
959,5761141,"I like the idea a lot but I don't like to have to wait for the server to start and browse the app to get the error, It'd be better to throw the error when the server is starting, something like this:

    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate'

Which is what kinda happens with Bundler:

    $ rails server
    Could not find gem 'meh' in the gems available on this machine.
    Try running `bundle install`.

I could work on that patch. What do you guys think?","['Suggestion', 'Bug']",False
959,5761213,"I think we can at least get in the `needs_migration?` helper. Then people can proceed to check on initialization, add a middleware in development and so forth.","['Suggestion', 'Request']",False
959,5770170,"I'd still like this when the server is starting, but in a second thought, what if the user rolls back? the schema wouldn't be up to date and the server wouldn't start, that might not be ok, so we could add an option to the configuration (and configure in config/development.rb), something like this:
    
    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate' or use config.whatever_the_name_config_option_is = false

There's another thing, `needs_migration?` would be better to me if it were `pending_migrations?`","['Suggestion', 'Bug']",False
959,5771108,"`pending_migrations?` is fine. I don't we should check it on startup by default. You gave one possible example for it failing, but there are other occasions as well (like progressive updates in production).",['Accept'],False
959,5771575,"@josevalim I think this is a helpful thing in development only, in production?, not all, and yeah, it shouldn't be enabled by default either, even on development mode, I'm pretty sure there are people out there with a git post-commit hook or something like that checking for pending migrations already, so we could add a commented out config option in config/development.rb:

    # Enable pending migrations checking on startup (default is false)
    # config.check_pending_migrations_on_startup = true

    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate' or set config.check_pending_migrations_on_startup to false

What do you think?","['Suggestion', 'Mention']",False
959,6232858,Closed in favor of #6665,['Reject'],False
962,2438341,"Hrm, I am unsure if this the concern of to_json? Shouldn't escape_json do this instead?","['Suggestion', 'Question']",False
962,2438618,"Where may I find escape_json ?

PS. I do think this is a concern of to_json. See the definition of `string` at http://json.org/ and see also http://noteslog.com/post/the-solidus-issue/
 
> The reason for allowing the slash to be escaped is for making it safe to embed the JSON substring `</script>` in HTML.
",['Question'],False
962,2438686,"I'm thinking maybe it should have `ActiveSupport.escape_script_tags_in_json` (similar to `ActiveSupport.escape_html_entities_in_json`)

Set by default to +true+

And when +true+ only escape `</script>` strings, to avoid too much unnecessary escaping.

",['Suggestion'],False
962,2438911,"Sorry, it is json_escape (and not escape_json):

https://github.com/rails/rails/blob/aa11f7332c1abadea23576805985f402298273f9/activesupport/lib/active_support/core_ext/string/output_safety.rb#L53


*
Jos Valim
www.plataformatec.com.br
Founder and Lead Developer
*","['Apology', 'URL']",False
962,2439298,"Don't like that at all! The output is not valid JSON anymore, which is a waste. You'd have to parse it to JSON again on the client. Better to simply send valid JSON.","['Objection', 'Answer']",False
962,2439302,"Hrm, right. Ok, I am leaving this open for more feedback then. /cc @jeremy","['Confirmation', 'Mention', 'Request']",False
962,3451822,"I agree with @lawrencepit that this would be useful!  It's a common pattern for backbone.js apps to embed json directly in a &lt;script&gt; tag (in order to avoid an extra round trip to load a model).  I'm agnostic as to whether escaping of ""&lt;/script&gt;"" -> ""&lt;\/script&gt;"" should happen in to_json (since it doesn't effect json used in other context except &lt;script&gt; tags), but it sure would be nice if there was a helper for it (javascript_json_escape?)","['Confirmation', 'Mention']",False
962,3836181,":up: Any new suggestions how to deal with that problem? `escape_script_tags_in_json` works fine, but it cost too much...",['Question'],False
962,5248007,"The whole javascript / JSON escaping situation seems like a mess to me.

We have `json_escape` which looks useful but definitely isn't and `escape_javascript` which while having a better use case is named inconsistently and doesn't cover escaping JSON. Not to mention the `j` aliasing!

I also disagree with @lawrencepit's solution as `{""name"":""<script>alert('foo');</script>""}` is perfectly valid JSON, the issue being solved here is with the browser and so belongs in a view helper.

We need some joined up thinking and consider this and the following issues as a whole

* https://github.com/rails/rails/pull/3578
* https://github.com/rails/rails/pull/5127",['Objection'],False
962,5257905,"@bestie not sure what you're disagreeing with. The string you quote is valid JSON, and so is `<script>{""name"":""<script>alert('foo');<\/script>""}`.

Sometimes you have to be practical. If you push this to a view helper it will use *a lot* more resources. My original solution works. And it conforms to the JSON specs. Everybody happy I'd say.","['Answer', 'Mention']",False
962,5292491,"@lawrencepit I'm disagreeing with `to_json` changing a valid JSON string for the benefit of the browser, it's simply the wrong place for it to happen.

I also don't take your point on performance, a call to `gsub` in `to_json` equivalent to a `gsub` in a helper.",['Mention'],False
962,5296994,"I disagree it's in the wrong place. It follows the JSON spec. Read it. It specifically mentions the solidus in the string form. If you escape the solidus it's still perfectly valid JSON, just more perfect.","['Objection', 'Answer', 'Reject']",False
962,5646755,":thumbsup: @lawrencepit  it doesn't break the whole JSON string but makes it safer for use case above.
But, IMHO, escaping HTML is more important here.   config.active_support.escape_html_entities_in_json = true
 is not working for
```
 render json: {x:""<script>alert(1)</script>""}
```
",['Mention'],False
962,5647532,"I'm also gonna give a :thumbsup: to @lawrencepit on this one. After reading the JSON spec closely I realised the string with the escaped solidus is equivalent, so escaping it is optional.

To express in Ruby
```ruby
{""key"" => ""<script>something</script>""}.to_json == {""key"" => ""<script>something<\/script>""}.to_json
```
and also
```ruby
JSON.parse(""{\""key\"":\""<script>something</script>\""}"") == JSON.parse(""{\""key\"":\""<script>something<\/script>\""}"")
```
both producing
```ruby
{""key""=>""<script>something</script>""}
```

My issue was that I thought the suggestion was to make a real change to JSON encoding, in reality this is completely in-line with the JSON spec, implementing an optional extra, and makes putting JSON into the browser way more convenient.

I still think we have a problem escaping JSON in Rails, but this is going to be convenient for a lot people and is easy innocuous change to make.

@josevalim was your issue the same as mine? Maybe you will change your mind also?",['Code'],False
962,6495175,"Oh, similar issue here.

We can close this issue since we merged making escape_html_entities_in_json to true by default.
/cc @josevalim ","['Accept', 'Mention']",False
962,8582828,"> We can close this issue since we merged making escape_html_entities_in_json to true by default.

Sounds good. If anyone can demonstrate this is still a problem after that change, let me know and I'll re-open. Thanks.",['Accept'],False
972,3839787,"@carlosantoniodasilva @guilleiguaran 

I added this testcase for fixing https://github.com/rails/rails/issues/4749.
I'm confusing... Why should we use 3-2-stable when using --edge option ?

related to https://github.com/rails/rails/pull/4912","['Mention', 'Question', 'Objection', 'URL']",False
972,3840051,"@kennyj hm yeah, I didn't check it further, just added the test fix. Seems like the `:branch` shouldn't really exist, let me check it better.","['Mention', '+1 (Plus One)', 'Suggestion']",False
972,3840062,"This confusing, generating a new app passing --edge option using 3.2.x also generate apps with conflicts about dependencies.","['Objection', 'Mention']",False
972,3840157,"Yeah, but with the `:branch` option:

```ruby
gem 'sass-rails',   :git => 'git://github.com/rails/sass-rails.git',   :branch => '3-2-stable'
gem 'coffee-rails', :git => 'git://github.com/rails/coffee-rails.git', :branch => '3-2-stable'
```

I get the same error as result:

```
Bundler could not find compatible versions for gem ""railties"":
  In Gemfile:
    sass-rails (>= 0) ruby depends on
      railties (~> 3.2.0) ruby

    rails (>= 0) ruby depends on
      railties (4.0.0.beta)
```

If I remove the `:branch`, it bundles successfully.","['Code', 'Fixing', 'URL']",False
972,3840245,I get same result when I was tackling #4749.,"['Confirmation', 'Answer']",False
972,3841636,"BTW, My confirmation way is https://github.com/kennyj/rails/commit/8bf3c6d8165fa6442b3ae2f86a955c82d0abf99b#commitcomment-921532",['URL'],False
972,3841691,"You're right guys, my commit needs to be reverted","['Confirmation', 'Accept']",False
1035,3396429,"IMO it is not a good idea to call OrderedHash a Hash, i hope that some time in the future Hash in Ruby will become unordered again, and ordered hash will be called OrderedHash.

http://bugs.ruby-lang.org/issues/5123",['Objection'],False
1035,3396434,nice - should we deprecate the constructor/class too so it can eventually be removed?,['Question'],False
1035,3396522,"No, but i think that it is a bad idea to call ordered hash a hash, not because it can be removed, but because it is good to document in the code whether the ordering is used.

In my opinion it was a bad idea in the first place to specify that Hash in Ruby 1.9 is ordered, i think it shouldn't be.",['Objection'],False
1035,3875575,"OrderedHash serializes as an omap in yaml so there's still valid functionality there.

Additionally, deprecating it is just giving busy work to users who upgrade, there's no harm in having a few lines of code lying around to avoid having thousands of people getting thousands of error messages.

We could take another pull request which removed any remaining unnecessary uses of OrderedHash internally, but there's no need to do this.",['Suggestion'],False
1030,3838721,Whoops. Sorry. Made a mess. Closing this out in favor of this pull request: https://github.com/rails/rails/pull/4916,['URL'],False
529,3638801,/cc @tenderlove ,['Mention'],False
529,3691905,@tenderlove Could you glance at the related change #3457?,['Request'],False
1034,3874346,"If we are doing this, it shouldnt be a constant, but a Rails accessor. And please send feature requests to master. Thanks.","['Confirmation', 'Request']",False
89,5518881,Any thoughts on this @tenderlove / @jonleighton?,"['Mention', 'Question']",False
89,6453591,I am curious too. Seems like a nifty feature.,['Confirmation'],False
89,6465826,Added code and tests for this feature. Please comment! Thanks.,['Request'],False
89,6465897,"I think we should be able not to have a proc, but a ""normal"" value too.

    class_attribute :bar, default: 'foo'",['Suggestion'],False
89,6465939,I realize that I went slightly against my own spec – I'll update it such that the proc is passed the attribute name.,"['Fixing', 'Confirmation']",False
89,6474136,"Rather than add an option here, you can override the reader method in the abstract superclass:

```ruby
class Abstract
  class_attribute :bar

  def self.bar
    raise NotImplementedError
  end
end

class Subclass < Abstract
  self.bar = 'now defined'
end
```","['Code', 'Suggestion']",False
89,6494703,"@jeremy this is true, but that does kind of grapple against the declarative nature of class_attribute. By allowing for a callable thing to be passed as an option, it keeps the logic localized.",['Mention'],False
89,6494759,It adds complexity to an otherwise very simple declaration. Ruby doesn't have defaults on `attr_accessor` either and we get along ok :),"['Answer', 'Objection', 'Suggestion']",False
285,3690313,"I like it. It will reduce the mistakes related to join tables a lot. If other core team members agree with this patch, we could even add a generator shortcut like: `rails g migration join_table_users_and_labels` (yes, I am a lazy bastard)","['Suggestion', 'Confirmation', 'Accept', 'Answer']",False
285,3691368,"Seems easy to forget that there's a special way to create join tables, though.

Could we solve the original problem by just populating timestamps on join tables, too?","['Suggestion', 'Question']",False
285,3691382,"@jeremy I am also fine with populating timestamps on join tables, although it seems @jonleighton doesn't like the idea much.",['Mention'],False
285,3691694,"I'm not a fan of more complexity there either, but it feels worth being able to use a ""stock"" `create_table` as a join table.

Less for people to think about or look up in docs, and it's interchangeable with a `has_many :through` without migrating.","['Suggestion', 'Objection']",False
818,4860830,"your PR needs a rebase!


Thanks :-)","['Suggestion', 'Gratitude', 'Objection']",False
818,4868185,Voilà !,"['Answer', 'Non-english']",False
818,4920171,"thanks for rebasing. Let me get someone to review this :-) 

Cheers, 
Arun

cc/ @spastorino can you look this PR ?",['Gratitude'],False
818,5544331,@jeremy please take a look in this pull request and also see if [this comment](https://github.com/rails/rails/pull/4254/files#L0R442) is still relevant,"['Mention', 'Request']",False
818,5616495,"Ok, looking good to me! Thanks for your patience, @alexeymuranov  :)","['Mention', 'Confirmation', 'Gratitude']",False
818,5619839,yay!,['Gratitude'],False
647,3692683,Why are you resubmitting the same PR once every few days?? #4600 #4622 #4638,['Question'],False
647,3692720,"@vijaydev I am sorry but there was some problem with my fork so had to delete them, reopen the PR.",['Mention'],False
647,3965292,Why is this change needed? ,['Question'],False
647,3967069,"@vijaydev  as there is already a ````logger```` method defined which returns ````@target.logger```` , so instead of calling ````@target.logger ```` again, it makes sense to use the ````logger```` method. ",['Mention'],False
647,3977596,"@railsaholic, u r right!!","['Confirmation', 'Mention']",False
647,4546947,@josevalim  Is it good enough?  Thanks,"['Question', 'Mention']",False
647,4547125,"Actually this only adds one more method call without any profit.
Plus if `logger` method is redefined by user, but `logger?` is not for some reason - this can lead to bugs as checked and returned objects can be different","['Suggestion', 'Answer', 'Bug']",False
647,5438847,"@railsaholic thank you for your patch, but I believe the method is clearer by using `@target.logger` since it already tests for `@target.respond_to?(:logger)` in the same line.",['Mention'],False
821,3671649,"@rafaelfranca Hey, we don't allow changelogs to be edited in docrails.",['Mention'],False
821,3671696,"Yeah, you are right. Sorry, I thought that was a typo in a Guide",['Apology'],False
822,3671731,Why use a symbol instead of just passing the separator as a string?,['Question'],False
822,3680990,"It just looks aesthetically acceptable to me.
If you think it's useless, I'll close this pull request.",['Accept'],False
822,3682692,@josevalim wdyt? ,['Mention'],False
822,3682873,Thanks but I will close this since I checked with the others and they are :-1: on it as well.,"['Gratitude', 'Reject']",False
820,3669834,"Using `:rubygems` in the Gemfile means that it's actually accessing http://rubygems.org instead of https.  I'd like to propose that we revert this change as I think https is a better default.  Thoughts?


FYI - Some time back I had submitted a pull request to bundler to change the default usage of `:rubygems` to be https but it was not merged due to SemVer.  More info here: https://github.com/carlhuda/bundler/pull/1585",['Suggestion'],False
820,3670624,There's honestly no benefit to using HTTPS when requesting rubygems. I don't see why the argument is made one way or another here.,['Objection'],False
824,3673204,"Rather than disable the GC, why don't we just close the tempfile after performing the mv?  It seems like we could just flush the tempfile, move, then close.

/cc @jeremy ","['Suggestion', 'Answer']",False
824,5518302,Any thoughts on this @tenderlove?,"['Mention', 'Question', 'Fixing']",False
824,5520309,"Closing the tempfile shouldn't expose it to possible GC - wtf?

/blame @NZKoz ",['Objection'],False
824,5520483,@jeremy tempfiles are rm'd from the filesystem [via a finalizer](https://github.com/ruby/ruby/blob/trunk/lib/tempfile.rb#L133-134). /play tmyk,"['Mention', 'Answer']",False
824,5520532,"Yeah, but there's still a live reference to the Tempfile object. Closing the file descriptor shouldn't cause it to be eligible for GC.","['Objection', 'Bug', 'Answer']",False
824,5520816,"You're right.  The only thing I can think is that somehow [`check_name` somehow collides with the actual tempfile name](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/file/atomic.rb#L35-38), or somehow the FS is cleaning up the temp file dir.  Either way, I don't see how GC could have anything to do with this.","['Suggestion', 'Confirmation', 'Answer']",False
824,5522448,"Yeah, I fail to see how GC could be causing this,  sticking GC.start in the method didn't trigger it.

seems more likely that @tenderlove's check_name theory is the culprit.","['Suggestion', 'Mention']",False
824,5522492,I'm closing this until we have a repro.  Thanks!,"['Confirmation', 'Reject']",False
831,3667844,"Is there any failing test so we can check with that?? 

",['Question'],False
831,3677403,"No I can not, because apparently it works fine.

I am not sure why it was not working for me, nor am I sure why it does work since Date#advance is not defined in Time::Calculations and none of the requires at the top of Time::Calculations add it.

    rails[master]/ › irb
    >> require 'active_support/duration'
    => true
    >> require 'active_support/core_ext/time/zones'
    => true
    >> require 'active_support/core_ext/time/conversions'
    => true
    >> Date.new.advance minutes: 1
    NoMethodError: undefined method `advance' for #<Date: -4712-01-01 (-1/2,0,2299161)>
        from (irb):4
        from /home/caleb/.rvm/rubies/ruby-1.9.2-p290/bin/irb:16:in `<main>'
    >> Time.new.to_date.advance minutes: 1
    NoMethodError: undefined method `advance' for #<Date: 2012-01-26 (4911905/2,0,2299161)>
            from (irb):5
            from /home/caleb/.rvm/rubies/ruby-1.9.2-p290/bin/irb:16:in `<main>'

But...

    rails[master]/ › irb
    >> require 'active_support/core_ext/time/calculations'
    => true
    >> Date.new.advance minutes: 1
    => #<Date: -4712-01-01 (-1/2,0,2299161)>

So it clearly works somehow.  I'm just not sure where active_support/core_ext/date/calculations is being required, or more specifically where Date#advance is being defined.


",['Fixing'],False
829,3674757,This breaks shared_examples_for in rspec so it'd be awesome if this could be backported to 3.2 as well.,['Suggestion'],False
826,3673908,"Thanks for the patch. I've added some comments. Please address them and file a new PR against master, not 3-2-stable.",['Request'],False
826,3673919,Another comment: new applications should be generated with `config.active_record.dependent_restrict_raises = false`.,['Suggestion'],False
826,3673926,Please also specify in the documentation that an error will be added to the model.,"['Suggestion', 'Request']",False
826,3673928,"Also, needs a CHANGELOG entry.",['Suggestion'],False
828,3669873,Bad Pull Request. Please fix this. Or create new one.,['Objection'],False
828,3669884,Yep. Definitely a bad one. Sorry about that.,['Apology'],False
833,3396184,"+1 @chinshr and I recently came across this issue at work, would be good to see this pulled.","['+1 (Plus One)', 'Mention']",False
833,3667867,Can you please do a rebase with your PR. I think some of the change are already there.,['Request'],False
833,3680756,@arunagw I rebased but the issue is still present.,"['Bug', 'Mention']",False
833,4017417,cc/ @tenderlove ,['Mention'],False
833,4024906,"Can we do this test without an `instance_variable_set`?  I believe the logger could be nil, but surely we should test the public API that causes it to be nil.","['Request', 'Question']",False
833,4390245,"@pwim seems your changes is already done here b5c939dcb3979901fc31f8c79a4fde58999052e8

Can you please fix the test and fix this PR??

Cheers, 
Arun","['Request', 'Fixing']",False
833,4406745,"Yes, the changes are there so this PR is no longer necessary.","['Confirmation', 'Answer']",False
833,4409652,@pwim Cool thanks :-),"['Gratitude', 'Mention']",False
843,3687199,"I found this

```
./railties/guides/source/configuring.textile:* +config.colorize_logging+ specifies whether or not to use ANSI color codes when logging information. Defaults to true.
```",['Code'],False
838,3684839,+1,['+1 (Plus One)'],False
838,3684852,+1,['+1 (Plus One)'],False
838,3684963,+1,['+1 (Plus One)'],False
838,3684975,+1,['+1 (Plus One)'],False
838,3685044,+1,['+1 (Plus One)'],False
838,5487327,"The tests all pass;  Though should the following lines `Time.now.to_f` be changed to `Time.now.to_i` ?

cc @tenderlove ",['Mention'],False
838,5493358,I don't think we need to change the `Time.now` line.,['Reject'],False
846,3696474,"Umm... Thanks, again!",['Gratitude'],False
849,2188173,cc @spastorino,['Mention'],False
849,2188174,cc @josevalim,['Mention'],False
849,3702780,"This patch breaks mswin32 ruby. Because mswin32 version of ruby installed rake.bat instead of rake with shebang line and rake.bat is bat file (special type of windows shell script) embeded ruby script in it.
The patch makes re-launch command line as 'ruby.exe rake.bat assets:precompile'. Then ruby will read bat file directly and makes error : PATH/rake.bat:1: syntax error, unexpected tIDENTIFIER, expecting $end
Here is fixed version of the patch.   https://gist.github.com/1695503

I wonder if you pull the patch, thanks.",['Bug'],False
849,3702853,@arton please provide a PR so everyone can follow the discussion,['Mention'],False
849,3703025,"@spastorino Oh, sorry. I'll try it.",['Mention'],False
848,3700412,Way easier to read :) :+1:,['+1 (Plus One)'],False
848,3700816,:+1:,['+1 (Plus One)'],False
845,3543368,Thanks for the pull. I am in general not a fan of overriding `to_s`. But let's see what other core members think about it. /cc @tenderlove @jonleighton @fxn ,"['Gratitude', 'Suggestion', 'Mention']",False
845,3545690,"I agree with @josevalim; `render` is domain specific terminology, whereas `to_s` is not. If these classes were public then maybe I would be persuaded otherwise, but I think we are agreed that they should remain private, hence there is no great advantage in making it easier for people to use in their erb files.","['Mention', 'Accept', 'Confirmation']",False
845,3547932,":-1: to change `render` to `to_s`, for the same reasons that @jonleighton. But I liked the others changes.","['Mention', 'Suggestion', 'Objection']",False
845,3694975,"I believe the most important changes were already applied by @rafaelfranca's pull request, so this issue could be closed.","['Mention', 'Reject']",False
844,3694939,"Awesome, this feature is a lot more useful this way, great work :+1:","['Gratitude', '+1 (Plus One)']",False
844,3698612,:+1: Fantastic work @Manoj! Looking forward to seeing this merged! /cc @jonleighton ,['+1 (Plus One)'],False
844,3699560,"Added some more comments, thanks.",['Gratitude'],False
844,3707470,@asanghi @carlosantoniodasilva @NoICE Thank you all for your input. :),"['Mention', 'Gratitude']",False
844,3707472,"@jonleighton Thanks for the comments, I have addressed the suggested modifications. Please comment. :)","['Mention', 'Gratitude']",False
844,3707902,I'd simplified how the error message is defined [15154c0](https://github.com/pacoguzman/rails/commit/15154c0d8c656b664fb0d387951a5bd62b0a9da7),"['URL', 'Bug']",False
844,3722339,@pacoguzman thx for the refactoring :),"['Mention', 'Gratitude']",False
844,3729275,added some more comments. please also pull in @pacoguzman's refactorings.,"['Mention', 'Request']",False
844,3735550,"@jonleighton addressed the suggested improvements, also included @pacoguzman's refactorings. :)",['Mention'],False
844,3739478,"@jonleighton Any chance we can get this ""dont raise an exception"" feature backported to Rails 3.2.x ? Or has that boat has totally sailed? 

There won't be any deprecation warning in 3.2 of course but at least we'll be able to use the feature by using the configuration option. What do you think?",['Question'],False
844,3744166,@asanghi I think the ship has sailed I'm afraid - we can't add more features to 3.2 now it has been released.,"['Answer', 'Mention']",False
844,4032150,"I'm not sure if this is the right place to ask, but don't forget to document `:restrict` here: http://guides.rubyonrails.org/association_basics.html

Thanks, looking forward to using this feature.",['URL'],False
844,4032359,"@jaredbeck done .. committed to docrails https://github.com/lifo/docrails/commit/f49ec92866f6d8f27617b5723bff99ac0f7ca92f
/cc @vijaydev ",['Mention'],False
844,7564210,I really don't like this global setting. Let's push this down to where it's being defined and go explicit. So have dependent: :restrict_with_exception and :restrict_with_validation or something like that.,['Suggestion'],False
844,10632543,"If I try to delete associated model with nested attributes will it work correctly? I think that parent model won't hold error messages so. I don't see tests for this case, so I see that it won't work as it expected",['Question'],False
856,3707987,"this part already merged with given commit 
https://github.com/rails/rails/commit/e89a7f5ceeadc7b7d654c82b730d6340176e5a99

closing.",['URL'],False
853,1126561,"Are you sure this would work as intended? IIRC, Rails stores (date)times in UTC. My system runs in CEST (UTC+2), the application's time zone is set to 'Berlin' (also CEST/UTC+2) but the values are stored as UTC.

I have:
TimeEntry.create!(:date => '01.05.2011', :starts_at => '09:00', :ends_at => '19:00')

Querying this directly via connection.select_value gives me 2011-05-01 07:00:00. If I use the ActiveRecord object in stead, I'm getting Sun, 01 May 2011 09:00:00 CEST +02:00.

Note that this could also be because my PostgreSQL server is configured this way – it's one of my first PG projects. :-) (Yes, I've seen that your patch is for MySQL – but the way Rails stores datetimes with regard to time zones is the same across databases, right?) But if I'm right, your patch would probably have to be adapted to ensure that the time zone's always UTC. If I'm wrong, don't mind me. :-)",['Question'],False
853,1127086,"Hi, clemens. I am sorry, but I don't get what you are trying to say or why  are you talking about PostgreSQL. This patch is about getting useful values from `UNIX_TIMESTAMP` or other MySQL functions, which rely on the setting of  time zone of the MySQL RDBMS (`CURRENT_TIMESTAMP()`, `CURRENT_TIME()`, `CURRENT_DATE()`, and `FROM_UNIXTIME()`). 

As I wrote in the first post, the setting of the time zone of the MySQL RDBMS is usually `SYSTEM`, which means, that the time zone is set to whatever the system administrator decided, which will usually be the local time zone  of the place, where the system physically resides.

You have correctly pointed out, that the values stored by Rails in `datetime` columns are usually in `UTC`.  What you get if you query (from Rails app.) the `UNIX_TIMESTAMP` of any such value?  (Sidenote: `UNIX_TIMESTAMP` function returns an integer value, so no time-related conversion in Rails takes place.) Now is the answer ""that depens, probably something incorrect, because the `UTC` value was interpreted (in MySQL) as a value in `SYSTEM` time zone, which is ... (_something nobody cares, because you are using some hosting abroad_)"".  My intend is to use this patch to set the time zone of my sessions to `UTC` to always get proper values from functions like `UNIX_TIMESTAMP` applied to `datetime` type of values.  If someone is using `config.active_record.default_timezone = :local`, then he'll probably not set his sessions time zone to `UTC`.","['Code', 'Objection']",False
853,2335034,"I recommend you use a datetime column and the UTC_TIMESTAMP() function instead.

Otherwise, this is such a niche case that I don't think it qualifies for inclusion in main database.yml config. It's something you can set yourself in a config/initializer, though!",['Suggestion'],False
853,3706672,"@jeremy This is primarily a problem for legacy databases. Or for those of us with large datasets ie billions of rows the space saving made by using timestamp can really add up.

At the moment I do the following in config initializer


    require 'active_record/connection_adapters/mysql2_adapter'
    module ActiveRecord
      module ConnectionAdapters
        class Mysql2Adapter
          private
          alias old_configure_connection configure_connection
          def configure_connection
            old_configure_connection
            execute(""SET SESSION time_zone='+0:00'"", :skip_logging)
          end
        end
      end
    end

It would be great if there was a nicer way",['Code'],False
853,3768283,I ran into this today as well.. big pain to track this down.,['Confirmation'],False
853,3768295,"Note: not Rails' fault this provides more detail:

http://bugs.mysql.com/bug.php?id=15654",['URL'],False
858,3711269,This looks great! Gives the exact behavior I was looking for in the issue,['Confirmation'],False
858,3725366,"+1, good for me",['+1 (Plus One)'],False
858,3745537,Please send this pull request to master and not 3-2-stable.  We can decide whether or not to backport after it has been applied to master.,['Request'],False
858,3745795,"@tenderlove, [done](https://github.com/rails/rails/pull/4806). It'd be nice if you leave some comments on the inconsistent behavior I described in the comment to the original issue. Should we do smth about that?",['Mention'],False
857,3710321,Seems fine to me but please don't change the code under vendor,"['Request', 'Confirmation']",False
857,3710425,"Fixed, sorry I missed that",['Apology'],False
857,3711000,"In most of these cases, `for` is easier to read than the `#each` equivalent.

No sense changing them wholesale because a Reddit thread says they're uncommon!","['Suggestion', 'Answer']",False
857,3711318,"I've applied the patch not because of Reddit thread, probably I should've commented my thoughts first :(.
I've applied it because I find the code better to read but if you don't like feel free to revert it","['Answer', 'Fixing']",False
857,3711387,"Thanks for the feedback. Now that I look at it again, I agree that `for` loops are easier to read when dealing with ranges.

Here's a [pull request](https://github.com/rails/rails/pull/4747) to revert to using `for` loops for ranges.","['Accept', 'Gratitude']",False
879,3725116,That isn't a typo. That's the 5 hours time difference between UTC and EST.,['Objection'],False
879,3725959,Oh. Thanks for the clarification. I see that the zone is set to EST up higher in the doc.,['Gratitude'],False
854,3707154,Not sure about this patch. This can hide errors when you actually want to pluck given an order. I think it is actually up to your application to call `unscoped/reorder/only/except` when you want to ignore the previous conditions.,"['Suggestion', 'Answer', 'Bug']",False
854,3707156,"Anyway, thanks for the pull request and the well described issue. I will leave it open to see what others think.",['Gratitude'],False
854,3725922,Can anyone shed some light? Is currently a blocker for us (as described in #4758),"['Question', 'Request']",False
854,3735505,"@josevalim I agree with you in general, but this is breaking the _ids method on some associations where that previously worked on 3.1. So I think we need to deal with that in some way. Probably we should revert the _ids method to not use `pluck`?","['Mention', 'Suggestion']",False
854,3735626,"The problem is in `uniq` that was added to `ids_reader`. In previous version of `ids_read` there was no uniqueness.
See this line in collection_association.rb `relation.uniq.pluck(column)`. See commit 109db5a that introduced that change.
`uniq` gives SELECT DISTINCT and that's why error is thrown.

Let's ask @lest why he added `uniq` in relation.",['Mention'],False
854,3735686,"Yeah, we can either do the uniq in Ruby or change it to not use pluck.
Probably the second.","['Answer', 'Suggestion']",False
854,3736338,"Uniqueness wasn't present in previous versions of ids_reader, that's why we can just remove `uniq` from relation. See #4783","['Answer', 'Suggestion']",False
861,3713965,`for` loops use each underneath and it's not idiomatic.,"['Answer', 'Suggestion']",False
861,3714054,Not keen on this either. IMO for in ruby is basically vestigial limb inherited from earlier block-less languages.,['Suggestion'],False
861,3738365,"imho, in most of these cases upto is better then using each and ranges :)",['Suggestion'],False
861,3738524,Doesn't make much sense for me either. :-1:,['Objection'],False
861,3745311,"I agree with @jurriaan, it seems better that we use `upto` rather than loops and ranges.  Anyway, I don't find `for` to be readable at all.  </2cents>",['Mention'],False
896,3011301,"Not sure when sqlite3-journal files generated. 

Also your PR needs a rebase.",['Suggestion'],False
896,3730889,Closing this for now. Please submit a new PR again.,"['Request', 'Reject']",False
883,3611476,"You might want to just update the code in the original pull request, to keep the conversation together there.

BTW I'm +1 on this idea. .where('1 = 0') is a lame hack.","['+1 (Plus One)', 'Suggestion']",False
883,3617656,"I'm OK with this, but I'd like more opinions.  @jonleighton ?",['Mention'],False
883,3621135,"I'm okay with this too, but I think it would be better if:

* The rationale was explained in the documentation (also explained in terms of the 'null object pattern' as that's what this is)
* There was a CHANGELOG entry
* Ideally I'd prefer if we used polymorphism. I.e. if Relation#none returned an instance of a NullRelation that implemented this behaviour, rather than having to have a `@none_value` var and special code in `exec_queries`.

Thanks.",['Suggestion'],False
883,3637043,"I agree with @jonleighton.  @xuanxu can you make those changes, and we'll merge it in.  Thanks for the contribution! :-)",['Mention'],False
883,3637693,"OK, I will try to make those changes","['Fixing', 'Answer']",False
883,3727293,"@tenderlove Done!: #4768
¿should I backport it to 3.2?",['Question'],False
883,3745091,"@jonleighton can you review?

@xuanxu no, we will not backport this (as it is a new feature).",['Mention'],False
869,3720125,cc/ @jonleighton ,['Mention'],False
869,3746270,This broke the build with identity map turned on.  Can you please fix the tests and resend?  Thanks.,"['Request', 'Question']",False
869,3755456,"Sorry about that, my bad.
I got a fix working, but one test still fails:

test_instantiation_doesnt_try_to_require_corresponding_file(InheritanceComputeTypeTest) [../inheritance_test.rb:267]:
ActiveRecord::RecordNotFound expected but nothing was raised.

I am looking into it.","['Fixing', 'Code']",False
869,3766792,I submitted https://github.com/rails/rails/pull/4833 as a fix for the failing tests in active_record,"['URL', 'Answer', 'Fixing']",False
897,1871355,"Nice fix. It would certainly solve our problems with getting a users IP when the user, proxy and app server are all on the LAN. We've had to fall back to reading X_FORWARDED_FOR directly.","['URL', 'Confirmation']",False
897,2720910,"Very useful, I hope someone merge it soon ^^","['Gratitude', 'Request', 'Confirmation', 'Suggestion']",False
897,3730895,@gsterndale your PR needs a rebase. I think some cod changes is done in the same file.,"['Mention', 'Suggestion']",False
897,3851077,Thanks @arunagw rebased.,"['Mention', 'Gratitude']",False
897,3851142,cc/ @josevalim ,['Mention'],False
897,4243925,Will this be included in 3.2.2 final?,['Question'],False
897,10257684,It would be nice to get this into 3.2.x at some point. I've been monkey-patching this for months. @spastorino can you do anything?,"['Mention', 'Request', 'Suggestion']",False
897,34154738,Looks like this never made it in to 3.2.16 even though it was merged to master 2 years ago?! *confused*,"['Objection', 'Question']",False
897,34164527,"@courtland @donaldpiret : If you look at the merge commit, you can see just under the message the releases that include it. Moreover, 3.2.x don't receive any new fixes anymore (apart from security ones).","['Mention', 'Suggestion']",False
897,34183059,"@robin850 Thanks for clarifying, that makes sense!","['Gratitude', 'Mention']",False
901,3730961,Your PR needs a rebase. Some code changes is done in this file. I think after that we can bring more attention on this from team.,['Suggestion'],False
901,3798820,"Rebased master onto my branch and squashed the commits.

Personally, I ended up throwing in the towel on using Perforce directly and now use it via git-p4. I still think there should be options to skip/configure the git specific stuff though.","['Fixing', 'Digression', 'Suggestion']",False
901,5476451,"The tests encounter a parse error at 
rails/railties/lib/rails/generators/rails/app/app_generator.rb:302

ruby-1.9.3-p194","['URL', 'Bug']",False
901,5479882,"Apparently the same tests are being added to both app_generator and plugin_new_generator, confirm? If so, you can probably move them to [SharedGeneratorTests](https://github.com/rails/rails/blob/master/railties/test/generators/shared_generator_tests.rb), that is included in both.","['URL', 'Request']",False
901,5495894,I'll take care of that tonight and try to do a rebase on master as well.,['Fixing'],False
901,5500892,"I spoke too soon. I'm having trouble successfully installing the gem dependencies as described in the [edgeguide](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#set-up-and-run-the-tests). I get compatibility errors from bundler. Until i can figure out what to do about those, I can't run any tests.","['URL', 'Bug']",False
901,5961827,what's happening with this PR guys ??,['Question'],False
901,6134656,"I've just had baby, so I haven't had any time to make the suggested changes
and rebase.

On Mon, May 28, 2012 at 5:26 AM, Arun Agrawal <
reply@reply.github.com
> wrote:

> what's happening with this PR guys ??
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/2808#issuecomment-5961827
>","['Apology', 'Answer']",False
901,8494071,Closed in favor of #7614,"['Reject', 'Accept']",False
907,3007701,"Thanks for reporting the bug. I think perhaps we should be using `base_class` here. E.g. something like:

``` ruby
def sequence_name
  if base_class == self
    @seqence_name ||= reset_sequence_name
  else
    (@sequence_name ||= nil) || base_class.sequence_name
  end
end
```

Could you look into that please?
    ",['Code'],False
907,3007796,"Yes, it works, I also updated my pull request.","['Accept', 'Confirmation', 'Answer']",False
907,3731311,"This seems to break code where an inheritance tree defines both a table_name_prefix and defines a sequence pattern for all models inheriting from this tree.

Given:

```ruby
class A < B
end

class B < ActiveRecord::Base
  self.abstract_class = true
  self.table_name_prefix = 'core.'
  self.sequence_name = :autogenerated
end
```

The queries will work correctly, but because of the behavior of base_class, when the connection asks for the sequence_name, base_class returns A and not B.  A then resets the sequence_name and it is no longer pulled from the super, instead, you get a sequence name 'core.a_seq'

Seems we are missing a test case where the sequence_name is set in the base class and is retained in the subclass.

Are there any suggestions for work arounds? ",['Code'],False
903,2104229,There is a problem with this approach: calling `count` on an ActiveRecord::Relation mitigates any limit(n) that was previously set,['Objection'],False
903,2104283,"Inspect is meant to be used in tests and console only, not in a codebase.
Therefore I don't see any moment when we wouldn't want to have this set to true.
Moreover, if we're comparing a lot of objects in a test, the result will be biased.

-1",['Objection'],False
903,2113054,"The problem only exists when in production one has a exception notifier that sends an email containing the backtrace + an inspection of the env variables back at the developers. I believe that filling the production machine's memory with a huge inspection string is not one of the admin's favorite things.

My solution might be a bit ugly but in development it served me and a couple of my colleagues well when a broken Arel query inspection started filling in more than 2GB of ram.","['Suggestion', 'Answer']",False
903,3730914,What's happening to this PR guys! Are we still on this?? Or this can be closed??,['Question'],False
903,4450718,"Closing this for now. Please reopen this with more details. 


Cheers, 
Arun","['Reject', 'Request']",False
916,3735248,"Cheery-picked to `3-2-stable`. If you would like, please submit a backport for `3-1-stable`.",['Request'],False
906,3731635,"Humm, the generated url was not shown, I'll paste the code in the gist: https://gist.github.com/1707977",['URL'],False
906,3734442,"This change is backwards incompatible for people relying on the old behavior. That said, could you please add an entry to the CHANGELOG saying that this helper will now use the favicon in app/assets by default?","['Request', 'Mention']",False
906,3737595,"and tests, the existing ones passes? do we need new ones?","['Question', 'Accept']",False
906,3739490,Done :-),"['Fixing', 'Answer']",False
906,3741064,Squash the commits into one please and push -f,"['Suggestion', 'Request']",False
906,3743736,"PR contains *.swp files, remove them please",['Request'],False
906,3743846,"Ok, I saw the .swp files.. sorry, I'll remove them.",['Apology'],False
906,3744001,"I already squashed the commits into one and make a new pull request: https://github.com/rails/rails/pull/4803

I'll close this one, ok?!","['Accept', 'URL']",False
917,3736427,Thanks for the fix! This would close #4758,['Gratitude'],False
923,3764165,Done in another PR. Closing.,['Reject'],False
921,3608397,"Nice, I like the method not hitting the database, but don't like it using the where method, I've implemented it using a none_value attribute here: https://github.com/rails/rails/pull/4609

 ",['URL'],False
921,3762016,https://github.com/rails/rails/pull/4805 is merged. Closing.,"['Accept', 'URL']",False
919,5495860,"All of the tests pass.

cc @tenderlove ","['Mention', 'Confirmation']",False
919,5505610,"Any thoughts about the names by the way?  'Filter' sounds too general, can be reserved for more complex operations.  Maybe `#deep_slice` and `#deep_except`?","['Question', 'Suggestion']",False
919,5730207,"Hey guys. We think that this kind of things should go to plugins. Active Support is for things that we use in the Rails code and common patterns.

Thank you for the pull request.","['Gratitude', 'Suggestion']",False
927,3769181,"*bump*

Would it make this any more compelling if I pointed out that this isn't just an optimization to reduce the number of objects created.   By running, eg, 

```ruby
client = company.clients.find_or_initialize_by_foo('bar')
client.save
company.save
```

you end up persisting two Client objects to the database - one in the return value from `find_or_initialize`, and one that's autosaved along with the `company.save`.",['Code'],False
927,3769304,"merged, thanks",['Accept'],False
924,3764366,"Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.",['Request'],False
924,3946677,"Hi Aaron,
I've submitted the pull request against master and tested everything
out. It awaits your leisure:

https://github.com/rails/rails/pull/4834

Cheers,
sk

On Wed, Feb 1, 2012 at 1:38 PM, Aaron Patterson
<reply@reply.github.com>
wrote:
> Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/4810#issuecomment-3764366",['Request'],False
924,4139215,"Hi Aaron,
Was looking at https://github.com/rails/rails/compare/v3.2.1...v3.2.2.rc1
and I noticed that the change to pslq didn't get backported. Do you
think that this will make 3.2.2?

Cheers,
sk

On Mon, Feb 13, 2012 at 1:55 PM, Sean Kirby <sskirby@gmail.com> wrote:
> Hi Aaron,
> I've submitted the pull request against master and tested everything
> out. It awaits your leisure:
>
> https://github.com/rails/rails/pull/4834
>
> Cheers,
> sk
>
> On Wed, Feb 1, 2012 at 1:38 PM, Aaron Patterson
> <reply@reply.github.com>
> wrote:
>> Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.
>>
>> ---
>> Reply to this email directly or view it on GitHub:
>> https://github.com/rails/rails/pull/4810#issuecomment-3764366",['Question'],False
924,4142581,"@sskirby thanks for reviewing the commits!  Yes, I meant to backport this before the release but totally forgot.  This will be in 3.2.2 final.",['Mention'],False
926,3767456,"We should honestly get rid of identity map. It was a great effort but the current limitations make it unusable in most apps. Alternatively, we can fix it and make it default.",['Suggestion'],False
926,3768577,"@josevalim agree.  [1, 2, 3, not it](http://www.urbandictionary.com/define.php?term=123%20not%20it).","['Mention', 'URL']",False
926,3774024,@josevalim what would be needed to make it usuable?,"['Mention', 'Question']",False
926,4707480,"I guess that should be closed now that IM was removed from master, thoughts?","['Question', 'Reject']",False
926,5530217,@carlosantoniodasilva agreed.,['Mention'],False
918,3737047,Can we add a test for at least 1 of those keywords?,"['Request', 'Question']",False
918,3737987,Is not enough to just prepend self always instead of checking against RUBY_KEYWORDS ?,['Question'],False
918,3738006,"Yeah, probably :P","['Confirmation', 'Answer']",False
918,3738444,@ayamomiji please do it and squash your commits :),"['Mention', 'Request']",False
918,3753661,"But i cannot just prepend `self.` always, this causes the DirtyTest to raise errors like these:

```
test_setting_attribute_will_result_in_change(DirtyTest):
NoMethodError: private method `attribute_changed?' called for #<DirtyTest::DirtyModel:0x007faa6b038b40>
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:373:in `method_missing'
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:314:in `name_changed?'
...

NoMethodError: private method `attribute_will_change!' called for #<DirtyTest::DirtyModel:0x007faa6b057568 @name=nil, @color=nil>
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:373:in `method_missing'
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:314:in `color_will_change!'
...
```","['Code', 'Bug']",False
918,3753752,"i'll use `send` instead of prepending `self.` for prevent make aliases on private attributes.
i'm not sure should attributes always be public?",['Question'],False
918,4450456,What's happening here? :) ,"['Digression', 'Question']",False
918,5523658,Is this still an issue?,['Question'],False
918,5532907,"/cc @josevalim I don't see another way of doing this but I don't like it neither :/. Or we leave the Ruby keywords list or we remove the CALL_COMPILABLE_REGEXP optimization and always do send(:'#{send}', #{extra})","['Mention', 'Suggestion']",False
918,5544342,+1 for always do `send`.,['+1 (Plus One)'],False
918,5550786,":-1: I think this is just hacky. :( If they are reserved, we shouldn't be messing with it. We should do make behavior as predictable as possible. In other languages, users have to respect the reserved words. I think we should too. Just my $0.02",['Objection'],False
918,5556157,"@isaacsanders disagree, you can define a method called begin for your classes in pure Ruby. So why stopping people for doing that on AM attributes?","['Mention', 'Question']",False
918,5556311,I don't know. It is just my opinion. I feel bad that I can't vocalize why I feel the way I do.,"['Digression', 'Objection']",False
918,5559397,"@isaacsanders no worries :), I was giving my opinion too :heart: :heart: :heart:",['Mention'],False
918,5672714,@spastorino @josevalim are we good to go here? :),['Mention'],False
918,5672827,"@carlosantoniodasilva read my comment where I've /cced to @josevalim, let's wait for him","['Mention', 'Request']",False
918,5674748,"We should just use `self.` The reason `self.` is making dirty tests fail is because your changes are affecting a place it should not to. There are two methods in the attributes module that calls `define_optimized_call`, one is alias attribute and there is a second one. You are mistakenly affecting the second one. Here is a patch for example that makes your tests pass:

https://gist.github.com/2686886

Can you please update accordingly?",['Suggestion'],False
918,5921779,@josevalim are we good to go now? :),"['Mention', 'Question']",False
934,3778224,/cc @josevalim ,['Mention'],False
934,3778481,"@jeremy it looks good to me, let's merge?",['Mention'],False
934,3780153,"Nice job, especially with updated docs and guide.

There are a lot of other refactorings and style changes included, too, making it hard to review the code carefully.

:+1: here but please do separate pulls for refactoring and style changes next time!","['+1 (Plus One)', 'Gratitude']",False
934,3780285,"@jeremy thanks, we will be paying more attention to that from now on.",['Mention'],False
933,3740561,"Pretty please. Some of us still use Rails 2.3.x, and latest 2.3.x with latest rubygems results in ~40 lines of deprecation warnings from rubygems on startup. 

See: https://github.com/rubygems/rubygems/issues/145   

The rubygems team does not seem to consider it a problem. ",['URL'],False
933,3778169,"@jrochkind can you test this patch on your app, as I said in the note above I wasn't able to find instructions on how to setup a 2-3-stable development env so some feedback would be useful",['Mention'],False
933,3778246,"(about to be on vacation for two weeks, will try to do after I return.  
If I can figure out how to apply a patch to rails in a 2-3 app myself,  
I don't know either.)

On Feb 2, 2012, at 8:53 AM, Elia Schito wrote:

> @jrochkind can you test this patch on your app, as I said in the  
> note above I wasn't able to find instructions on how to setup a 2-3- 
> stable development env so some feedback would be useful
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/4422#issuecomment-3778169","['Mention', 'Answer']",False
933,3778305,"It's probably enough to put:

```ruby
require 'rails/gem_dependency'

module Rails::GemDependency
  def self.add_frozen_gem_path
    @@paths_loaded ||= begin
      original_source_index = Gem::Specification.respond_to?(:dirs) ? Gem::SourceIndex.new(Gem::Specification.dirs) : Gem.source_index
      source_index = Rails::VendorGemSourceIndex.new(original_source_index)
      Gem.clear_paths
      Gem.source_index = source_index
      # loaded before us - we can't change them, so mark them
      Gem.loaded_specs.each do |name, spec|
        @@framework_gems[name] = spec
      end
      true
    end
  end
end
```

right before `Rails.boot!` in your application `config/boot.rb`.
",['Code'],False
933,4403969,"@elia The snippet in your last comment doesn't quite work. I got this error when I tried it:

    GemDependency is not a module (TypeError)

Changing module to class results in the error going away and the original warning being silenced. Have not tried this in production yet.",['Mention'],False
933,4424373,"@jwarchol that was a paste from a hack directly in rubygems :blush:

I tried and for me doesn't work *before* `Rails.boot!` but only **after**:

```ruby
# config/boot.rb stuff here...
# possibly bundler stuff here...

# All that for this:
Rails.boot!

require 'rails/gem_dependency'

class Rails::GemDependency
  def self.add_frozen_gem_path
    @@paths_loaded ||= begin
      original_source_index = Gem::Specification.respond_to?(:dirs) ? Gem::SourceIndex.new(Gem::Specification.dirs) : Gem.source_index
      source_index = Rails::VendorGemSourceIndex.new(original_source_index)
      Gem.clear_paths
      Gem.source_index = source_index
      # loaded before us - we can't change them, so mark them
      Gem.loaded_specs.each do |name, spec|
        @@framework_gems[name] = spec
      end
      true
    end
  end
end

```
","['Code', 'Mention']",False
933,4495483,"I'm working on removing all deprecations for all gem version in [elia#fix-railties-tests-for-latest-rubygems](https://github.com/elia/rails/tree/fix-railties-tests-for-latest-rubygems)

Right now I think I'm done from rubygems 1.3 up to 1.7, I also added some info on setting up dev environment in the README

Any feedback/help is really appreciated :bowtie:","['URL', 'Fixing']",False
933,5544380,"@jeremy @jonleighton @tenderlove hey guys, this pull request is pointing 2-3-stable branch. Could you take a look on it and see if we will accept or close it?

Thanks.",['Mention'],False
933,5561514,"I'm not seeing a final resolution or verified fix here. @elia could you open a pull request for your changes, instead?","['Mention', 'Objection']",False
933,5570277,"@jeremy, @rafaelfranca: see pull #6202, closing this one.",['Mention'],False
929,3774199,"Thanks :).

In principle I am hesitant to add that check, because it may hide that some code is not passing the bindings in its instrumentation call. Binds are a collection and so when no binds are used there's a collection, empty, but not `nil`.

There was a recent issue related to CACHE queries that I fixed in de161003c36a0cd967aa393e7706b12055770174 and will ship in 3.2.2. Have you seen any other use case?
","['Question', 'Gratitude']",False
929,3775395,"The cases where I was seeing this error appear were all using `find` with an `:include`, for example:

```ruby
User.find(
  current_user.id,
  :include => [
    :credit_card,
    :user_image,
    :sent_offers => {
      :sender => :user_image,
      :receiver => :user_image,
      :listing => [:listing_image, :listing_images]
    },
    :received_offers => {
      :sender => :user_image,
      :receiver => :user_image,
      :listing => [:listing_image, :listing_images]
    }
  ]
)
```","['Bug', 'Code']",False
929,3786584,"I cannot reproduce this failure on 3-2-stable with user has many posts. See the session:


    fxn@rails:~/tmp/test-4844 $ grep threshold config/environments/development.rb 
      config.active_record.auto_explain_threshold_in_seconds = 0
    fxn@rails:~/tmp/test-4844 $ script/rails c
    Loading development environment (Rails 3.2.1)
    1.9.3-p0 :001 > User.find(1, :include => :posts)
      User Load (3.3ms)  SELECT ""users"".* FROM ""users"" WHERE ""users"".""id"" = ? LIMIT 1  [[""id"", 1]]
      Post Load (0.5ms)  SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""user_id"" IN (1)
      EXPLAIN (0.6ms)  EXPLAIN QUERY PLAN SELECT ""users"".* FROM ""users"" WHERE ""users"".""id"" = ? LIMIT 1  [[""id"", 1]]
      EXPLAIN (0.1ms)  EXPLAIN QUERY PLAN SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""user_id"" IN (1)
    EXPLAIN for: SELECT  ""users"".* FROM ""users""  WHERE ""users"".""id"" = ? LIMIT 1 [[""id"", 1]]
    0|0|0|SEARCH TABLE users USING INTEGER PRIMARY KEY (rowid=?) (~1 rows)

    EXPLAIN for: SELECT ""posts"".* FROM ""posts""  WHERE ""posts"".""user_id"" IN (1)
    0|0|0|SCAN TABLE posts (~100000 rows)
    0|0|0|EXECUTE LIST SUBQUERY 1

     => #<User id: 1, created_at: ""2012-01-31 07:59:45"", updated_at: ""2012-01-31 07:59:45""> 

Could you post a way to reproduce the error?","['Code', 'Bug']",False
929,3907927,I was just getting this issue on 3.2.1. I changed to 3-2-stable and it's fixed it. Good work.,"['Gratitude', 'Confirmation', 'Fixing']",False
929,3908004,"@ihid excellent, thanks very much for the feedback.

The CACHE notification have binds now (and anyway we are no longer monitoring CACHE notifications). So I think we can close this issue.

@sferik if you find this error again please feel free to reopen.",['Mention'],False
929,3908885,Sounds good. Thanks for following up.,['Gratitude'],False
938,3810303,"Now, I realize that we updated rack-test to 0.6.1 on master, 3-2-stable, and 3-1stable.
Sorry, we miss this PR...

I'm closing this issue.
Thanks !",['Apology'],False
936,3798519,"Also spotted this, but the user argument is still missing.
`set_psql_env` should be handling this, but the rake tasks fail unless I provide an explicit user argument:

    `psql -U #{abcs[env]['username']} -f ""#{filename}"" #{abcs[env]['database']}`",['Bug'],False
936,3806968,"That's very strange, Chris, because my change only removes passing in the template as the last argument. If what you are saying is correct, db:test:prepare should not be working at all in master. Which means no one using PostgreSQL is able to run tests via the standard rake task.

Now that I think of it, however, I did only test the change as it applies to the 3-2-stable branch and not master. I will re-test against master. If something is wrong, I suspect that it's not because of the changes in this patch.",['Fixing'],False
936,3809545,"Well, by default psql uses the current OS user name if one isn't provided on the command line. Are you also running the rake tasks as a user that does not have direct access to the db? If so I'll have to check what's wrong with my environment.",['Question'],False
936,3831567,Just tested my patch against the latest master branch and (after applying https://github.com/rails/rails/pull/4910) everything seems to work just fine. I do not have a pg user that matches my username.,['URL'],False
936,3854345,"Just wondering if the suspicion that a username needs to be explicitly passed in to psql is what's keeping this pull request from being accepted.

If that's the case, the username issue is really a completely different issue and has nothing to do with the changes in this pull request. It should not be blocking this pull request, it should be in it's own ticket.",['Suggestion'],False
936,3857897,"@sskirby agreed. I've tested your patch in another environment and everything's working fine.
+1 for the pull request",['+1 (Plus One)'],False
931,1070412,SQLite 3 tests pass.,['Confirmation'],False
931,1095354,I'd like to avoid changing method signatures until Rails 4.0.  This change will break backwards compatibility with 3rd party adapters.,"['Suggestion', 'Objection']",False
931,1115044,@tenderlove should we leave this open then? or can we close?,"['Mention', 'Question']",False
931,1119560,Set up a milestone and add it?,['Question'],False
931,1119568,"Yes, we should set up a rails 4 milestone and add this.","['Suggestion', 'Confirmation']",False
931,1638469,How about changing its name to something like deprecated for rails 3-1 so people know it's going to go away? That would also minimize the confusion that @smartinez87 cites.,"['Question', 'Suggestion', 'Mention']",False
931,2334958,Milestoned @ Rails 4.0,"['Mention', 'Confirmation']",False
931,3374154,master is rails 4 now right? should this be merged?,['Question'],False
931,3376489,Yeah! Master is Rails 4.0 :heart:,"['Answer', 'Confirmation', 'Gratitude']",False
931,3776180,@smartinez87 I think it'd be good to rebase so it can be merged now :),"['Suggestion', 'Mention']",False
931,3777191,"had trouble rebasing master again, so opened a new PR #4850","['Objection', 'Bug', 'Fixing']",False
931,3782045,"closing this, since #4850 was merged",['Reject'],False
942,3800707,"I don't think we should even call the responder. We should just yield the block, as in respond_to.",['Suggestion'],False
942,3801285,"Ah yeah, you're right. Fixing that now.",['Fixing'],False
942,3801329,`retrieve_response_from_mimes` could probably return the collector and then we ask it directly if there is a response (and invoke) or fallback to the default one (with the responder).,['Suggestion'],False
942,3804100,Code has been updated.,['Answer'],False
942,3810688,"Yay, don't forget #4870 for 3-2-stable as well.",['Request'],False
935,3797518,NIce but the option name is not clear for me. Maybe skip_after_callbacks_if_halted or something like that instead?,['Suggestion'],False
935,3797566,`halted` is something internal. `:terminator` is part of the API. What about `skip_after_callbacks_if_terminated` ?,"['Suggestion', 'Question']",False
935,3797592,Sounds great.,['Confirmation'],False
935,3809525,Renamed.,['Confirmation'],False
935,3809563,"Awesome, thanks!",['Gratitude'],False
945,3825958,"Agreed it is better but if we are going to use present?, we need to require
the proper from AS.","['Confirmation', 'Answer']",False
945,3825970,Its already loaded. Have tested the test cases which is running fine.,['Answer'],False
945,3825987,Are you running the test case in isolation mode?,['Question'],False
945,3826021,Am running all the active model test cases.,['Answer'],False
945,3826050,"You need to run them in isolation in order to catch missing requires. In any case, we should just add the missing require.",['Suggestion'],False
945,3826066,will do if it is missed,['Confirmation'],False
945,3826529,"I made another pull request for this issue,   please refer #4904",['Request'],False
950,2079945,"Could you rebase your commits into one please ?
There's also a test missing :(",['Request'],False
950,3817666,"I think that this issue was fixed on 3-1-stable, 3-2-stable, and master.
I think that I should close this issue. What do you think ?

BTW, I cannot find a testcase for non english filename, and I'll send PR for it.",['Question'],False
950,3829851,"Hi ! @tanin47 
I'm closing this issue, because it seems that this issue is fixed already on 3-1-stable, 3-2-stable, master.
Please comment to this issue, if needed :-)","['Mention', 'Confirmation']",False
950,3849731,Alright :),['Answer'],False
948,3824513,/cc @jonleighton ,['Mention'],False
948,3828319,"Thanks for the patch, but this is not the right way to fix it. We need to fix the attribute accessor within AR to actually return the correct value.","['Fixing', 'Gratitude']",False
948,3829370,"Attribute accessor is working. All test are passing (with and without patch also).

You can try this example with and without my patch

``` ruby
require ""rubygems""
require ""action_view""
require ""active_record""
require ""logger""

ActiveRecord::Base.logger = Logger.new(STDOUT)
ActiveRecord::Base.establish_connection(
  :adapter => 'sqlite3', 
  :database => ':memory:')

ActiveRecord::Schema.define do
  create_table :items, :force=>true do |t|
    t.string :name
  end
end

class MySerializer
  def load(str)
    str.swapcase
  end

  def dump(str)
    str.swapcase
  end
end

class Item < ActiveRecord::Base
  serialize :name, MySerializer.new
end

@item = Item.new
@item.name = ""lowerUPPER""

puts @item.name
puts @item.attributes[""name""]

@item.save!

@saved_item = Item.last

puts @saved_item.name
puts @saved_item.attributes[""name""]

include ActionView::Helpers::FormHelper
puts text_field(:item,:name)
puts text_field(:saved_item,:name)

```

With patch

``` ruby

""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
<input id=""item_name"" name=""item[name]"" size=""30"" type=""text"" value=""LOWERupper"" />
<input id=""saved_item_name"" name=""saved_item[name]"" size=""30"" type=""text"" value=""LOWERupper"" />
```

Without patch

``` ruby
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
<input id=""item_name"" name=""item[name]"" size=""30"" type=""text"" value=""#&lt;struct ActiveRecord::AttributeMethods::Serialization::Attribute coder=#&lt;MySerializer:0x0000000187dad8&gt;, value=&quot;lowerUPPER&quot;, state=:unserialized&gt;"" />
<input id=""saved_item_name"" name=""saved_item[name]"" size=""30"" type=""text"" value=""#&lt;struct ActiveRecord::AttributeMethods::Serialization::Attribute coder=#&lt;MySerializer:0x0000000187dad8&gt;, value=&quot;lowerUPPER&quot;, state=:unserialized&gt;"" />
```

Maybe I'm not getting it. Can you tell me where I'm wrong thinking about this problem @jonleighton? Attribute reader is returning unserialized value. But in form helpers serialized values are used. That's how this was working in Rails 3.1.3.",['Code'],False
948,3829442,"It's the `_before_type_cast` accessor that is broken, i.e. `@saved_item.name_before_type_cast`","['Bug', 'Answer', 'Code']",False
948,3829518,So ```@saved_item.name_before_type_cast``` should be ```LOWERupper``` in my example @jonleighton ?,['Mention'],False
948,3836776,We noticed this bug on v3.2.1. It's definitely a regression from 3.1.1.,"['Bug', 'Confirmation']",False
948,3842266,@listrophy no. 3.1.3 is working still.,['Mention'],False
947,3827936,Commits Squashed to one.,['Answer'],False
947,4795780,@josevalim could you please review / merge?,['Mention'],False
946,2309566,+1 .. drove me nuts for an hour!!,['+1 (Plus One)'],False
946,2309746,.. and is a serious bug which leads to not beeing able to delete any objects when using auth headers,['Bug'],False
946,3827727,hey guys ... where is the problem to merge this ???,['Question'],False
946,4098792,This should have some test included but I can verify the code in this pull requests works... but then again a similar bug (with #build) which also has a test accompanying it has yet to be merged...,['Bug'],False
946,4825229,ActiveResource has moved to you own repository. I'm closing this. Please open a new pull request in the [ActiveResource](https://github.com/rails/activeresource) repository if you want.,['URL'],False
955,3831091,Does this fix #2575?,['Question'],False
955,3831245,It seems that this problem is same one ;-),['Confirmation'],False
955,3831376,@ihid Do you think about this PR ? Will we have any problem ? (or should close #2575 too ?),['Mention'],False
955,3831995,"I've got no issue with this PR at all. It's good. Thanks! :)
I'll check later to check it fixes my issue. I'll either mark the issue as closed or send a further PR that fixes that as well.  ","['Gratitude', 'Accept']",False
955,3905611,Great update guys - wonderful to see this fixed :-) Is it too much to ask to have it posted here when it is inserted into core?,"['Gratitude', 'Question']",False
955,3906603,"Oh, by the way, with core, I mean stable release","['Confirmation', 'Answer', 'Suggestion']",False
955,3910687,"I closed the other ticket and then realised I still had a monkeypatch there that was causing it to work regardless of your patch. I've just spent half an hour trying to get master branch working on my codebase and I'm giving up. I get so many dependancies failing in my Gemfile.

I'm pretty certain that what you've got there will fix it, so I'm just going to leave the other ticket closed and I'll keep an eye on it. Thanks, @kennyj.","['Mention', 'Confirmation', 'Fixing']",False
955,3910707,"@kennyj, sorry - could you put a PR for 3-2-stable too please so I can get rid of my monkey-patch? :)",['Mention'],False
955,4296191,Sorry to jump on the end of this ticket but.. any idea why this would cause resolve/refinerycms#1383 ? ,['Question'],False
958,3833589,"Seems good, but I'm a little annoyed because this value is OS (and possibly filesystem) specific.  I'm annoyed that Ruby doesn't provide an API to `pathconf` so that we can determine the correct length.  Without that value, we're just going to keep chasing numbers until this value is set to the lowest common denominator. :(",['Objection'],False
958,3838420,I agree; it does feel crufty. Am open to a better solution if available...,"['Accept', 'Confirmation']",False
958,4074602,"Just checked on Linux

```
2.6.38-13-generic #54-Ubuntu SMP Tue Jan 3 13:38:12 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux
Natty
```

in my case
On Encrypted FS(Cryptfs):

```
test will fail on filename size >= 144
And will pass on FILENAME_MAX_SIZE = 143
```

Ubuntu community says that is known filesize bug (on cryptfs) and filesize on current dir underlying fs cannot be determined by syscalls from ruby.
This is related to @tenderlove conversation with Motohiro KOSAKI & Yui NARUSE
on https://bugs.ruby-lang.org/issues/5974

On Ext4 unencrypted:

```
test will pass on 230 as expected
```


On FreeBSD UFS unencrypted tests passed on FILENAME_MAX_SIZE = 230 

What about cryptfs on Linux - current FILENAME_MAX_SIZE value will make cache files with long names(usually escaped utf strings) unusable before it hooked and truncated by rails.cache api calls

* Maybe it will be useful to make a hash of limits + fs byte overheads for each FS. But IMO this will be very ugly :)
* Or get a lowest limit on filename size - 143 for ecryptfs and use it for FILENAME_MAX_SIZE - this is ugly too IMO :(

In my particular case - i only can use a constant override to decrease FILENAME_MAX_SIZE to use a cache on dev and prod machines with cryptfs :( Sad




",['Code'],False
958,15665329,"Just ran into this issue on 3.2.11 and ended up overriding the constant to 223. I probably won't submit a pull request to change it in master because 228 should be good enough for most cases, and because we should find a more robust solution as @tenderlove suggests. Maybe catching the ENAMETOOLONG and retrying with a shorter max length, but that may break existing keys.

That said, I'll at least document why I went with 223 instead of 228:
Tempfile adds `""#{t}-#{$$}-#{rand(0x100000000).to_s(36)}-#{n}.lock""` to the end of the filename.
`t` is the date; always 8 chars.
`$$` is the pid; on linux this defaults to a max of 32768, but can be configured to a max of 4.2million or 7 chars.
`rand.to_s` base 36 encode of a 32bit number; max of 7 chars
`n` is the retry count; should never happen, but lets say it could get up to 2 digits before the universe explodes.
That adds up to 32 characters, and 255 - 32 = 223. 

So, 228 should work fine in most real world cases where the max pid is 5 digits long and there are no retries and the max filename length is 255.",['Bug'],False
959,3292205,"Any of the Rails team had a chance to look at this. I added in some tests. Thoughts, comments?  Feedback welcome. ",['Question'],False
959,3292314," i dig it. only thought is are you intentionally not saying ""bundle exec rake db:migrate""?",['Question'],False
959,3292856,"Great suggestion, i'll add it in!","['Gratitude', 'Accept', 'Confirmation']",False
959,3293603,I dig it.  +1,['+1 (Plus One)'],False
959,3294425,+1 makes sense.,['+1 (Plus One)'],False
959,3303225,This will be quite helpful. :+1:,['+1 (Plus One)'],False
959,3325395,+1,['+1 (Plus One)'],False
959,3589175,cool +1,['+1 (Plus One)'],False
959,3815698,+1,['+1 (Plus One)'],False
959,3832106,"@josevalim hate to bug on this one, but can you merge this in or give me some comments? The sooner no one asks me why they're getting a NoMethodError when they haven't migrated the database, the better. If there is someone else that needs to join the conversation let me know, and we can get them in here.","['Mention', 'Request']",False
959,3832192,/cc @tenderlove ,['Mention'],False
959,3833551,"I'm uneasy about this change.  Having the exception handling code checking the migrator does not sound awesome (especially if this is happening in production).  I'm -1 on this change, but I'm willing to hear other opinions. /cc @jonleighton ","['Objection', 'Mention']",False
959,3834163,"I am also a +1 for this, but I understand @tenderlove's concern. How about adding a `!Rails.env.production? &&` clause to each of those 'if' statements checking `if ActiveRecord::Migrator.needs_migration?`. That might address everyone's concerns.","['Suggestion', 'Mention']",False
959,3836554,"@tenderlove & @jonleighton I'm very open to implementation suggestions. Not performing this check in production on _every_ error makes sense. We could add a environment check per @scottwb's suggestion, or make it a config option. Perhaps coming up with a standard way to add debugging suggestions to development error messages could make this pattern more sustainable, but i'm not exactly sure what that would look like. Let me know what you think.","['Suggestion', 'Mention']",False
959,3840553,"This would save me some pain.
+1 and agree we want to be able to enable this for dev only.",['+1 (Plus One)'],False
959,3842993,Making this a `config` option is a good idea. This way I can enable it not only in development environment but also in my other custom environments that resemble development.,"['Confirmation', 'Accept']",False
959,3844555,"I think the idea is good but we shouldn't solve it by changing Active Record. For a start, picking up on specific errors is always going to leave other errors uncaught that were also caused by missing migrations.

I think we should make the feature configurable, and have it work like so by default:

* Development: raise an error on page load if there are pending migrations
* Test: display a warning when test is run if there are pending migrations
* Production: no change",['Suggestion'],False
959,3851336,"@jonleighton I think that addresses everyones concerns and accomplishes everything I want. I can go ahead and rip out the ActiveRecord bits from this pull request and just leave in the migration checking code. 

Would you prefer a separate  pull request for warning/error messages or just amending this one? I'm thinking by default we can have it off, and to turn it on you can do something like this to development/test.rb

```ruby
config.migration_pending = :error
config.migration_pending = :warn
```
","['Question', 'Mention']",False
959,3851478,"As just discussed with @waseem, one could apply a similar approach to the [following based on EpicFail](https://github.com/bsodmike/EpicFail/blob/master/lib/epic_fail/exceptions/rack.rb):

```ruby
module EpicFail
  module Exceptions
    class Rack
      #...
      
      def notify_exception(e, env)
        # Exception: backtrace  exception  message
        EpicFail::Failure.create!(:exception => ""#{e.class}"", :message => ""#{e.message}"", :backtrace => ""#{e.backtrace}"")
      end
    end
  end
end
```

and perform

```ruby
ActiveRecord::Migrator.current_version != (ActiveRecord::Migrator.migrations(migrations_paths).last.try(:version)||0)
```

to detect a pending migration.  `e.message` can be updated accordingly and presented in the rendered error.  All of the above as per @jonleighton still apply.  Thoughts?",['Code'],False
959,3897192,"

Setting up the configuration is straight forward: 

active_record/lib/active_record/base.rb

```ruby

##
# :singleton-method:
# Specify how to notify the user when pending migrations are detected
# use :warn, :error, or :none
cattr_accessor :on_pending_migration , :instance_writer => false
@@on_pending_migration = :none

```


Then actually raising/warning the message is straightforward

```ruby

# Notifies the developer if there are pending migrations
# the type of notification can be configured. Example:
#
#   config.active_record.on_pending_migration = :error
def notify_pending_migrations
  case ActiveRecord::Base.on_pending_migration
  when :error
    raise ActiveRecordError::PendingMigration, ""There are pending migrations run 'bundle exec rake db:migrate' to resolve them"" if ActiveRecord::Migrator.needs_migration?
  when :warn
    warn ""There are pending migrations run 'bundle exec rake db:migrate' to resolve them"" if ActiveRecord::Migrator.needs_migration?
  end
end

```


The thing I'm unsure of is where to call `notify_pending_migrations`. Since migrations are an ActiveRecord specific concept, I would like to keep the code within AR (not rely on a controller/view/etc. to relay the message). It also needs to work in the console and when running on a server. If we don't check _every_ round trip to the server we can't be sure that new migrations haven't been introduced. So we could hook into something like  `ActiveRecord::Base.table_name` that gets called on each round trip to the DB, though that would be a lot of redundant checks. Perhaps there is a better place to do the check?",['Code'],False
959,5519053,Any thoughts on this @tenderlove / @jonleighton?,['Mention'],False
959,5761141,"I like the idea a lot but I don't like to have to wait for the server to start and browse the app to get the error, It'd be better to throw the error when the server is starting, something like this:

    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate'

Which is what kinda happens with Bundler:

    $ rails server
    Could not find gem 'meh' in the gems available on this machine.
    Try running `bundle install`.

I could work on that patch. What do you guys think?","['Suggestion', 'Bug']",False
959,5761213,"I think we can at least get in the `needs_migration?` helper. Then people can proceed to check on initialization, add a middleware in development and so forth.","['Suggestion', 'Request']",False
959,5770170,"I'd still like this when the server is starting, but in a second thought, what if the user rolls back? the schema wouldn't be up to date and the server wouldn't start, that might not be ok, so we could add an option to the configuration (and configure in config/development.rb), something like this:
    
    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate' or use config.whatever_the_name_config_option_is = false

There's another thing, `needs_migration?` would be better to me if it were `pending_migrations?`","['Suggestion', 'Bug']",False
959,5771108,"`pending_migrations?` is fine. I don't we should check it on startup by default. You gave one possible example for it failing, but there are other occasions as well (like progressive updates in production).",['Accept'],False
959,5771575,"@josevalim I think this is a helpful thing in development only, in production?, not all, and yeah, it shouldn't be enabled by default either, even on development mode, I'm pretty sure there are people out there with a git post-commit hook or something like that checking for pending migrations already, so we could add a commented out config option in config/development.rb:

    # Enable pending migrations checking on startup (default is false)
    # config.check_pending_migrations_on_startup = true

    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate' or set config.check_pending_migrations_on_startup to false

What do you think?","['Suggestion', 'Mention']",False
959,6232858,Closed in favor of #6665,['Reject'],False
962,2438341,"Hrm, I am unsure if this the concern of to_json? Shouldn't escape_json do this instead?","['Suggestion', 'Question']",False
962,2438618,"Where may I find escape_json ?

PS. I do think this is a concern of to_json. See the definition of `string` at http://json.org/ and see also http://noteslog.com/post/the-solidus-issue/
 
> The reason for allowing the slash to be escaped is for making it safe to embed the JSON substring `</script>` in HTML.
",['Question'],False
962,2438686,"I'm thinking maybe it should have `ActiveSupport.escape_script_tags_in_json` (similar to `ActiveSupport.escape_html_entities_in_json`)

Set by default to +true+

And when +true+ only escape `</script>` strings, to avoid too much unnecessary escaping.

",['Suggestion'],False
962,2438911,"Sorry, it is json_escape (and not escape_json):

https://github.com/rails/rails/blob/aa11f7332c1abadea23576805985f402298273f9/activesupport/lib/active_support/core_ext/string/output_safety.rb#L53


*
Jos Valim
www.plataformatec.com.br
Founder and Lead Developer
*","['Apology', 'URL']",False
962,2439298,"Don't like that at all! The output is not valid JSON anymore, which is a waste. You'd have to parse it to JSON again on the client. Better to simply send valid JSON.","['Objection', 'Answer']",False
962,2439302,"Hrm, right. Ok, I am leaving this open for more feedback then. /cc @jeremy","['Confirmation', 'Mention', 'Request']",False
962,3451822,"I agree with @lawrencepit that this would be useful!  It's a common pattern for backbone.js apps to embed json directly in a &lt;script&gt; tag (in order to avoid an extra round trip to load a model).  I'm agnostic as to whether escaping of ""&lt;/script&gt;"" -> ""&lt;\/script&gt;"" should happen in to_json (since it doesn't effect json used in other context except &lt;script&gt; tags), but it sure would be nice if there was a helper for it (javascript_json_escape?)","['Confirmation', 'Mention']",False
962,3836181,":up: Any new suggestions how to deal with that problem? `escape_script_tags_in_json` works fine, but it cost too much...",['Question'],False
962,5248007,"The whole javascript / JSON escaping situation seems like a mess to me.

We have `json_escape` which looks useful but definitely isn't and `escape_javascript` which while having a better use case is named inconsistently and doesn't cover escaping JSON. Not to mention the `j` aliasing!

I also disagree with @lawrencepit's solution as `{""name"":""<script>alert('foo');</script>""}` is perfectly valid JSON, the issue being solved here is with the browser and so belongs in a view helper.

We need some joined up thinking and consider this and the following issues as a whole

* https://github.com/rails/rails/pull/3578
* https://github.com/rails/rails/pull/5127",['Objection'],False
962,5257905,"@bestie not sure what you're disagreeing with. The string you quote is valid JSON, and so is `<script>{""name"":""<script>alert('foo');<\/script>""}`.

Sometimes you have to be practical. If you push this to a view helper it will use *a lot* more resources. My original solution works. And it conforms to the JSON specs. Everybody happy I'd say.","['Answer', 'Mention']",False
962,5292491,"@lawrencepit I'm disagreeing with `to_json` changing a valid JSON string for the benefit of the browser, it's simply the wrong place for it to happen.

I also don't take your point on performance, a call to `gsub` in `to_json` equivalent to a `gsub` in a helper.",['Mention'],False
962,5296994,"I disagree it's in the wrong place. It follows the JSON spec. Read it. It specifically mentions the solidus in the string form. If you escape the solidus it's still perfectly valid JSON, just more perfect.","['Objection', 'Answer', 'Reject']",False
962,5646755,":thumbsup: @lawrencepit  it doesn't break the whole JSON string but makes it safer for use case above.
But, IMHO, escaping HTML is more important here.   config.active_support.escape_html_entities_in_json = true
 is not working for
```
 render json: {x:""<script>alert(1)</script>""}
```
",['Mention'],False
962,5647532,"I'm also gonna give a :thumbsup: to @lawrencepit on this one. After reading the JSON spec closely I realised the string with the escaped solidus is equivalent, so escaping it is optional.

To express in Ruby
```ruby
{""key"" => ""<script>something</script>""}.to_json == {""key"" => ""<script>something<\/script>""}.to_json
```
and also
```ruby
JSON.parse(""{\""key\"":\""<script>something</script>\""}"") == JSON.parse(""{\""key\"":\""<script>something<\/script>\""}"")
```
both producing
```ruby
{""key""=>""<script>something</script>""}
```

My issue was that I thought the suggestion was to make a real change to JSON encoding, in reality this is completely in-line with the JSON spec, implementing an optional extra, and makes putting JSON into the browser way more convenient.

I still think we have a problem escaping JSON in Rails, but this is going to be convenient for a lot people and is easy innocuous change to make.

@josevalim was your issue the same as mine? Maybe you will change your mind also?",['Code'],False
962,6495175,"Oh, similar issue here.

We can close this issue since we merged making escape_html_entities_in_json to true by default.
/cc @josevalim ","['Accept', 'Mention']",False
962,8582828,"> We can close this issue since we merged making escape_html_entities_in_json to true by default.

Sounds good. If anyone can demonstrate this is still a problem after that change, let me know and I'll re-open. Thanks.",['Accept'],False
972,3839787,"@carlosantoniodasilva @guilleiguaran 

I added this testcase for fixing https://github.com/rails/rails/issues/4749.
I'm confusing... Why should we use 3-2-stable when using --edge option ?

related to https://github.com/rails/rails/pull/4912","['Mention', 'Question', 'Objection', 'URL']",False
972,3840051,"@kennyj hm yeah, I didn't check it further, just added the test fix. Seems like the `:branch` shouldn't really exist, let me check it better.","['Mention', '+1 (Plus One)', 'Suggestion']",False
972,3840062,"This confusing, generating a new app passing --edge option using 3.2.x also generate apps with conflicts about dependencies.","['Objection', 'Mention']",False
972,3840157,"Yeah, but with the `:branch` option:

```ruby
gem 'sass-rails',   :git => 'git://github.com/rails/sass-rails.git',   :branch => '3-2-stable'
gem 'coffee-rails', :git => 'git://github.com/rails/coffee-rails.git', :branch => '3-2-stable'
```

I get the same error as result:

```
Bundler could not find compatible versions for gem ""railties"":
  In Gemfile:
    sass-rails (>= 0) ruby depends on
      railties (~> 3.2.0) ruby

    rails (>= 0) ruby depends on
      railties (4.0.0.beta)
```

If I remove the `:branch`, it bundles successfully.","['Code', 'Fixing', 'URL']",False
972,3840245,I get same result when I was tackling #4749.,"['Confirmation', 'Answer']",False
972,3841636,"BTW, My confirmation way is https://github.com/kennyj/rails/commit/8bf3c6d8165fa6442b3ae2f86a955c82d0abf99b#commitcomment-921532",['URL'],False
972,3841691,"You're right guys, my commit needs to be reverted","['Confirmation', 'Accept']",False
1035,3396429,"IMO it is not a good idea to call OrderedHash a Hash, i hope that some time in the future Hash in Ruby will become unordered again, and ordered hash will be called OrderedHash.

http://bugs.ruby-lang.org/issues/5123",['Objection'],False
1035,3396434,nice - should we deprecate the constructor/class too so it can eventually be removed?,['Question'],False
1035,3396522,"No, but i think that it is a bad idea to call ordered hash a hash, not because it can be removed, but because it is good to document in the code whether the ordering is used.

In my opinion it was a bad idea in the first place to specify that Hash in Ruby 1.9 is ordered, i think it shouldn't be.",['Objection'],False
1035,3875575,"OrderedHash serializes as an omap in yaml so there's still valid functionality there.

Additionally, deprecating it is just giving busy work to users who upgrade, there's no harm in having a few lines of code lying around to avoid having thousands of people getting thousands of error messages.

We could take another pull request which removed any remaining unnecessary uses of OrderedHash internally, but there's no need to do this.",['Suggestion'],False
1030,3838721,Whoops. Sorry. Made a mess. Closing this out in favor of this pull request: https://github.com/rails/rails/pull/4916,['URL'],False
529,3638801,/cc @tenderlove ,['Mention'],False
529,3691905,@tenderlove Could you glance at the related change #3457?,['Request'],False
1034,3874346,"If we are doing this, it shouldnt be a constant, but a Rails accessor. And please send feature requests to master. Thanks.","['Confirmation', 'Request']",False
89,5518881,Any thoughts on this @tenderlove / @jonleighton?,"['Mention', 'Question']",False
89,6453591,I am curious too. Seems like a nifty feature.,['Confirmation'],False
89,6465826,Added code and tests for this feature. Please comment! Thanks.,['Request'],False
89,6465897,"I think we should be able not to have a proc, but a ""normal"" value too.

    class_attribute :bar, default: 'foo'",['Suggestion'],False
89,6465939,I realize that I went slightly against my own spec – I'll update it such that the proc is passed the attribute name.,"['Fixing', 'Confirmation']",False
89,6474136,"Rather than add an option here, you can override the reader method in the abstract superclass:

```ruby
class Abstract
  class_attribute :bar

  def self.bar
    raise NotImplementedError
  end
end

class Subclass < Abstract
  self.bar = 'now defined'
end
```","['Code', 'Suggestion']",False
89,6494703,"@jeremy this is true, but that does kind of grapple against the declarative nature of class_attribute. By allowing for a callable thing to be passed as an option, it keeps the logic localized.",['Mention'],False
89,6494759,It adds complexity to an otherwise very simple declaration. Ruby doesn't have defaults on `attr_accessor` either and we get along ok :),"['Answer', 'Objection', 'Suggestion']",False
285,3690313,"I like it. It will reduce the mistakes related to join tables a lot. If other core team members agree with this patch, we could even add a generator shortcut like: `rails g migration join_table_users_and_labels` (yes, I am a lazy bastard)","['Suggestion', 'Confirmation', 'Accept', 'Answer']",False
285,3691368,"Seems easy to forget that there's a special way to create join tables, though.

Could we solve the original problem by just populating timestamps on join tables, too?","['Suggestion', 'Question']",False
285,3691382,"@jeremy I am also fine with populating timestamps on join tables, although it seems @jonleighton doesn't like the idea much.",['Mention'],False
285,3691694,"I'm not a fan of more complexity there either, but it feels worth being able to use a ""stock"" `create_table` as a join table.

Less for people to think about or look up in docs, and it's interchangeable with a `has_many :through` without migrating.","['Suggestion', 'Objection']",False
818,4860830,"your PR needs a rebase!


Thanks :-)","['Suggestion', 'Gratitude', 'Objection']",False
818,4868185,Voilà !,"['Answer', 'Non-english']",False
818,4920171,"thanks for rebasing. Let me get someone to review this :-) 

Cheers, 
Arun

cc/ @spastorino can you look this PR ?",['Gratitude'],False
818,5544331,@jeremy please take a look in this pull request and also see if [this comment](https://github.com/rails/rails/pull/4254/files#L0R442) is still relevant,"['Mention', 'Request']",False
818,5616495,"Ok, looking good to me! Thanks for your patience, @alexeymuranov  :)","['Mention', 'Confirmation', 'Gratitude']",False
818,5619839,yay!,['Gratitude'],False
647,3692683,Why are you resubmitting the same PR once every few days?? #4600 #4622 #4638,['Question'],False
647,3692720,"@vijaydev I am sorry but there was some problem with my fork so had to delete them, reopen the PR.",['Mention'],False
647,3965292,Why is this change needed? ,['Question'],False
647,3967069,"@vijaydev  as there is already a ````logger```` method defined which returns ````@target.logger```` , so instead of calling ````@target.logger ```` again, it makes sense to use the ````logger```` method. ",['Mention'],False
647,3977596,"@railsaholic, u r right!!","['Confirmation', 'Mention']",False
647,4546947,@josevalim  Is it good enough?  Thanks,"['Question', 'Mention']",False
647,4547125,"Actually this only adds one more method call without any profit.
Plus if `logger` method is redefined by user, but `logger?` is not for some reason - this can lead to bugs as checked and returned objects can be different","['Suggestion', 'Answer', 'Bug']",False
647,5438847,"@railsaholic thank you for your patch, but I believe the method is clearer by using `@target.logger` since it already tests for `@target.respond_to?(:logger)` in the same line.",['Mention'],False
821,3671649,"@rafaelfranca Hey, we don't allow changelogs to be edited in docrails.",['Mention'],False
821,3671696,"Yeah, you are right. Sorry, I thought that was a typo in a Guide",['Apology'],False
822,3671731,Why use a symbol instead of just passing the separator as a string?,['Question'],False
822,3680990,"It just looks aesthetically acceptable to me.
If you think it's useless, I'll close this pull request.",['Accept'],False
822,3682692,@josevalim wdyt? ,['Mention'],False
822,3682873,Thanks but I will close this since I checked with the others and they are :-1: on it as well.,"['Gratitude', 'Reject']",False
820,3669834,"Using `:rubygems` in the Gemfile means that it's actually accessing http://rubygems.org instead of https.  I'd like to propose that we revert this change as I think https is a better default.  Thoughts?


FYI - Some time back I had submitted a pull request to bundler to change the default usage of `:rubygems` to be https but it was not merged due to SemVer.  More info here: https://github.com/carlhuda/bundler/pull/1585",['Suggestion'],False
820,3670624,There's honestly no benefit to using HTTPS when requesting rubygems. I don't see why the argument is made one way or another here.,['Objection'],False
824,3673204,"Rather than disable the GC, why don't we just close the tempfile after performing the mv?  It seems like we could just flush the tempfile, move, then close.

/cc @jeremy ","['Suggestion', 'Answer']",False
824,5518302,Any thoughts on this @tenderlove?,"['Mention', 'Question', 'Fixing']",False
824,5520309,"Closing the tempfile shouldn't expose it to possible GC - wtf?

/blame @NZKoz ",['Objection'],False
824,5520483,@jeremy tempfiles are rm'd from the filesystem [via a finalizer](https://github.com/ruby/ruby/blob/trunk/lib/tempfile.rb#L133-134). /play tmyk,"['Mention', 'Answer']",False
824,5520532,"Yeah, but there's still a live reference to the Tempfile object. Closing the file descriptor shouldn't cause it to be eligible for GC.","['Objection', 'Bug', 'Answer']",False
824,5520816,"You're right.  The only thing I can think is that somehow [`check_name` somehow collides with the actual tempfile name](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/file/atomic.rb#L35-38), or somehow the FS is cleaning up the temp file dir.  Either way, I don't see how GC could have anything to do with this.","['Suggestion', 'Confirmation', 'Answer']",False
824,5522448,"Yeah, I fail to see how GC could be causing this,  sticking GC.start in the method didn't trigger it.

seems more likely that @tenderlove's check_name theory is the culprit.","['Suggestion', 'Mention']",False
824,5522492,I'm closing this until we have a repro.  Thanks!,"['Confirmation', 'Reject']",False
831,3667844,"Is there any failing test so we can check with that?? 

",['Question'],False
831,3677403,"No I can not, because apparently it works fine.

I am not sure why it was not working for me, nor am I sure why it does work since Date#advance is not defined in Time::Calculations and none of the requires at the top of Time::Calculations add it.

    rails[master]/ › irb
    >> require 'active_support/duration'
    => true
    >> require 'active_support/core_ext/time/zones'
    => true
    >> require 'active_support/core_ext/time/conversions'
    => true
    >> Date.new.advance minutes: 1
    NoMethodError: undefined method `advance' for #<Date: -4712-01-01 (-1/2,0,2299161)>
        from (irb):4
        from /home/caleb/.rvm/rubies/ruby-1.9.2-p290/bin/irb:16:in `<main>'
    >> Time.new.to_date.advance minutes: 1
    NoMethodError: undefined method `advance' for #<Date: 2012-01-26 (4911905/2,0,2299161)>
            from (irb):5
            from /home/caleb/.rvm/rubies/ruby-1.9.2-p290/bin/irb:16:in `<main>'

But...

    rails[master]/ › irb
    >> require 'active_support/core_ext/time/calculations'
    => true
    >> Date.new.advance minutes: 1
    => #<Date: -4712-01-01 (-1/2,0,2299161)>

So it clearly works somehow.  I'm just not sure where active_support/core_ext/date/calculations is being required, or more specifically where Date#advance is being defined.


",['Fixing'],False
829,3674757,This breaks shared_examples_for in rspec so it'd be awesome if this could be backported to 3.2 as well.,['Suggestion'],False
826,3673908,"Thanks for the patch. I've added some comments. Please address them and file a new PR against master, not 3-2-stable.",['Request'],False
826,3673919,Another comment: new applications should be generated with `config.active_record.dependent_restrict_raises = false`.,['Suggestion'],False
826,3673926,Please also specify in the documentation that an error will be added to the model.,"['Suggestion', 'Request']",False
826,3673928,"Also, needs a CHANGELOG entry.",['Suggestion'],False
828,3669873,Bad Pull Request. Please fix this. Or create new one.,['Objection'],False
828,3669884,Yep. Definitely a bad one. Sorry about that.,['Apology'],False
833,3396184,"+1 @chinshr and I recently came across this issue at work, would be good to see this pulled.","['+1 (Plus One)', 'Mention']",False
833,3667867,Can you please do a rebase with your PR. I think some of the change are already there.,['Request'],False
833,3680756,@arunagw I rebased but the issue is still present.,"['Bug', 'Mention']",False
833,4017417,cc/ @tenderlove ,['Mention'],False
833,4024906,"Can we do this test without an `instance_variable_set`?  I believe the logger could be nil, but surely we should test the public API that causes it to be nil.","['Request', 'Question']",False
833,4390245,"@pwim seems your changes is already done here b5c939dcb3979901fc31f8c79a4fde58999052e8

Can you please fix the test and fix this PR??

Cheers, 
Arun","['Request', 'Fixing']",False
833,4406745,"Yes, the changes are there so this PR is no longer necessary.","['Confirmation', 'Answer']",False
833,4409652,@pwim Cool thanks :-),"['Gratitude', 'Mention']",False
843,3687199,"I found this

```
./railties/guides/source/configuring.textile:* +config.colorize_logging+ specifies whether or not to use ANSI color codes when logging information. Defaults to true.
```",['Code'],False
838,3684839,+1,['+1 (Plus One)'],False
838,3684852,+1,['+1 (Plus One)'],False
838,3684963,+1,['+1 (Plus One)'],False
838,3684975,+1,['+1 (Plus One)'],False
838,3685044,+1,['+1 (Plus One)'],False
838,5487327,"The tests all pass;  Though should the following lines `Time.now.to_f` be changed to `Time.now.to_i` ?

cc @tenderlove ",['Mention'],False
838,5493358,I don't think we need to change the `Time.now` line.,['Reject'],False
846,3696474,"Umm... Thanks, again!",['Gratitude'],False
849,2188173,cc @spastorino,['Mention'],False
849,2188174,cc @josevalim,['Mention'],False
849,3702780,"This patch breaks mswin32 ruby. Because mswin32 version of ruby installed rake.bat instead of rake with shebang line and rake.bat is bat file (special type of windows shell script) embeded ruby script in it.
The patch makes re-launch command line as 'ruby.exe rake.bat assets:precompile'. Then ruby will read bat file directly and makes error : PATH/rake.bat:1: syntax error, unexpected tIDENTIFIER, expecting $end
Here is fixed version of the patch.   https://gist.github.com/1695503

I wonder if you pull the patch, thanks.",['Bug'],False
849,3702853,@arton please provide a PR so everyone can follow the discussion,['Mention'],False
849,3703025,"@spastorino Oh, sorry. I'll try it.",['Mention'],False
848,3700412,Way easier to read :) :+1:,['+1 (Plus One)'],False
848,3700816,:+1:,['+1 (Plus One)'],False
845,3543368,Thanks for the pull. I am in general not a fan of overriding `to_s`. But let's see what other core members think about it. /cc @tenderlove @jonleighton @fxn ,"['Gratitude', 'Suggestion', 'Mention']",False
845,3545690,"I agree with @josevalim; `render` is domain specific terminology, whereas `to_s` is not. If these classes were public then maybe I would be persuaded otherwise, but I think we are agreed that they should remain private, hence there is no great advantage in making it easier for people to use in their erb files.","['Mention', 'Accept', 'Confirmation']",False
845,3547932,":-1: to change `render` to `to_s`, for the same reasons that @jonleighton. But I liked the others changes.","['Mention', 'Suggestion', 'Objection']",False
845,3694975,"I believe the most important changes were already applied by @rafaelfranca's pull request, so this issue could be closed.","['Mention', 'Reject']",False
844,3694939,"Awesome, this feature is a lot more useful this way, great work :+1:","['Gratitude', '+1 (Plus One)']",False
844,3698612,:+1: Fantastic work @Manoj! Looking forward to seeing this merged! /cc @jonleighton ,['+1 (Plus One)'],False
844,3699560,"Added some more comments, thanks.",['Gratitude'],False
844,3707470,@asanghi @carlosantoniodasilva @NoICE Thank you all for your input. :),"['Mention', 'Gratitude']",False
844,3707472,"@jonleighton Thanks for the comments, I have addressed the suggested modifications. Please comment. :)","['Mention', 'Gratitude']",False
844,3707902,I'd simplified how the error message is defined [15154c0](https://github.com/pacoguzman/rails/commit/15154c0d8c656b664fb0d387951a5bd62b0a9da7),"['URL', 'Bug']",False
844,3722339,@pacoguzman thx for the refactoring :),"['Mention', 'Gratitude']",False
844,3729275,added some more comments. please also pull in @pacoguzman's refactorings.,"['Mention', 'Request']",False
844,3735550,"@jonleighton addressed the suggested improvements, also included @pacoguzman's refactorings. :)",['Mention'],False
844,3739478,"@jonleighton Any chance we can get this ""dont raise an exception"" feature backported to Rails 3.2.x ? Or has that boat has totally sailed? 

There won't be any deprecation warning in 3.2 of course but at least we'll be able to use the feature by using the configuration option. What do you think?",['Question'],False
844,3744166,@asanghi I think the ship has sailed I'm afraid - we can't add more features to 3.2 now it has been released.,"['Answer', 'Mention']",False
844,4032150,"I'm not sure if this is the right place to ask, but don't forget to document `:restrict` here: http://guides.rubyonrails.org/association_basics.html

Thanks, looking forward to using this feature.",['URL'],False
844,4032359,"@jaredbeck done .. committed to docrails https://github.com/lifo/docrails/commit/f49ec92866f6d8f27617b5723bff99ac0f7ca92f
/cc @vijaydev ",['Mention'],False
844,7564210,I really don't like this global setting. Let's push this down to where it's being defined and go explicit. So have dependent: :restrict_with_exception and :restrict_with_validation or something like that.,['Suggestion'],False
844,10632543,"If I try to delete associated model with nested attributes will it work correctly? I think that parent model won't hold error messages so. I don't see tests for this case, so I see that it won't work as it expected",['Question'],False
856,3707987,"this part already merged with given commit 
https://github.com/rails/rails/commit/e89a7f5ceeadc7b7d654c82b730d6340176e5a99

closing.",['URL'],False
853,1126561,"Are you sure this would work as intended? IIRC, Rails stores (date)times in UTC. My system runs in CEST (UTC+2), the application's time zone is set to 'Berlin' (also CEST/UTC+2) but the values are stored as UTC.

I have:
TimeEntry.create!(:date => '01.05.2011', :starts_at => '09:00', :ends_at => '19:00')

Querying this directly via connection.select_value gives me 2011-05-01 07:00:00. If I use the ActiveRecord object in stead, I'm getting Sun, 01 May 2011 09:00:00 CEST +02:00.

Note that this could also be because my PostgreSQL server is configured this way – it's one of my first PG projects. :-) (Yes, I've seen that your patch is for MySQL – but the way Rails stores datetimes with regard to time zones is the same across databases, right?) But if I'm right, your patch would probably have to be adapted to ensure that the time zone's always UTC. If I'm wrong, don't mind me. :-)",['Question'],False
853,1127086,"Hi, clemens. I am sorry, but I don't get what you are trying to say or why  are you talking about PostgreSQL. This patch is about getting useful values from `UNIX_TIMESTAMP` or other MySQL functions, which rely on the setting of  time zone of the MySQL RDBMS (`CURRENT_TIMESTAMP()`, `CURRENT_TIME()`, `CURRENT_DATE()`, and `FROM_UNIXTIME()`). 

As I wrote in the first post, the setting of the time zone of the MySQL RDBMS is usually `SYSTEM`, which means, that the time zone is set to whatever the system administrator decided, which will usually be the local time zone  of the place, where the system physically resides.

You have correctly pointed out, that the values stored by Rails in `datetime` columns are usually in `UTC`.  What you get if you query (from Rails app.) the `UNIX_TIMESTAMP` of any such value?  (Sidenote: `UNIX_TIMESTAMP` function returns an integer value, so no time-related conversion in Rails takes place.) Now is the answer ""that depens, probably something incorrect, because the `UTC` value was interpreted (in MySQL) as a value in `SYSTEM` time zone, which is ... (_something nobody cares, because you are using some hosting abroad_)"".  My intend is to use this patch to set the time zone of my sessions to `UTC` to always get proper values from functions like `UNIX_TIMESTAMP` applied to `datetime` type of values.  If someone is using `config.active_record.default_timezone = :local`, then he'll probably not set his sessions time zone to `UTC`.","['Code', 'Objection']",False
853,2335034,"I recommend you use a datetime column and the UTC_TIMESTAMP() function instead.

Otherwise, this is such a niche case that I don't think it qualifies for inclusion in main database.yml config. It's something you can set yourself in a config/initializer, though!",['Suggestion'],False
853,3706672,"@jeremy This is primarily a problem for legacy databases. Or for those of us with large datasets ie billions of rows the space saving made by using timestamp can really add up.

At the moment I do the following in config initializer


    require 'active_record/connection_adapters/mysql2_adapter'
    module ActiveRecord
      module ConnectionAdapters
        class Mysql2Adapter
          private
          alias old_configure_connection configure_connection
          def configure_connection
            old_configure_connection
            execute(""SET SESSION time_zone='+0:00'"", :skip_logging)
          end
        end
      end
    end

It would be great if there was a nicer way",['Code'],False
853,3768283,I ran into this today as well.. big pain to track this down.,['Confirmation'],False
853,3768295,"Note: not Rails' fault this provides more detail:

http://bugs.mysql.com/bug.php?id=15654",['URL'],False
858,3711269,This looks great! Gives the exact behavior I was looking for in the issue,['Confirmation'],False
858,3725366,"+1, good for me",['+1 (Plus One)'],False
858,3745537,Please send this pull request to master and not 3-2-stable.  We can decide whether or not to backport after it has been applied to master.,['Request'],False
858,3745795,"@tenderlove, [done](https://github.com/rails/rails/pull/4806). It'd be nice if you leave some comments on the inconsistent behavior I described in the comment to the original issue. Should we do smth about that?",['Mention'],False
857,3710321,Seems fine to me but please don't change the code under vendor,"['Request', 'Confirmation']",False
857,3710425,"Fixed, sorry I missed that",['Apology'],False
857,3711000,"In most of these cases, `for` is easier to read than the `#each` equivalent.

No sense changing them wholesale because a Reddit thread says they're uncommon!","['Suggestion', 'Answer']",False
857,3711318,"I've applied the patch not because of Reddit thread, probably I should've commented my thoughts first :(.
I've applied it because I find the code better to read but if you don't like feel free to revert it","['Answer', 'Fixing']",False
857,3711387,"Thanks for the feedback. Now that I look at it again, I agree that `for` loops are easier to read when dealing with ranges.

Here's a [pull request](https://github.com/rails/rails/pull/4747) to revert to using `for` loops for ranges.","['Accept', 'Gratitude']",False
879,3725116,That isn't a typo. That's the 5 hours time difference between UTC and EST.,['Objection'],False
879,3725959,Oh. Thanks for the clarification. I see that the zone is set to EST up higher in the doc.,['Gratitude'],False
854,3707154,Not sure about this patch. This can hide errors when you actually want to pluck given an order. I think it is actually up to your application to call `unscoped/reorder/only/except` when you want to ignore the previous conditions.,"['Suggestion', 'Answer', 'Bug']",False
854,3707156,"Anyway, thanks for the pull request and the well described issue. I will leave it open to see what others think.",['Gratitude'],False
854,3725922,Can anyone shed some light? Is currently a blocker for us (as described in #4758),"['Question', 'Request']",False
854,3735505,"@josevalim I agree with you in general, but this is breaking the _ids method on some associations where that previously worked on 3.1. So I think we need to deal with that in some way. Probably we should revert the _ids method to not use `pluck`?","['Mention', 'Suggestion']",False
854,3735626,"The problem is in `uniq` that was added to `ids_reader`. In previous version of `ids_read` there was no uniqueness.
See this line in collection_association.rb `relation.uniq.pluck(column)`. See commit 109db5a that introduced that change.
`uniq` gives SELECT DISTINCT and that's why error is thrown.

Let's ask @lest why he added `uniq` in relation.",['Mention'],False
854,3735686,"Yeah, we can either do the uniq in Ruby or change it to not use pluck.
Probably the second.","['Answer', 'Suggestion']",False
854,3736338,"Uniqueness wasn't present in previous versions of ids_reader, that's why we can just remove `uniq` from relation. See #4783","['Answer', 'Suggestion']",False
861,3713965,`for` loops use each underneath and it's not idiomatic.,"['Answer', 'Suggestion']",False
861,3714054,Not keen on this either. IMO for in ruby is basically vestigial limb inherited from earlier block-less languages.,['Suggestion'],False
861,3738365,"imho, in most of these cases upto is better then using each and ranges :)",['Suggestion'],False
861,3738524,Doesn't make much sense for me either. :-1:,['Objection'],False
861,3745311,"I agree with @jurriaan, it seems better that we use `upto` rather than loops and ranges.  Anyway, I don't find `for` to be readable at all.  </2cents>",['Mention'],False
896,3011301,"Not sure when sqlite3-journal files generated. 

Also your PR needs a rebase.",['Suggestion'],False
896,3730889,Closing this for now. Please submit a new PR again.,"['Request', 'Reject']",False
883,3611476,"You might want to just update the code in the original pull request, to keep the conversation together there.

BTW I'm +1 on this idea. .where('1 = 0') is a lame hack.","['+1 (Plus One)', 'Suggestion']",False
883,3617656,"I'm OK with this, but I'd like more opinions.  @jonleighton ?",['Mention'],False
883,3621135,"I'm okay with this too, but I think it would be better if:

* The rationale was explained in the documentation (also explained in terms of the 'null object pattern' as that's what this is)
* There was a CHANGELOG entry
* Ideally I'd prefer if we used polymorphism. I.e. if Relation#none returned an instance of a NullRelation that implemented this behaviour, rather than having to have a `@none_value` var and special code in `exec_queries`.

Thanks.",['Suggestion'],False
883,3637043,"I agree with @jonleighton.  @xuanxu can you make those changes, and we'll merge it in.  Thanks for the contribution! :-)",['Mention'],False
883,3637693,"OK, I will try to make those changes","['Fixing', 'Answer']",False
883,3727293,"@tenderlove Done!: #4768
¿should I backport it to 3.2?",['Question'],False
883,3745091,"@jonleighton can you review?

@xuanxu no, we will not backport this (as it is a new feature).",['Mention'],False
869,3720125,cc/ @jonleighton ,['Mention'],False
869,3746270,This broke the build with identity map turned on.  Can you please fix the tests and resend?  Thanks.,"['Request', 'Question']",False
869,3755456,"Sorry about that, my bad.
I got a fix working, but one test still fails:

test_instantiation_doesnt_try_to_require_corresponding_file(InheritanceComputeTypeTest) [../inheritance_test.rb:267]:
ActiveRecord::RecordNotFound expected but nothing was raised.

I am looking into it.","['Fixing', 'Code']",False
869,3766792,I submitted https://github.com/rails/rails/pull/4833 as a fix for the failing tests in active_record,"['URL', 'Answer', 'Fixing']",False
897,1871355,"Nice fix. It would certainly solve our problems with getting a users IP when the user, proxy and app server are all on the LAN. We've had to fall back to reading X_FORWARDED_FOR directly.","['URL', 'Confirmation']",False
897,2720910,"Very useful, I hope someone merge it soon ^^","['Gratitude', 'Request', 'Confirmation', 'Suggestion']",False
897,3730895,@gsterndale your PR needs a rebase. I think some cod changes is done in the same file.,"['Mention', 'Suggestion']",False
897,3851077,Thanks @arunagw rebased.,"['Mention', 'Gratitude']",False
897,3851142,cc/ @josevalim ,['Mention'],False
897,4243925,Will this be included in 3.2.2 final?,['Question'],False
897,10257684,It would be nice to get this into 3.2.x at some point. I've been monkey-patching this for months. @spastorino can you do anything?,"['Mention', 'Request', 'Suggestion']",False
897,34154738,Looks like this never made it in to 3.2.16 even though it was merged to master 2 years ago?! *confused*,"['Objection', 'Question']",False
897,34164527,"@courtland @donaldpiret : If you look at the merge commit, you can see just under the message the releases that include it. Moreover, 3.2.x don't receive any new fixes anymore (apart from security ones).","['Mention', 'Suggestion']",False
897,34183059,"@robin850 Thanks for clarifying, that makes sense!","['Gratitude', 'Mention']",False
901,3730961,Your PR needs a rebase. Some code changes is done in this file. I think after that we can bring more attention on this from team.,['Suggestion'],False
901,3798820,"Rebased master onto my branch and squashed the commits.

Personally, I ended up throwing in the towel on using Perforce directly and now use it via git-p4. I still think there should be options to skip/configure the git specific stuff though.","['Fixing', 'Digression', 'Suggestion']",False
901,5476451,"The tests encounter a parse error at 
rails/railties/lib/rails/generators/rails/app/app_generator.rb:302

ruby-1.9.3-p194","['URL', 'Bug']",False
901,5479882,"Apparently the same tests are being added to both app_generator and plugin_new_generator, confirm? If so, you can probably move them to [SharedGeneratorTests](https://github.com/rails/rails/blob/master/railties/test/generators/shared_generator_tests.rb), that is included in both.","['URL', 'Request']",False
901,5495894,I'll take care of that tonight and try to do a rebase on master as well.,['Fixing'],False
901,5500892,"I spoke too soon. I'm having trouble successfully installing the gem dependencies as described in the [edgeguide](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#set-up-and-run-the-tests). I get compatibility errors from bundler. Until i can figure out what to do about those, I can't run any tests.","['URL', 'Bug']",False
901,5961827,what's happening with this PR guys ??,['Question'],False
901,6134656,"I've just had baby, so I haven't had any time to make the suggested changes
and rebase.

On Mon, May 28, 2012 at 5:26 AM, Arun Agrawal <
reply@reply.github.com
> wrote:

> what's happening with this PR guys ??
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/2808#issuecomment-5961827
>","['Apology', 'Answer']",False
901,8494071,Closed in favor of #7614,"['Reject', 'Accept']",False
907,3007701,"Thanks for reporting the bug. I think perhaps we should be using `base_class` here. E.g. something like:

``` ruby
def sequence_name
  if base_class == self
    @seqence_name ||= reset_sequence_name
  else
    (@sequence_name ||= nil) || base_class.sequence_name
  end
end
```

Could you look into that please?
    ",['Code'],False
907,3007796,"Yes, it works, I also updated my pull request.","['Accept', 'Confirmation', 'Answer']",False
907,3731311,"This seems to break code where an inheritance tree defines both a table_name_prefix and defines a sequence pattern for all models inheriting from this tree.

Given:

```ruby
class A < B
end

class B < ActiveRecord::Base
  self.abstract_class = true
  self.table_name_prefix = 'core.'
  self.sequence_name = :autogenerated
end
```

The queries will work correctly, but because of the behavior of base_class, when the connection asks for the sequence_name, base_class returns A and not B.  A then resets the sequence_name and it is no longer pulled from the super, instead, you get a sequence name 'core.a_seq'

Seems we are missing a test case where the sequence_name is set in the base class and is retained in the subclass.

Are there any suggestions for work arounds? ",['Code'],False
903,2104229,There is a problem with this approach: calling `count` on an ActiveRecord::Relation mitigates any limit(n) that was previously set,['Objection'],False
903,2104283,"Inspect is meant to be used in tests and console only, not in a codebase.
Therefore I don't see any moment when we wouldn't want to have this set to true.
Moreover, if we're comparing a lot of objects in a test, the result will be biased.

-1",['Objection'],False
903,2113054,"The problem only exists when in production one has a exception notifier that sends an email containing the backtrace + an inspection of the env variables back at the developers. I believe that filling the production machine's memory with a huge inspection string is not one of the admin's favorite things.

My solution might be a bit ugly but in development it served me and a couple of my colleagues well when a broken Arel query inspection started filling in more than 2GB of ram.","['Suggestion', 'Answer']",False
903,3730914,What's happening to this PR guys! Are we still on this?? Or this can be closed??,['Question'],False
903,4450718,"Closing this for now. Please reopen this with more details. 


Cheers, 
Arun","['Reject', 'Request']",False
916,3735248,"Cheery-picked to `3-2-stable`. If you would like, please submit a backport for `3-1-stable`.",['Request'],False
906,3731635,"Humm, the generated url was not shown, I'll paste the code in the gist: https://gist.github.com/1707977",['URL'],False
906,3734442,"This change is backwards incompatible for people relying on the old behavior. That said, could you please add an entry to the CHANGELOG saying that this helper will now use the favicon in app/assets by default?","['Request', 'Mention']",False
906,3737595,"and tests, the existing ones passes? do we need new ones?","['Question', 'Accept']",False
906,3739490,Done :-),"['Fixing', 'Answer']",False
906,3741064,Squash the commits into one please and push -f,"['Suggestion', 'Request']",False
906,3743736,"PR contains *.swp files, remove them please",['Request'],False
906,3743846,"Ok, I saw the .swp files.. sorry, I'll remove them.",['Apology'],False
906,3744001,"I already squashed the commits into one and make a new pull request: https://github.com/rails/rails/pull/4803

I'll close this one, ok?!","['Accept', 'URL']",False
917,3736427,Thanks for the fix! This would close #4758,['Gratitude'],False
923,3764165,Done in another PR. Closing.,['Reject'],False
921,3608397,"Nice, I like the method not hitting the database, but don't like it using the where method, I've implemented it using a none_value attribute here: https://github.com/rails/rails/pull/4609

 ",['URL'],False
921,3762016,https://github.com/rails/rails/pull/4805 is merged. Closing.,"['Accept', 'URL']",False
919,5495860,"All of the tests pass.

cc @tenderlove ","['Mention', 'Confirmation']",False
919,5505610,"Any thoughts about the names by the way?  'Filter' sounds too general, can be reserved for more complex operations.  Maybe `#deep_slice` and `#deep_except`?","['Question', 'Suggestion']",False
919,5730207,"Hey guys. We think that this kind of things should go to plugins. Active Support is for things that we use in the Rails code and common patterns.

Thank you for the pull request.","['Gratitude', 'Suggestion']",False
927,3769181,"*bump*

Would it make this any more compelling if I pointed out that this isn't just an optimization to reduce the number of objects created.   By running, eg, 

```ruby
client = company.clients.find_or_initialize_by_foo('bar')
client.save
company.save
```

you end up persisting two Client objects to the database - one in the return value from `find_or_initialize`, and one that's autosaved along with the `company.save`.",['Code'],False
927,3769304,"merged, thanks",['Accept'],False
924,3764366,"Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.",['Request'],False
924,3946677,"Hi Aaron,
I've submitted the pull request against master and tested everything
out. It awaits your leisure:

https://github.com/rails/rails/pull/4834

Cheers,
sk

On Wed, Feb 1, 2012 at 1:38 PM, Aaron Patterson
<reply@reply.github.com>
wrote:
> Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/4810#issuecomment-3764366",['Request'],False
924,4139215,"Hi Aaron,
Was looking at https://github.com/rails/rails/compare/v3.2.1...v3.2.2.rc1
and I noticed that the change to pslq didn't get backported. Do you
think that this will make 3.2.2?

Cheers,
sk

On Mon, Feb 13, 2012 at 1:55 PM, Sean Kirby <sskirby@gmail.com> wrote:
> Hi Aaron,
> I've submitted the pull request against master and tested everything
> out. It awaits your leisure:
>
> https://github.com/rails/rails/pull/4834
>
> Cheers,
> sk
>
> On Wed, Feb 1, 2012 at 1:38 PM, Aaron Patterson
> <reply@reply.github.com>
> wrote:
>> Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.
>>
>> ---
>> Reply to this email directly or view it on GitHub:
>> https://github.com/rails/rails/pull/4810#issuecomment-3764366",['Question'],False
924,4142581,"@sskirby thanks for reviewing the commits!  Yes, I meant to backport this before the release but totally forgot.  This will be in 3.2.2 final.",['Mention'],False
926,3767456,"We should honestly get rid of identity map. It was a great effort but the current limitations make it unusable in most apps. Alternatively, we can fix it and make it default.",['Suggestion'],False
926,3768577,"@josevalim agree.  [1, 2, 3, not it](http://www.urbandictionary.com/define.php?term=123%20not%20it).","['Mention', 'URL']",False
926,3774024,@josevalim what would be needed to make it usuable?,"['Mention', 'Question']",False
926,4707480,"I guess that should be closed now that IM was removed from master, thoughts?","['Question', 'Reject']",False
926,5530217,@carlosantoniodasilva agreed.,['Mention'],False
918,3737047,Can we add a test for at least 1 of those keywords?,"['Request', 'Question']",False
918,3737987,Is not enough to just prepend self always instead of checking against RUBY_KEYWORDS ?,['Question'],False
918,3738006,"Yeah, probably :P","['Confirmation', 'Answer']",False
918,3738444,@ayamomiji please do it and squash your commits :),"['Mention', 'Request']",False
918,3753661,"But i cannot just prepend `self.` always, this causes the DirtyTest to raise errors like these:

```
test_setting_attribute_will_result_in_change(DirtyTest):
NoMethodError: private method `attribute_changed?' called for #<DirtyTest::DirtyModel:0x007faa6b038b40>
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:373:in `method_missing'
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:314:in `name_changed?'
...

NoMethodError: private method `attribute_will_change!' called for #<DirtyTest::DirtyModel:0x007faa6b057568 @name=nil, @color=nil>
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:373:in `method_missing'
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:314:in `color_will_change!'
...
```","['Code', 'Bug']",False
918,3753752,"i'll use `send` instead of prepending `self.` for prevent make aliases on private attributes.
i'm not sure should attributes always be public?",['Question'],False
918,4450456,What's happening here? :) ,"['Digression', 'Question']",False
918,5523658,Is this still an issue?,['Question'],False
918,5532907,"/cc @josevalim I don't see another way of doing this but I don't like it neither :/. Or we leave the Ruby keywords list or we remove the CALL_COMPILABLE_REGEXP optimization and always do send(:'#{send}', #{extra})","['Mention', 'Suggestion']",False
918,5544342,+1 for always do `send`.,['+1 (Plus One)'],False
918,5550786,":-1: I think this is just hacky. :( If they are reserved, we shouldn't be messing with it. We should do make behavior as predictable as possible. In other languages, users have to respect the reserved words. I think we should too. Just my $0.02",['Objection'],False
918,5556157,"@isaacsanders disagree, you can define a method called begin for your classes in pure Ruby. So why stopping people for doing that on AM attributes?","['Mention', 'Question']",False
918,5556311,I don't know. It is just my opinion. I feel bad that I can't vocalize why I feel the way I do.,"['Digression', 'Objection']",False
918,5559397,"@isaacsanders no worries :), I was giving my opinion too :heart: :heart: :heart:",['Mention'],False
918,5672714,@spastorino @josevalim are we good to go here? :),['Mention'],False
918,5672827,"@carlosantoniodasilva read my comment where I've /cced to @josevalim, let's wait for him","['Mention', 'Request']",False
918,5674748,"We should just use `self.` The reason `self.` is making dirty tests fail is because your changes are affecting a place it should not to. There are two methods in the attributes module that calls `define_optimized_call`, one is alias attribute and there is a second one. You are mistakenly affecting the second one. Here is a patch for example that makes your tests pass:

https://gist.github.com/2686886

Can you please update accordingly?",['Suggestion'],False
918,5921779,@josevalim are we good to go now? :),"['Mention', 'Question']",False
934,3778224,/cc @josevalim ,['Mention'],False
934,3778481,"@jeremy it looks good to me, let's merge?",['Mention'],False
934,3780153,"Nice job, especially with updated docs and guide.

There are a lot of other refactorings and style changes included, too, making it hard to review the code carefully.

:+1: here but please do separate pulls for refactoring and style changes next time!","['+1 (Plus One)', 'Gratitude']",False
934,3780285,"@jeremy thanks, we will be paying more attention to that from now on.",['Mention'],False
933,3740561,"Pretty please. Some of us still use Rails 2.3.x, and latest 2.3.x with latest rubygems results in ~40 lines of deprecation warnings from rubygems on startup. 

See: https://github.com/rubygems/rubygems/issues/145   

The rubygems team does not seem to consider it a problem. ",['URL'],False
933,3778169,"@jrochkind can you test this patch on your app, as I said in the note above I wasn't able to find instructions on how to setup a 2-3-stable development env so some feedback would be useful",['Mention'],False
933,3778246,"(about to be on vacation for two weeks, will try to do after I return.  
If I can figure out how to apply a patch to rails in a 2-3 app myself,  
I don't know either.)

On Feb 2, 2012, at 8:53 AM, Elia Schito wrote:

> @jrochkind can you test this patch on your app, as I said in the  
> note above I wasn't able to find instructions on how to setup a 2-3- 
> stable development env so some feedback would be useful
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/4422#issuecomment-3778169","['Mention', 'Answer']",False
933,3778305,"It's probably enough to put:

```ruby
require 'rails/gem_dependency'

module Rails::GemDependency
  def self.add_frozen_gem_path
    @@paths_loaded ||= begin
      original_source_index = Gem::Specification.respond_to?(:dirs) ? Gem::SourceIndex.new(Gem::Specification.dirs) : Gem.source_index
      source_index = Rails::VendorGemSourceIndex.new(original_source_index)
      Gem.clear_paths
      Gem.source_index = source_index
      # loaded before us - we can't change them, so mark them
      Gem.loaded_specs.each do |name, spec|
        @@framework_gems[name] = spec
      end
      true
    end
  end
end
```

right before `Rails.boot!` in your application `config/boot.rb`.
",['Code'],False
933,4403969,"@elia The snippet in your last comment doesn't quite work. I got this error when I tried it:

    GemDependency is not a module (TypeError)

Changing module to class results in the error going away and the original warning being silenced. Have not tried this in production yet.",['Mention'],False
933,4424373,"@jwarchol that was a paste from a hack directly in rubygems :blush:

I tried and for me doesn't work *before* `Rails.boot!` but only **after**:

```ruby
# config/boot.rb stuff here...
# possibly bundler stuff here...

# All that for this:
Rails.boot!

require 'rails/gem_dependency'

class Rails::GemDependency
  def self.add_frozen_gem_path
    @@paths_loaded ||= begin
      original_source_index = Gem::Specification.respond_to?(:dirs) ? Gem::SourceIndex.new(Gem::Specification.dirs) : Gem.source_index
      source_index = Rails::VendorGemSourceIndex.new(original_source_index)
      Gem.clear_paths
      Gem.source_index = source_index
      # loaded before us - we can't change them, so mark them
      Gem.loaded_specs.each do |name, spec|
        @@framework_gems[name] = spec
      end
      true
    end
  end
end

```
","['Code', 'Mention']",False
933,4495483,"I'm working on removing all deprecations for all gem version in [elia#fix-railties-tests-for-latest-rubygems](https://github.com/elia/rails/tree/fix-railties-tests-for-latest-rubygems)

Right now I think I'm done from rubygems 1.3 up to 1.7, I also added some info on setting up dev environment in the README

Any feedback/help is really appreciated :bowtie:","['URL', 'Fixing']",False
933,5544380,"@jeremy @jonleighton @tenderlove hey guys, this pull request is pointing 2-3-stable branch. Could you take a look on it and see if we will accept or close it?

Thanks.",['Mention'],False
933,5561514,"I'm not seeing a final resolution or verified fix here. @elia could you open a pull request for your changes, instead?","['Mention', 'Objection']",False
933,5570277,"@jeremy, @rafaelfranca: see pull #6202, closing this one.",['Mention'],False
929,3774199,"Thanks :).

In principle I am hesitant to add that check, because it may hide that some code is not passing the bindings in its instrumentation call. Binds are a collection and so when no binds are used there's a collection, empty, but not `nil`.

There was a recent issue related to CACHE queries that I fixed in de161003c36a0cd967aa393e7706b12055770174 and will ship in 3.2.2. Have you seen any other use case?
","['Question', 'Gratitude']",False
929,3775395,"The cases where I was seeing this error appear were all using `find` with an `:include`, for example:

```ruby
User.find(
  current_user.id,
  :include => [
    :credit_card,
    :user_image,
    :sent_offers => {
      :sender => :user_image,
      :receiver => :user_image,
      :listing => [:listing_image, :listing_images]
    },
    :received_offers => {
      :sender => :user_image,
      :receiver => :user_image,
      :listing => [:listing_image, :listing_images]
    }
  ]
)
```","['Bug', 'Code']",False
929,3786584,"I cannot reproduce this failure on 3-2-stable with user has many posts. See the session:


    fxn@rails:~/tmp/test-4844 $ grep threshold config/environments/development.rb 
      config.active_record.auto_explain_threshold_in_seconds = 0
    fxn@rails:~/tmp/test-4844 $ script/rails c
    Loading development environment (Rails 3.2.1)
    1.9.3-p0 :001 > User.find(1, :include => :posts)
      User Load (3.3ms)  SELECT ""users"".* FROM ""users"" WHERE ""users"".""id"" = ? LIMIT 1  [[""id"", 1]]
      Post Load (0.5ms)  SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""user_id"" IN (1)
      EXPLAIN (0.6ms)  EXPLAIN QUERY PLAN SELECT ""users"".* FROM ""users"" WHERE ""users"".""id"" = ? LIMIT 1  [[""id"", 1]]
      EXPLAIN (0.1ms)  EXPLAIN QUERY PLAN SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""user_id"" IN (1)
    EXPLAIN for: SELECT  ""users"".* FROM ""users""  WHERE ""users"".""id"" = ? LIMIT 1 [[""id"", 1]]
    0|0|0|SEARCH TABLE users USING INTEGER PRIMARY KEY (rowid=?) (~1 rows)

    EXPLAIN for: SELECT ""posts"".* FROM ""posts""  WHERE ""posts"".""user_id"" IN (1)
    0|0|0|SCAN TABLE posts (~100000 rows)
    0|0|0|EXECUTE LIST SUBQUERY 1

     => #<User id: 1, created_at: ""2012-01-31 07:59:45"", updated_at: ""2012-01-31 07:59:45""> 

Could you post a way to reproduce the error?","['Code', 'Bug']",False
929,3907927,I was just getting this issue on 3.2.1. I changed to 3-2-stable and it's fixed it. Good work.,"['Gratitude', 'Confirmation', 'Fixing']",False
929,3908004,"@ihid excellent, thanks very much for the feedback.

The CACHE notification have binds now (and anyway we are no longer monitoring CACHE notifications). So I think we can close this issue.

@sferik if you find this error again please feel free to reopen.",['Mention'],False
929,3908885,Sounds good. Thanks for following up.,['Gratitude'],False
938,3810303,"Now, I realize that we updated rack-test to 0.6.1 on master, 3-2-stable, and 3-1stable.
Sorry, we miss this PR...

I'm closing this issue.
Thanks !",['Apology'],False
936,3798519,"Also spotted this, but the user argument is still missing.
`set_psql_env` should be handling this, but the rake tasks fail unless I provide an explicit user argument:

    `psql -U #{abcs[env]['username']} -f ""#{filename}"" #{abcs[env]['database']}`",['Bug'],False
936,3806968,"That's very strange, Chris, because my change only removes passing in the template as the last argument. If what you are saying is correct, db:test:prepare should not be working at all in master. Which means no one using PostgreSQL is able to run tests via the standard rake task.

Now that I think of it, however, I did only test the change as it applies to the 3-2-stable branch and not master. I will re-test against master. If something is wrong, I suspect that it's not because of the changes in this patch.",['Fixing'],False
936,3809545,"Well, by default psql uses the current OS user name if one isn't provided on the command line. Are you also running the rake tasks as a user that does not have direct access to the db? If so I'll have to check what's wrong with my environment.",['Question'],False
936,3831567,Just tested my patch against the latest master branch and (after applying https://github.com/rails/rails/pull/4910) everything seems to work just fine. I do not have a pg user that matches my username.,['URL'],False
936,3854345,"Just wondering if the suspicion that a username needs to be explicitly passed in to psql is what's keeping this pull request from being accepted.

If that's the case, the username issue is really a completely different issue and has nothing to do with the changes in this pull request. It should not be blocking this pull request, it should be in it's own ticket.",['Suggestion'],False
936,3857897,"@sskirby agreed. I've tested your patch in another environment and everything's working fine.
+1 for the pull request",['+1 (Plus One)'],False
931,1070412,SQLite 3 tests pass.,['Confirmation'],False
931,1095354,I'd like to avoid changing method signatures until Rails 4.0.  This change will break backwards compatibility with 3rd party adapters.,"['Suggestion', 'Objection']",False
931,1115044,@tenderlove should we leave this open then? or can we close?,"['Mention', 'Question']",False
931,1119560,Set up a milestone and add it?,['Question'],False
931,1119568,"Yes, we should set up a rails 4 milestone and add this.","['Suggestion', 'Confirmation']",False
931,1638469,How about changing its name to something like deprecated for rails 3-1 so people know it's going to go away? That would also minimize the confusion that @smartinez87 cites.,"['Question', 'Suggestion', 'Mention']",False
931,2334958,Milestoned @ Rails 4.0,"['Mention', 'Confirmation']",False
931,3374154,master is rails 4 now right? should this be merged?,['Question'],False
931,3376489,Yeah! Master is Rails 4.0 :heart:,"['Answer', 'Confirmation', 'Gratitude']",False
931,3776180,@smartinez87 I think it'd be good to rebase so it can be merged now :),"['Suggestion', 'Mention']",False
931,3777191,"had trouble rebasing master again, so opened a new PR #4850","['Objection', 'Bug', 'Fixing']",False
931,3782045,"closing this, since #4850 was merged",['Reject'],False
942,3800707,"I don't think we should even call the responder. We should just yield the block, as in respond_to.",['Suggestion'],False
942,3801285,"Ah yeah, you're right. Fixing that now.",['Fixing'],False
942,3801329,`retrieve_response_from_mimes` could probably return the collector and then we ask it directly if there is a response (and invoke) or fallback to the default one (with the responder).,['Suggestion'],False
942,3804100,Code has been updated.,['Answer'],False
942,3810688,"Yay, don't forget #4870 for 3-2-stable as well.",['Request'],False
935,3797518,NIce but the option name is not clear for me. Maybe skip_after_callbacks_if_halted or something like that instead?,['Suggestion'],False
935,3797566,`halted` is something internal. `:terminator` is part of the API. What about `skip_after_callbacks_if_terminated` ?,"['Suggestion', 'Question']",False
935,3797592,Sounds great.,['Confirmation'],False
935,3809525,Renamed.,['Confirmation'],False
935,3809563,"Awesome, thanks!",['Gratitude'],False
945,3825958,"Agreed it is better but if we are going to use present?, we need to require
the proper from AS.","['Confirmation', 'Answer']",False
945,3825970,Its already loaded. Have tested the test cases which is running fine.,['Answer'],False
945,3825987,Are you running the test case in isolation mode?,['Question'],False
945,3826021,Am running all the active model test cases.,['Answer'],False
945,3826050,"You need to run them in isolation in order to catch missing requires. In any case, we should just add the missing require.",['Suggestion'],False
945,3826066,will do if it is missed,['Confirmation'],False
945,3826529,"I made another pull request for this issue,   please refer #4904",['Request'],False
950,2079945,"Could you rebase your commits into one please ?
There's also a test missing :(",['Request'],False
950,3817666,"I think that this issue was fixed on 3-1-stable, 3-2-stable, and master.
I think that I should close this issue. What do you think ?

BTW, I cannot find a testcase for non english filename, and I'll send PR for it.",['Question'],False
950,3829851,"Hi ! @tanin47 
I'm closing this issue, because it seems that this issue is fixed already on 3-1-stable, 3-2-stable, master.
Please comment to this issue, if needed :-)","['Mention', 'Confirmation']",False
950,3849731,Alright :),['Answer'],False
948,3824513,/cc @jonleighton ,['Mention'],False
948,3828319,"Thanks for the patch, but this is not the right way to fix it. We need to fix the attribute accessor within AR to actually return the correct value.","['Fixing', 'Gratitude']",False
948,3829370,"Attribute accessor is working. All test are passing (with and without patch also).

You can try this example with and without my patch

``` ruby
require ""rubygems""
require ""action_view""
require ""active_record""
require ""logger""

ActiveRecord::Base.logger = Logger.new(STDOUT)
ActiveRecord::Base.establish_connection(
  :adapter => 'sqlite3', 
  :database => ':memory:')

ActiveRecord::Schema.define do
  create_table :items, :force=>true do |t|
    t.string :name
  end
end

class MySerializer
  def load(str)
    str.swapcase
  end

  def dump(str)
    str.swapcase
  end
end

class Item < ActiveRecord::Base
  serialize :name, MySerializer.new
end

@item = Item.new
@item.name = ""lowerUPPER""

puts @item.name
puts @item.attributes[""name""]

@item.save!

@saved_item = Item.last

puts @saved_item.name
puts @saved_item.attributes[""name""]

include ActionView::Helpers::FormHelper
puts text_field(:item,:name)
puts text_field(:saved_item,:name)

```

With patch

``` ruby

""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
<input id=""item_name"" name=""item[name]"" size=""30"" type=""text"" value=""LOWERupper"" />
<input id=""saved_item_name"" name=""saved_item[name]"" size=""30"" type=""text"" value=""LOWERupper"" />
```

Without patch

``` ruby
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
<input id=""item_name"" name=""item[name]"" size=""30"" type=""text"" value=""#&lt;struct ActiveRecord::AttributeMethods::Serialization::Attribute coder=#&lt;MySerializer:0x0000000187dad8&gt;, value=&quot;lowerUPPER&quot;, state=:unserialized&gt;"" />
<input id=""saved_item_name"" name=""saved_item[name]"" size=""30"" type=""text"" value=""#&lt;struct ActiveRecord::AttributeMethods::Serialization::Attribute coder=#&lt;MySerializer:0x0000000187dad8&gt;, value=&quot;lowerUPPER&quot;, state=:unserialized&gt;"" />
```

Maybe I'm not getting it. Can you tell me where I'm wrong thinking about this problem @jonleighton? Attribute reader is returning unserialized value. But in form helpers serialized values are used. That's how this was working in Rails 3.1.3.",['Code'],False
948,3829442,"It's the `_before_type_cast` accessor that is broken, i.e. `@saved_item.name_before_type_cast`","['Bug', 'Answer', 'Code']",False
948,3829518,So ```@saved_item.name_before_type_cast``` should be ```LOWERupper``` in my example @jonleighton ?,['Mention'],False
948,3836776,We noticed this bug on v3.2.1. It's definitely a regression from 3.1.1.,"['Bug', 'Confirmation']",False
948,3842266,@listrophy no. 3.1.3 is working still.,['Mention'],False
947,3827936,Commits Squashed to one.,['Answer'],False
947,4795780,@josevalim could you please review / merge?,['Mention'],False
946,2309566,+1 .. drove me nuts for an hour!!,['+1 (Plus One)'],False
946,2309746,.. and is a serious bug which leads to not beeing able to delete any objects when using auth headers,['Bug'],False
946,3827727,hey guys ... where is the problem to merge this ???,['Question'],False
946,4098792,This should have some test included but I can verify the code in this pull requests works... but then again a similar bug (with #build) which also has a test accompanying it has yet to be merged...,['Bug'],False
946,4825229,ActiveResource has moved to you own repository. I'm closing this. Please open a new pull request in the [ActiveResource](https://github.com/rails/activeresource) repository if you want.,['URL'],False
955,3831091,Does this fix #2575?,['Question'],False
955,3831245,It seems that this problem is same one ;-),['Confirmation'],False
955,3831376,@ihid Do you think about this PR ? Will we have any problem ? (or should close #2575 too ?),['Mention'],False
955,3831995,"I've got no issue with this PR at all. It's good. Thanks! :)
I'll check later to check it fixes my issue. I'll either mark the issue as closed or send a further PR that fixes that as well.  ","['Gratitude', 'Accept']",False
955,3905611,Great update guys - wonderful to see this fixed :-) Is it too much to ask to have it posted here when it is inserted into core?,"['Gratitude', 'Question']",False
955,3906603,"Oh, by the way, with core, I mean stable release","['Confirmation', 'Answer', 'Suggestion']",False
955,3910687,"I closed the other ticket and then realised I still had a monkeypatch there that was causing it to work regardless of your patch. I've just spent half an hour trying to get master branch working on my codebase and I'm giving up. I get so many dependancies failing in my Gemfile.

I'm pretty certain that what you've got there will fix it, so I'm just going to leave the other ticket closed and I'll keep an eye on it. Thanks, @kennyj.","['Mention', 'Confirmation', 'Fixing']",False
955,3910707,"@kennyj, sorry - could you put a PR for 3-2-stable too please so I can get rid of my monkey-patch? :)",['Mention'],False
955,4296191,Sorry to jump on the end of this ticket but.. any idea why this would cause resolve/refinerycms#1383 ? ,['Question'],False
958,3833589,"Seems good, but I'm a little annoyed because this value is OS (and possibly filesystem) specific.  I'm annoyed that Ruby doesn't provide an API to `pathconf` so that we can determine the correct length.  Without that value, we're just going to keep chasing numbers until this value is set to the lowest common denominator. :(",['Objection'],False
958,3838420,I agree; it does feel crufty. Am open to a better solution if available...,"['Accept', 'Confirmation']",False
958,4074602,"Just checked on Linux

```
2.6.38-13-generic #54-Ubuntu SMP Tue Jan 3 13:38:12 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux
Natty
```

in my case
On Encrypted FS(Cryptfs):

```
test will fail on filename size >= 144
And will pass on FILENAME_MAX_SIZE = 143
```

Ubuntu community says that is known filesize bug (on cryptfs) and filesize on current dir underlying fs cannot be determined by syscalls from ruby.
This is related to @tenderlove conversation with Motohiro KOSAKI & Yui NARUSE
on https://bugs.ruby-lang.org/issues/5974

On Ext4 unencrypted:

```
test will pass on 230 as expected
```


On FreeBSD UFS unencrypted tests passed on FILENAME_MAX_SIZE = 230 

What about cryptfs on Linux - current FILENAME_MAX_SIZE value will make cache files with long names(usually escaped utf strings) unusable before it hooked and truncated by rails.cache api calls

* Maybe it will be useful to make a hash of limits + fs byte overheads for each FS. But IMO this will be very ugly :)
* Or get a lowest limit on filename size - 143 for ecryptfs and use it for FILENAME_MAX_SIZE - this is ugly too IMO :(

In my particular case - i only can use a constant override to decrease FILENAME_MAX_SIZE to use a cache on dev and prod machines with cryptfs :( Sad




",['Code'],False
958,15665329,"Just ran into this issue on 3.2.11 and ended up overriding the constant to 223. I probably won't submit a pull request to change it in master because 228 should be good enough for most cases, and because we should find a more robust solution as @tenderlove suggests. Maybe catching the ENAMETOOLONG and retrying with a shorter max length, but that may break existing keys.

That said, I'll at least document why I went with 223 instead of 228:
Tempfile adds `""#{t}-#{$$}-#{rand(0x100000000).to_s(36)}-#{n}.lock""` to the end of the filename.
`t` is the date; always 8 chars.
`$$` is the pid; on linux this defaults to a max of 32768, but can be configured to a max of 4.2million or 7 chars.
`rand.to_s` base 36 encode of a 32bit number; max of 7 chars
`n` is the retry count; should never happen, but lets say it could get up to 2 digits before the universe explodes.
That adds up to 32 characters, and 255 - 32 = 223. 

So, 228 should work fine in most real world cases where the max pid is 5 digits long and there are no retries and the max filename length is 255.",['Bug'],False
959,3292205,"Any of the Rails team had a chance to look at this. I added in some tests. Thoughts, comments?  Feedback welcome. ",['Question'],False
959,3292314," i dig it. only thought is are you intentionally not saying ""bundle exec rake db:migrate""?",['Question'],False
959,3292856,"Great suggestion, i'll add it in!","['Gratitude', 'Accept', 'Confirmation']",False
959,3293603,I dig it.  +1,['+1 (Plus One)'],False
959,3294425,+1 makes sense.,['+1 (Plus One)'],False
959,3303225,This will be quite helpful. :+1:,['+1 (Plus One)'],False
959,3325395,+1,['+1 (Plus One)'],False
959,3589175,cool +1,['+1 (Plus One)'],False
959,3815698,+1,['+1 (Plus One)'],False
959,3832106,"@josevalim hate to bug on this one, but can you merge this in or give me some comments? The sooner no one asks me why they're getting a NoMethodError when they haven't migrated the database, the better. If there is someone else that needs to join the conversation let me know, and we can get them in here.","['Mention', 'Request']",False
959,3832192,/cc @tenderlove ,['Mention'],False
959,3833551,"I'm uneasy about this change.  Having the exception handling code checking the migrator does not sound awesome (especially if this is happening in production).  I'm -1 on this change, but I'm willing to hear other opinions. /cc @jonleighton ","['Objection', 'Mention']",False
959,3834163,"I am also a +1 for this, but I understand @tenderlove's concern. How about adding a `!Rails.env.production? &&` clause to each of those 'if' statements checking `if ActiveRecord::Migrator.needs_migration?`. That might address everyone's concerns.","['Suggestion', 'Mention']",False
959,3836554,"@tenderlove & @jonleighton I'm very open to implementation suggestions. Not performing this check in production on _every_ error makes sense. We could add a environment check per @scottwb's suggestion, or make it a config option. Perhaps coming up with a standard way to add debugging suggestions to development error messages could make this pattern more sustainable, but i'm not exactly sure what that would look like. Let me know what you think.","['Suggestion', 'Mention']",False
959,3840553,"This would save me some pain.
+1 and agree we want to be able to enable this for dev only.",['+1 (Plus One)'],False
959,3842993,Making this a `config` option is a good idea. This way I can enable it not only in development environment but also in my other custom environments that resemble development.,"['Confirmation', 'Accept']",False
959,3844555,"I think the idea is good but we shouldn't solve it by changing Active Record. For a start, picking up on specific errors is always going to leave other errors uncaught that were also caused by missing migrations.

I think we should make the feature configurable, and have it work like so by default:

* Development: raise an error on page load if there are pending migrations
* Test: display a warning when test is run if there are pending migrations
* Production: no change",['Suggestion'],False
959,3851336,"@jonleighton I think that addresses everyones concerns and accomplishes everything I want. I can go ahead and rip out the ActiveRecord bits from this pull request and just leave in the migration checking code. 

Would you prefer a separate  pull request for warning/error messages or just amending this one? I'm thinking by default we can have it off, and to turn it on you can do something like this to development/test.rb

```ruby
config.migration_pending = :error
config.migration_pending = :warn
```
","['Question', 'Mention']",False
959,3851478,"As just discussed with @waseem, one could apply a similar approach to the [following based on EpicFail](https://github.com/bsodmike/EpicFail/blob/master/lib/epic_fail/exceptions/rack.rb):

```ruby
module EpicFail
  module Exceptions
    class Rack
      #...
      
      def notify_exception(e, env)
        # Exception: backtrace  exception  message
        EpicFail::Failure.create!(:exception => ""#{e.class}"", :message => ""#{e.message}"", :backtrace => ""#{e.backtrace}"")
      end
    end
  end
end
```

and perform

```ruby
ActiveRecord::Migrator.current_version != (ActiveRecord::Migrator.migrations(migrations_paths).last.try(:version)||0)
```

to detect a pending migration.  `e.message` can be updated accordingly and presented in the rendered error.  All of the above as per @jonleighton still apply.  Thoughts?",['Code'],False
959,3897192,"

Setting up the configuration is straight forward: 

active_record/lib/active_record/base.rb

```ruby

##
# :singleton-method:
# Specify how to notify the user when pending migrations are detected
# use :warn, :error, or :none
cattr_accessor :on_pending_migration , :instance_writer => false
@@on_pending_migration = :none

```


Then actually raising/warning the message is straightforward

```ruby

# Notifies the developer if there are pending migrations
# the type of notification can be configured. Example:
#
#   config.active_record.on_pending_migration = :error
def notify_pending_migrations
  case ActiveRecord::Base.on_pending_migration
  when :error
    raise ActiveRecordError::PendingMigration, ""There are pending migrations run 'bundle exec rake db:migrate' to resolve them"" if ActiveRecord::Migrator.needs_migration?
  when :warn
    warn ""There are pending migrations run 'bundle exec rake db:migrate' to resolve them"" if ActiveRecord::Migrator.needs_migration?
  end
end

```


The thing I'm unsure of is where to call `notify_pending_migrations`. Since migrations are an ActiveRecord specific concept, I would like to keep the code within AR (not rely on a controller/view/etc. to relay the message). It also needs to work in the console and when running on a server. If we don't check _every_ round trip to the server we can't be sure that new migrations haven't been introduced. So we could hook into something like  `ActiveRecord::Base.table_name` that gets called on each round trip to the DB, though that would be a lot of redundant checks. Perhaps there is a better place to do the check?",['Code'],False
959,5519053,Any thoughts on this @tenderlove / @jonleighton?,['Mention'],False
959,5761141,"I like the idea a lot but I don't like to have to wait for the server to start and browse the app to get the error, It'd be better to throw the error when the server is starting, something like this:

    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate'

Which is what kinda happens with Bundler:

    $ rails server
    Could not find gem 'meh' in the gems available on this machine.
    Try running `bundle install`.

I could work on that patch. What do you guys think?","['Suggestion', 'Bug']",False
959,5761213,"I think we can at least get in the `needs_migration?` helper. Then people can proceed to check on initialization, add a middleware in development and so forth.","['Suggestion', 'Request']",False
959,5770170,"I'd still like this when the server is starting, but in a second thought, what if the user rolls back? the schema wouldn't be up to date and the server wouldn't start, that might not be ok, so we could add an option to the configuration (and configure in config/development.rb), something like this:
    
    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate' or use config.whatever_the_name_config_option_is = false

There's another thing, `needs_migration?` would be better to me if it were `pending_migrations?`","['Suggestion', 'Bug']",False
959,5771108,"`pending_migrations?` is fine. I don't we should check it on startup by default. You gave one possible example for it failing, but there are other occasions as well (like progressive updates in production).",['Accept'],False
959,5771575,"@josevalim I think this is a helpful thing in development only, in production?, not all, and yeah, it shouldn't be enabled by default either, even on development mode, I'm pretty sure there are people out there with a git post-commit hook or something like that checking for pending migrations already, so we could add a commented out config option in config/development.rb:

    # Enable pending migrations checking on startup (default is false)
    # config.check_pending_migrations_on_startup = true

    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate' or set config.check_pending_migrations_on_startup to false

What do you think?","['Suggestion', 'Mention']",False
959,6232858,Closed in favor of #6665,['Reject'],False
962,2438341,"Hrm, I am unsure if this the concern of to_json? Shouldn't escape_json do this instead?","['Suggestion', 'Question']",False
962,2438618,"Where may I find escape_json ?

PS. I do think this is a concern of to_json. See the definition of `string` at http://json.org/ and see also http://noteslog.com/post/the-solidus-issue/
 
> The reason for allowing the slash to be escaped is for making it safe to embed the JSON substring `</script>` in HTML.
",['Question'],False
962,2438686,"I'm thinking maybe it should have `ActiveSupport.escape_script_tags_in_json` (similar to `ActiveSupport.escape_html_entities_in_json`)

Set by default to +true+

And when +true+ only escape `</script>` strings, to avoid too much unnecessary escaping.

",['Suggestion'],False
962,2438911,"Sorry, it is json_escape (and not escape_json):

https://github.com/rails/rails/blob/aa11f7332c1abadea23576805985f402298273f9/activesupport/lib/active_support/core_ext/string/output_safety.rb#L53


*
Jos Valim
www.plataformatec.com.br
Founder and Lead Developer
*","['Apology', 'URL']",False
962,2439298,"Don't like that at all! The output is not valid JSON anymore, which is a waste. You'd have to parse it to JSON again on the client. Better to simply send valid JSON.","['Objection', 'Answer']",False
962,2439302,"Hrm, right. Ok, I am leaving this open for more feedback then. /cc @jeremy","['Confirmation', 'Mention', 'Request']",False
962,3451822,"I agree with @lawrencepit that this would be useful!  It's a common pattern for backbone.js apps to embed json directly in a &lt;script&gt; tag (in order to avoid an extra round trip to load a model).  I'm agnostic as to whether escaping of ""&lt;/script&gt;"" -> ""&lt;\/script&gt;"" should happen in to_json (since it doesn't effect json used in other context except &lt;script&gt; tags), but it sure would be nice if there was a helper for it (javascript_json_escape?)","['Confirmation', 'Mention']",False
962,3836181,":up: Any new suggestions how to deal with that problem? `escape_script_tags_in_json` works fine, but it cost too much...",['Question'],False
962,5248007,"The whole javascript / JSON escaping situation seems like a mess to me.

We have `json_escape` which looks useful but definitely isn't and `escape_javascript` which while having a better use case is named inconsistently and doesn't cover escaping JSON. Not to mention the `j` aliasing!

I also disagree with @lawrencepit's solution as `{""name"":""<script>alert('foo');</script>""}` is perfectly valid JSON, the issue being solved here is with the browser and so belongs in a view helper.

We need some joined up thinking and consider this and the following issues as a whole

* https://github.com/rails/rails/pull/3578
* https://github.com/rails/rails/pull/5127",['Objection'],False
962,5257905,"@bestie not sure what you're disagreeing with. The string you quote is valid JSON, and so is `<script>{""name"":""<script>alert('foo');<\/script>""}`.

Sometimes you have to be practical. If you push this to a view helper it will use *a lot* more resources. My original solution works. And it conforms to the JSON specs. Everybody happy I'd say.","['Answer', 'Mention']",False
962,5292491,"@lawrencepit I'm disagreeing with `to_json` changing a valid JSON string for the benefit of the browser, it's simply the wrong place for it to happen.

I also don't take your point on performance, a call to `gsub` in `to_json` equivalent to a `gsub` in a helper.",['Mention'],False
962,5296994,"I disagree it's in the wrong place. It follows the JSON spec. Read it. It specifically mentions the solidus in the string form. If you escape the solidus it's still perfectly valid JSON, just more perfect.","['Objection', 'Answer', 'Reject']",False
962,5646755,":thumbsup: @lawrencepit  it doesn't break the whole JSON string but makes it safer for use case above.
But, IMHO, escaping HTML is more important here.   config.active_support.escape_html_entities_in_json = true
 is not working for
```
 render json: {x:""<script>alert(1)</script>""}
```
",['Mention'],False
962,5647532,"I'm also gonna give a :thumbsup: to @lawrencepit on this one. After reading the JSON spec closely I realised the string with the escaped solidus is equivalent, so escaping it is optional.

To express in Ruby
```ruby
{""key"" => ""<script>something</script>""}.to_json == {""key"" => ""<script>something<\/script>""}.to_json
```
and also
```ruby
JSON.parse(""{\""key\"":\""<script>something</script>\""}"") == JSON.parse(""{\""key\"":\""<script>something<\/script>\""}"")
```
both producing
```ruby
{""key""=>""<script>something</script>""}
```

My issue was that I thought the suggestion was to make a real change to JSON encoding, in reality this is completely in-line with the JSON spec, implementing an optional extra, and makes putting JSON into the browser way more convenient.

I still think we have a problem escaping JSON in Rails, but this is going to be convenient for a lot people and is easy innocuous change to make.

@josevalim was your issue the same as mine? Maybe you will change your mind also?",['Code'],False
962,6495175,"Oh, similar issue here.

We can close this issue since we merged making escape_html_entities_in_json to true by default.
/cc @josevalim ","['Accept', 'Mention']",False
962,8582828,"> We can close this issue since we merged making escape_html_entities_in_json to true by default.

Sounds good. If anyone can demonstrate this is still a problem after that change, let me know and I'll re-open. Thanks.",['Accept'],False
972,3839787,"@carlosantoniodasilva @guilleiguaran 

I added this testcase for fixing https://github.com/rails/rails/issues/4749.
I'm confusing... Why should we use 3-2-stable when using --edge option ?

related to https://github.com/rails/rails/pull/4912","['Mention', 'Question', 'Objection', 'URL']",False
972,3840051,"@kennyj hm yeah, I didn't check it further, just added the test fix. Seems like the `:branch` shouldn't really exist, let me check it better.","['Mention', '+1 (Plus One)', 'Suggestion']",False
972,3840062,"This confusing, generating a new app passing --edge option using 3.2.x also generate apps with conflicts about dependencies.","['Objection', 'Mention']",False
972,3840157,"Yeah, but with the `:branch` option:

```ruby
gem 'sass-rails',   :git => 'git://github.com/rails/sass-rails.git',   :branch => '3-2-stable'
gem 'coffee-rails', :git => 'git://github.com/rails/coffee-rails.git', :branch => '3-2-stable'
```

I get the same error as result:

```
Bundler could not find compatible versions for gem ""railties"":
  In Gemfile:
    sass-rails (>= 0) ruby depends on
      railties (~> 3.2.0) ruby

    rails (>= 0) ruby depends on
      railties (4.0.0.beta)
```

If I remove the `:branch`, it bundles successfully.","['Code', 'Fixing', 'URL']",False
972,3840245,I get same result when I was tackling #4749.,"['Confirmation', 'Answer']",False
972,3841636,"BTW, My confirmation way is https://github.com/kennyj/rails/commit/8bf3c6d8165fa6442b3ae2f86a955c82d0abf99b#commitcomment-921532",['URL'],False
972,3841691,"You're right guys, my commit needs to be reverted","['Confirmation', 'Accept']",False
1035,3396429,"IMO it is not a good idea to call OrderedHash a Hash, i hope that some time in the future Hash in Ruby will become unordered again, and ordered hash will be called OrderedHash.

http://bugs.ruby-lang.org/issues/5123",['Objection'],False
1035,3396434,nice - should we deprecate the constructor/class too so it can eventually be removed?,['Question'],False
1035,3396522,"No, but i think that it is a bad idea to call ordered hash a hash, not because it can be removed, but because it is good to document in the code whether the ordering is used.

In my opinion it was a bad idea in the first place to specify that Hash in Ruby 1.9 is ordered, i think it shouldn't be.",['Objection'],False
1035,3875575,"OrderedHash serializes as an omap in yaml so there's still valid functionality there.

Additionally, deprecating it is just giving busy work to users who upgrade, there's no harm in having a few lines of code lying around to avoid having thousands of people getting thousands of error messages.

We could take another pull request which removed any remaining unnecessary uses of OrderedHash internally, but there's no need to do this.",['Suggestion'],False
1030,3838721,Whoops. Sorry. Made a mess. Closing this out in favor of this pull request: https://github.com/rails/rails/pull/4916,['URL'],False
529,3638801,/cc @tenderlove ,['Mention'],False
529,3691905,@tenderlove Could you glance at the related change #3457?,['Request'],False
1034,3874346,"If we are doing this, it shouldnt be a constant, but a Rails accessor. And please send feature requests to master. Thanks.","['Confirmation', 'Request']",False
89,5518881,Any thoughts on this @tenderlove / @jonleighton?,"['Mention', 'Question']",False
89,6453591,I am curious too. Seems like a nifty feature.,['Confirmation'],False
89,6465826,Added code and tests for this feature. Please comment! Thanks.,['Request'],False
89,6465897,"I think we should be able not to have a proc, but a ""normal"" value too.

    class_attribute :bar, default: 'foo'",['Suggestion'],False
89,6465939,I realize that I went slightly against my own spec – I'll update it such that the proc is passed the attribute name.,"['Fixing', 'Confirmation']",False
89,6474136,"Rather than add an option here, you can override the reader method in the abstract superclass:

```ruby
class Abstract
  class_attribute :bar

  def self.bar
    raise NotImplementedError
  end
end

class Subclass < Abstract
  self.bar = 'now defined'
end
```","['Code', 'Suggestion']",False
89,6494703,"@jeremy this is true, but that does kind of grapple against the declarative nature of class_attribute. By allowing for a callable thing to be passed as an option, it keeps the logic localized.",['Mention'],False
89,6494759,It adds complexity to an otherwise very simple declaration. Ruby doesn't have defaults on `attr_accessor` either and we get along ok :),"['Answer', 'Objection', 'Suggestion']",False
285,3690313,"I like it. It will reduce the mistakes related to join tables a lot. If other core team members agree with this patch, we could even add a generator shortcut like: `rails g migration join_table_users_and_labels` (yes, I am a lazy bastard)","['Suggestion', 'Confirmation', 'Accept', 'Answer']",False
285,3691368,"Seems easy to forget that there's a special way to create join tables, though.

Could we solve the original problem by just populating timestamps on join tables, too?","['Suggestion', 'Question']",False
285,3691382,"@jeremy I am also fine with populating timestamps on join tables, although it seems @jonleighton doesn't like the idea much.",['Mention'],False
285,3691694,"I'm not a fan of more complexity there either, but it feels worth being able to use a ""stock"" `create_table` as a join table.

Less for people to think about or look up in docs, and it's interchangeable with a `has_many :through` without migrating.","['Suggestion', 'Objection']",False
818,4860830,"your PR needs a rebase!


Thanks :-)","['Suggestion', 'Gratitude', 'Objection']",False
818,4868185,Voilà !,"['Answer', 'Non-english']",False
818,4920171,"thanks for rebasing. Let me get someone to review this :-) 

Cheers, 
Arun

cc/ @spastorino can you look this PR ?",['Gratitude'],False
818,5544331,@jeremy please take a look in this pull request and also see if [this comment](https://github.com/rails/rails/pull/4254/files#L0R442) is still relevant,"['Mention', 'Request']",False
818,5616495,"Ok, looking good to me! Thanks for your patience, @alexeymuranov  :)","['Mention', 'Confirmation', 'Gratitude']",False
818,5619839,yay!,['Gratitude'],False
647,3692683,Why are you resubmitting the same PR once every few days?? #4600 #4622 #4638,['Question'],False
647,3692720,"@vijaydev I am sorry but there was some problem with my fork so had to delete them, reopen the PR.",['Mention'],False
647,3965292,Why is this change needed? ,['Question'],False
647,3967069,"@vijaydev  as there is already a ````logger```` method defined which returns ````@target.logger```` , so instead of calling ````@target.logger ```` again, it makes sense to use the ````logger```` method. ",['Mention'],False
647,3977596,"@railsaholic, u r right!!","['Confirmation', 'Mention']",False
647,4546947,@josevalim  Is it good enough?  Thanks,"['Question', 'Mention']",False
647,4547125,"Actually this only adds one more method call without any profit.
Plus if `logger` method is redefined by user, but `logger?` is not for some reason - this can lead to bugs as checked and returned objects can be different","['Suggestion', 'Answer', 'Bug']",False
647,5438847,"@railsaholic thank you for your patch, but I believe the method is clearer by using `@target.logger` since it already tests for `@target.respond_to?(:logger)` in the same line.",['Mention'],False
821,3671649,"@rafaelfranca Hey, we don't allow changelogs to be edited in docrails.",['Mention'],False
821,3671696,"Yeah, you are right. Sorry, I thought that was a typo in a Guide",['Apology'],False
822,3671731,Why use a symbol instead of just passing the separator as a string?,['Question'],False
822,3680990,"It just looks aesthetically acceptable to me.
If you think it's useless, I'll close this pull request.",['Accept'],False
822,3682692,@josevalim wdyt? ,['Mention'],False
822,3682873,Thanks but I will close this since I checked with the others and they are :-1: on it as well.,"['Gratitude', 'Reject']",False
820,3669834,"Using `:rubygems` in the Gemfile means that it's actually accessing http://rubygems.org instead of https.  I'd like to propose that we revert this change as I think https is a better default.  Thoughts?


FYI - Some time back I had submitted a pull request to bundler to change the default usage of `:rubygems` to be https but it was not merged due to SemVer.  More info here: https://github.com/carlhuda/bundler/pull/1585",['Suggestion'],False
820,3670624,There's honestly no benefit to using HTTPS when requesting rubygems. I don't see why the argument is made one way or another here.,['Objection'],False
824,3673204,"Rather than disable the GC, why don't we just close the tempfile after performing the mv?  It seems like we could just flush the tempfile, move, then close.

/cc @jeremy ","['Suggestion', 'Answer']",False
824,5518302,Any thoughts on this @tenderlove?,"['Mention', 'Question', 'Fixing']",False
824,5520309,"Closing the tempfile shouldn't expose it to possible GC - wtf?

/blame @NZKoz ",['Objection'],False
824,5520483,@jeremy tempfiles are rm'd from the filesystem [via a finalizer](https://github.com/ruby/ruby/blob/trunk/lib/tempfile.rb#L133-134). /play tmyk,"['Mention', 'Answer']",False
824,5520532,"Yeah, but there's still a live reference to the Tempfile object. Closing the file descriptor shouldn't cause it to be eligible for GC.","['Objection', 'Bug', 'Answer']",False
824,5520816,"You're right.  The only thing I can think is that somehow [`check_name` somehow collides with the actual tempfile name](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/file/atomic.rb#L35-38), or somehow the FS is cleaning up the temp file dir.  Either way, I don't see how GC could have anything to do with this.","['Suggestion', 'Confirmation', 'Answer']",False
824,5522448,"Yeah, I fail to see how GC could be causing this,  sticking GC.start in the method didn't trigger it.

seems more likely that @tenderlove's check_name theory is the culprit.","['Suggestion', 'Mention']",False
824,5522492,I'm closing this until we have a repro.  Thanks!,"['Confirmation', 'Reject']",False
831,3667844,"Is there any failing test so we can check with that?? 

",['Question'],False
831,3677403,"No I can not, because apparently it works fine.

I am not sure why it was not working for me, nor am I sure why it does work since Date#advance is not defined in Time::Calculations and none of the requires at the top of Time::Calculations add it.

    rails[master]/ › irb
    >> require 'active_support/duration'
    => true
    >> require 'active_support/core_ext/time/zones'
    => true
    >> require 'active_support/core_ext/time/conversions'
    => true
    >> Date.new.advance minutes: 1
    NoMethodError: undefined method `advance' for #<Date: -4712-01-01 (-1/2,0,2299161)>
        from (irb):4
        from /home/caleb/.rvm/rubies/ruby-1.9.2-p290/bin/irb:16:in `<main>'
    >> Time.new.to_date.advance minutes: 1
    NoMethodError: undefined method `advance' for #<Date: 2012-01-26 (4911905/2,0,2299161)>
            from (irb):5
            from /home/caleb/.rvm/rubies/ruby-1.9.2-p290/bin/irb:16:in `<main>'

But...

    rails[master]/ › irb
    >> require 'active_support/core_ext/time/calculations'
    => true
    >> Date.new.advance minutes: 1
    => #<Date: -4712-01-01 (-1/2,0,2299161)>

So it clearly works somehow.  I'm just not sure where active_support/core_ext/date/calculations is being required, or more specifically where Date#advance is being defined.


",['Fixing'],False
829,3674757,This breaks shared_examples_for in rspec so it'd be awesome if this could be backported to 3.2 as well.,['Suggestion'],False
826,3673908,"Thanks for the patch. I've added some comments. Please address them and file a new PR against master, not 3-2-stable.",['Request'],False
826,3673919,Another comment: new applications should be generated with `config.active_record.dependent_restrict_raises = false`.,['Suggestion'],False
826,3673926,Please also specify in the documentation that an error will be added to the model.,"['Suggestion', 'Request']",False
826,3673928,"Also, needs a CHANGELOG entry.",['Suggestion'],False
828,3669873,Bad Pull Request. Please fix this. Or create new one.,['Objection'],False
828,3669884,Yep. Definitely a bad one. Sorry about that.,['Apology'],False
833,3396184,"+1 @chinshr and I recently came across this issue at work, would be good to see this pulled.","['+1 (Plus One)', 'Mention']",False
833,3667867,Can you please do a rebase with your PR. I think some of the change are already there.,['Request'],False
833,3680756,@arunagw I rebased but the issue is still present.,"['Bug', 'Mention']",False
833,4017417,cc/ @tenderlove ,['Mention'],False
833,4024906,"Can we do this test without an `instance_variable_set`?  I believe the logger could be nil, but surely we should test the public API that causes it to be nil.","['Request', 'Question']",False
833,4390245,"@pwim seems your changes is already done here b5c939dcb3979901fc31f8c79a4fde58999052e8

Can you please fix the test and fix this PR??

Cheers, 
Arun","['Request', 'Fixing']",False
833,4406745,"Yes, the changes are there so this PR is no longer necessary.","['Confirmation', 'Answer']",False
833,4409652,@pwim Cool thanks :-),"['Gratitude', 'Mention']",False
843,3687199,"I found this

```
./railties/guides/source/configuring.textile:* +config.colorize_logging+ specifies whether or not to use ANSI color codes when logging information. Defaults to true.
```",['Code'],False
838,3684839,+1,['+1 (Plus One)'],False
838,3684852,+1,['+1 (Plus One)'],False
838,3684963,+1,['+1 (Plus One)'],False
838,3684975,+1,['+1 (Plus One)'],False
838,3685044,+1,['+1 (Plus One)'],False
838,5487327,"The tests all pass;  Though should the following lines `Time.now.to_f` be changed to `Time.now.to_i` ?

cc @tenderlove ",['Mention'],False
838,5493358,I don't think we need to change the `Time.now` line.,['Reject'],False
846,3696474,"Umm... Thanks, again!",['Gratitude'],False
849,2188173,cc @spastorino,['Mention'],False
849,2188174,cc @josevalim,['Mention'],False
849,3702780,"This patch breaks mswin32 ruby. Because mswin32 version of ruby installed rake.bat instead of rake with shebang line and rake.bat is bat file (special type of windows shell script) embeded ruby script in it.
The patch makes re-launch command line as 'ruby.exe rake.bat assets:precompile'. Then ruby will read bat file directly and makes error : PATH/rake.bat:1: syntax error, unexpected tIDENTIFIER, expecting $end
Here is fixed version of the patch.   https://gist.github.com/1695503

I wonder if you pull the patch, thanks.",['Bug'],False
849,3702853,@arton please provide a PR so everyone can follow the discussion,['Mention'],False
849,3703025,"@spastorino Oh, sorry. I'll try it.",['Mention'],False
848,3700412,Way easier to read :) :+1:,['+1 (Plus One)'],False
848,3700816,:+1:,['+1 (Plus One)'],False
845,3543368,Thanks for the pull. I am in general not a fan of overriding `to_s`. But let's see what other core members think about it. /cc @tenderlove @jonleighton @fxn ,"['Gratitude', 'Suggestion', 'Mention']",False
845,3545690,"I agree with @josevalim; `render` is domain specific terminology, whereas `to_s` is not. If these classes were public then maybe I would be persuaded otherwise, but I think we are agreed that they should remain private, hence there is no great advantage in making it easier for people to use in their erb files.","['Mention', 'Accept', 'Confirmation']",False
845,3547932,":-1: to change `render` to `to_s`, for the same reasons that @jonleighton. But I liked the others changes.","['Mention', 'Suggestion', 'Objection']",False
845,3694975,"I believe the most important changes were already applied by @rafaelfranca's pull request, so this issue could be closed.","['Mention', 'Reject']",False
844,3694939,"Awesome, this feature is a lot more useful this way, great work :+1:","['Gratitude', '+1 (Plus One)']",False
844,3698612,:+1: Fantastic work @Manoj! Looking forward to seeing this merged! /cc @jonleighton ,['+1 (Plus One)'],False
844,3699560,"Added some more comments, thanks.",['Gratitude'],False
844,3707470,@asanghi @carlosantoniodasilva @NoICE Thank you all for your input. :),"['Mention', 'Gratitude']",False
844,3707472,"@jonleighton Thanks for the comments, I have addressed the suggested modifications. Please comment. :)","['Mention', 'Gratitude']",False
844,3707902,I'd simplified how the error message is defined [15154c0](https://github.com/pacoguzman/rails/commit/15154c0d8c656b664fb0d387951a5bd62b0a9da7),"['URL', 'Bug']",False
844,3722339,@pacoguzman thx for the refactoring :),"['Mention', 'Gratitude']",False
844,3729275,added some more comments. please also pull in @pacoguzman's refactorings.,"['Mention', 'Request']",False
844,3735550,"@jonleighton addressed the suggested improvements, also included @pacoguzman's refactorings. :)",['Mention'],False
844,3739478,"@jonleighton Any chance we can get this ""dont raise an exception"" feature backported to Rails 3.2.x ? Or has that boat has totally sailed? 

There won't be any deprecation warning in 3.2 of course but at least we'll be able to use the feature by using the configuration option. What do you think?",['Question'],False
844,3744166,@asanghi I think the ship has sailed I'm afraid - we can't add more features to 3.2 now it has been released.,"['Answer', 'Mention']",False
844,4032150,"I'm not sure if this is the right place to ask, but don't forget to document `:restrict` here: http://guides.rubyonrails.org/association_basics.html

Thanks, looking forward to using this feature.",['URL'],False
844,4032359,"@jaredbeck done .. committed to docrails https://github.com/lifo/docrails/commit/f49ec92866f6d8f27617b5723bff99ac0f7ca92f
/cc @vijaydev ",['Mention'],False
844,7564210,I really don't like this global setting. Let's push this down to where it's being defined and go explicit. So have dependent: :restrict_with_exception and :restrict_with_validation or something like that.,['Suggestion'],False
844,10632543,"If I try to delete associated model with nested attributes will it work correctly? I think that parent model won't hold error messages so. I don't see tests for this case, so I see that it won't work as it expected",['Question'],False
856,3707987,"this part already merged with given commit 
https://github.com/rails/rails/commit/e89a7f5ceeadc7b7d654c82b730d6340176e5a99

closing.",['URL'],False
853,1126561,"Are you sure this would work as intended? IIRC, Rails stores (date)times in UTC. My system runs in CEST (UTC+2), the application's time zone is set to 'Berlin' (also CEST/UTC+2) but the values are stored as UTC.

I have:
TimeEntry.create!(:date => '01.05.2011', :starts_at => '09:00', :ends_at => '19:00')

Querying this directly via connection.select_value gives me 2011-05-01 07:00:00. If I use the ActiveRecord object in stead, I'm getting Sun, 01 May 2011 09:00:00 CEST +02:00.

Note that this could also be because my PostgreSQL server is configured this way – it's one of my first PG projects. :-) (Yes, I've seen that your patch is for MySQL – but the way Rails stores datetimes with regard to time zones is the same across databases, right?) But if I'm right, your patch would probably have to be adapted to ensure that the time zone's always UTC. If I'm wrong, don't mind me. :-)",['Question'],False
853,1127086,"Hi, clemens. I am sorry, but I don't get what you are trying to say or why  are you talking about PostgreSQL. This patch is about getting useful values from `UNIX_TIMESTAMP` or other MySQL functions, which rely on the setting of  time zone of the MySQL RDBMS (`CURRENT_TIMESTAMP()`, `CURRENT_TIME()`, `CURRENT_DATE()`, and `FROM_UNIXTIME()`). 

As I wrote in the first post, the setting of the time zone of the MySQL RDBMS is usually `SYSTEM`, which means, that the time zone is set to whatever the system administrator decided, which will usually be the local time zone  of the place, where the system physically resides.

You have correctly pointed out, that the values stored by Rails in `datetime` columns are usually in `UTC`.  What you get if you query (from Rails app.) the `UNIX_TIMESTAMP` of any such value?  (Sidenote: `UNIX_TIMESTAMP` function returns an integer value, so no time-related conversion in Rails takes place.) Now is the answer ""that depens, probably something incorrect, because the `UTC` value was interpreted (in MySQL) as a value in `SYSTEM` time zone, which is ... (_something nobody cares, because you are using some hosting abroad_)"".  My intend is to use this patch to set the time zone of my sessions to `UTC` to always get proper values from functions like `UNIX_TIMESTAMP` applied to `datetime` type of values.  If someone is using `config.active_record.default_timezone = :local`, then he'll probably not set his sessions time zone to `UTC`.","['Code', 'Objection']",False
853,2335034,"I recommend you use a datetime column and the UTC_TIMESTAMP() function instead.

Otherwise, this is such a niche case that I don't think it qualifies for inclusion in main database.yml config. It's something you can set yourself in a config/initializer, though!",['Suggestion'],False
853,3706672,"@jeremy This is primarily a problem for legacy databases. Or for those of us with large datasets ie billions of rows the space saving made by using timestamp can really add up.

At the moment I do the following in config initializer


    require 'active_record/connection_adapters/mysql2_adapter'
    module ActiveRecord
      module ConnectionAdapters
        class Mysql2Adapter
          private
          alias old_configure_connection configure_connection
          def configure_connection
            old_configure_connection
            execute(""SET SESSION time_zone='+0:00'"", :skip_logging)
          end
        end
      end
    end

It would be great if there was a nicer way",['Code'],False
853,3768283,I ran into this today as well.. big pain to track this down.,['Confirmation'],False
853,3768295,"Note: not Rails' fault this provides more detail:

http://bugs.mysql.com/bug.php?id=15654",['URL'],False
858,3711269,This looks great! Gives the exact behavior I was looking for in the issue,['Confirmation'],False
858,3725366,"+1, good for me",['+1 (Plus One)'],False
858,3745537,Please send this pull request to master and not 3-2-stable.  We can decide whether or not to backport after it has been applied to master.,['Request'],False
858,3745795,"@tenderlove, [done](https://github.com/rails/rails/pull/4806). It'd be nice if you leave some comments on the inconsistent behavior I described in the comment to the original issue. Should we do smth about that?",['Mention'],False
857,3710321,Seems fine to me but please don't change the code under vendor,"['Request', 'Confirmation']",False
857,3710425,"Fixed, sorry I missed that",['Apology'],False
857,3711000,"In most of these cases, `for` is easier to read than the `#each` equivalent.

No sense changing them wholesale because a Reddit thread says they're uncommon!","['Suggestion', 'Answer']",False
857,3711318,"I've applied the patch not because of Reddit thread, probably I should've commented my thoughts first :(.
I've applied it because I find the code better to read but if you don't like feel free to revert it","['Answer', 'Fixing']",False
857,3711387,"Thanks for the feedback. Now that I look at it again, I agree that `for` loops are easier to read when dealing with ranges.

Here's a [pull request](https://github.com/rails/rails/pull/4747) to revert to using `for` loops for ranges.","['Accept', 'Gratitude']",False
879,3725116,That isn't a typo. That's the 5 hours time difference between UTC and EST.,['Objection'],False
879,3725959,Oh. Thanks for the clarification. I see that the zone is set to EST up higher in the doc.,['Gratitude'],False
854,3707154,Not sure about this patch. This can hide errors when you actually want to pluck given an order. I think it is actually up to your application to call `unscoped/reorder/only/except` when you want to ignore the previous conditions.,"['Suggestion', 'Answer', 'Bug']",False
854,3707156,"Anyway, thanks for the pull request and the well described issue. I will leave it open to see what others think.",['Gratitude'],False
854,3725922,Can anyone shed some light? Is currently a blocker for us (as described in #4758),"['Question', 'Request']",False
854,3735505,"@josevalim I agree with you in general, but this is breaking the _ids method on some associations where that previously worked on 3.1. So I think we need to deal with that in some way. Probably we should revert the _ids method to not use `pluck`?","['Mention', 'Suggestion']",False
854,3735626,"The problem is in `uniq` that was added to `ids_reader`. In previous version of `ids_read` there was no uniqueness.
See this line in collection_association.rb `relation.uniq.pluck(column)`. See commit 109db5a that introduced that change.
`uniq` gives SELECT DISTINCT and that's why error is thrown.

Let's ask @lest why he added `uniq` in relation.",['Mention'],False
854,3735686,"Yeah, we can either do the uniq in Ruby or change it to not use pluck.
Probably the second.","['Answer', 'Suggestion']",False
854,3736338,"Uniqueness wasn't present in previous versions of ids_reader, that's why we can just remove `uniq` from relation. See #4783","['Answer', 'Suggestion']",False
861,3713965,`for` loops use each underneath and it's not idiomatic.,"['Answer', 'Suggestion']",False
861,3714054,Not keen on this either. IMO for in ruby is basically vestigial limb inherited from earlier block-less languages.,['Suggestion'],False
861,3738365,"imho, in most of these cases upto is better then using each and ranges :)",['Suggestion'],False
861,3738524,Doesn't make much sense for me either. :-1:,['Objection'],False
861,3745311,"I agree with @jurriaan, it seems better that we use `upto` rather than loops and ranges.  Anyway, I don't find `for` to be readable at all.  </2cents>",['Mention'],False
896,3011301,"Not sure when sqlite3-journal files generated. 

Also your PR needs a rebase.",['Suggestion'],False
896,3730889,Closing this for now. Please submit a new PR again.,"['Request', 'Reject']",False
883,3611476,"You might want to just update the code in the original pull request, to keep the conversation together there.

BTW I'm +1 on this idea. .where('1 = 0') is a lame hack.","['+1 (Plus One)', 'Suggestion']",False
883,3617656,"I'm OK with this, but I'd like more opinions.  @jonleighton ?",['Mention'],False
883,3621135,"I'm okay with this too, but I think it would be better if:

* The rationale was explained in the documentation (also explained in terms of the 'null object pattern' as that's what this is)
* There was a CHANGELOG entry
* Ideally I'd prefer if we used polymorphism. I.e. if Relation#none returned an instance of a NullRelation that implemented this behaviour, rather than having to have a `@none_value` var and special code in `exec_queries`.

Thanks.",['Suggestion'],False
883,3637043,"I agree with @jonleighton.  @xuanxu can you make those changes, and we'll merge it in.  Thanks for the contribution! :-)",['Mention'],False
883,3637693,"OK, I will try to make those changes","['Fixing', 'Answer']",False
883,3727293,"@tenderlove Done!: #4768
¿should I backport it to 3.2?",['Question'],False
883,3745091,"@jonleighton can you review?

@xuanxu no, we will not backport this (as it is a new feature).",['Mention'],False
869,3720125,cc/ @jonleighton ,['Mention'],False
869,3746270,This broke the build with identity map turned on.  Can you please fix the tests and resend?  Thanks.,"['Request', 'Question']",False
869,3755456,"Sorry about that, my bad.
I got a fix working, but one test still fails:

test_instantiation_doesnt_try_to_require_corresponding_file(InheritanceComputeTypeTest) [../inheritance_test.rb:267]:
ActiveRecord::RecordNotFound expected but nothing was raised.

I am looking into it.","['Fixing', 'Code']",False
869,3766792,I submitted https://github.com/rails/rails/pull/4833 as a fix for the failing tests in active_record,"['URL', 'Answer', 'Fixing']",False
897,1871355,"Nice fix. It would certainly solve our problems with getting a users IP when the user, proxy and app server are all on the LAN. We've had to fall back to reading X_FORWARDED_FOR directly.","['URL', 'Confirmation']",False
897,2720910,"Very useful, I hope someone merge it soon ^^","['Gratitude', 'Request', 'Confirmation', 'Suggestion']",False
897,3730895,@gsterndale your PR needs a rebase. I think some cod changes is done in the same file.,"['Mention', 'Suggestion']",False
897,3851077,Thanks @arunagw rebased.,"['Mention', 'Gratitude']",False
897,3851142,cc/ @josevalim ,['Mention'],False
897,4243925,Will this be included in 3.2.2 final?,['Question'],False
897,10257684,It would be nice to get this into 3.2.x at some point. I've been monkey-patching this for months. @spastorino can you do anything?,"['Mention', 'Request', 'Suggestion']",False
897,34154738,Looks like this never made it in to 3.2.16 even though it was merged to master 2 years ago?! *confused*,"['Objection', 'Question']",False
897,34164527,"@courtland @donaldpiret : If you look at the merge commit, you can see just under the message the releases that include it. Moreover, 3.2.x don't receive any new fixes anymore (apart from security ones).","['Mention', 'Suggestion']",False
897,34183059,"@robin850 Thanks for clarifying, that makes sense!","['Gratitude', 'Mention']",False
901,3730961,Your PR needs a rebase. Some code changes is done in this file. I think after that we can bring more attention on this from team.,['Suggestion'],False
901,3798820,"Rebased master onto my branch and squashed the commits.

Personally, I ended up throwing in the towel on using Perforce directly and now use it via git-p4. I still think there should be options to skip/configure the git specific stuff though.","['Fixing', 'Digression', 'Suggestion']",False
901,5476451,"The tests encounter a parse error at 
rails/railties/lib/rails/generators/rails/app/app_generator.rb:302

ruby-1.9.3-p194","['URL', 'Bug']",False
901,5479882,"Apparently the same tests are being added to both app_generator and plugin_new_generator, confirm? If so, you can probably move them to [SharedGeneratorTests](https://github.com/rails/rails/blob/master/railties/test/generators/shared_generator_tests.rb), that is included in both.","['URL', 'Request']",False
901,5495894,I'll take care of that tonight and try to do a rebase on master as well.,['Fixing'],False
901,5500892,"I spoke too soon. I'm having trouble successfully installing the gem dependencies as described in the [edgeguide](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#set-up-and-run-the-tests). I get compatibility errors from bundler. Until i can figure out what to do about those, I can't run any tests.","['URL', 'Bug']",False
901,5961827,what's happening with this PR guys ??,['Question'],False
901,6134656,"I've just had baby, so I haven't had any time to make the suggested changes
and rebase.

On Mon, May 28, 2012 at 5:26 AM, Arun Agrawal <
reply@reply.github.com
> wrote:

> what's happening with this PR guys ??
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/2808#issuecomment-5961827
>","['Apology', 'Answer']",False
901,8494071,Closed in favor of #7614,"['Reject', 'Accept']",False
907,3007701,"Thanks for reporting the bug. I think perhaps we should be using `base_class` here. E.g. something like:

``` ruby
def sequence_name
  if base_class == self
    @seqence_name ||= reset_sequence_name
  else
    (@sequence_name ||= nil) || base_class.sequence_name
  end
end
```

Could you look into that please?
    ",['Code'],False
907,3007796,"Yes, it works, I also updated my pull request.","['Accept', 'Confirmation', 'Answer']",False
907,3731311,"This seems to break code where an inheritance tree defines both a table_name_prefix and defines a sequence pattern for all models inheriting from this tree.

Given:

```ruby
class A < B
end

class B < ActiveRecord::Base
  self.abstract_class = true
  self.table_name_prefix = 'core.'
  self.sequence_name = :autogenerated
end
```

The queries will work correctly, but because of the behavior of base_class, when the connection asks for the sequence_name, base_class returns A and not B.  A then resets the sequence_name and it is no longer pulled from the super, instead, you get a sequence name 'core.a_seq'

Seems we are missing a test case where the sequence_name is set in the base class and is retained in the subclass.

Are there any suggestions for work arounds? ",['Code'],False
903,2104229,There is a problem with this approach: calling `count` on an ActiveRecord::Relation mitigates any limit(n) that was previously set,['Objection'],False
903,2104283,"Inspect is meant to be used in tests and console only, not in a codebase.
Therefore I don't see any moment when we wouldn't want to have this set to true.
Moreover, if we're comparing a lot of objects in a test, the result will be biased.

-1",['Objection'],False
903,2113054,"The problem only exists when in production one has a exception notifier that sends an email containing the backtrace + an inspection of the env variables back at the developers. I believe that filling the production machine's memory with a huge inspection string is not one of the admin's favorite things.

My solution might be a bit ugly but in development it served me and a couple of my colleagues well when a broken Arel query inspection started filling in more than 2GB of ram.","['Suggestion', 'Answer']",False
903,3730914,What's happening to this PR guys! Are we still on this?? Or this can be closed??,['Question'],False
903,4450718,"Closing this for now. Please reopen this with more details. 


Cheers, 
Arun","['Reject', 'Request']",False
916,3735248,"Cheery-picked to `3-2-stable`. If you would like, please submit a backport for `3-1-stable`.",['Request'],False
906,3731635,"Humm, the generated url was not shown, I'll paste the code in the gist: https://gist.github.com/1707977",['URL'],False
906,3734442,"This change is backwards incompatible for people relying on the old behavior. That said, could you please add an entry to the CHANGELOG saying that this helper will now use the favicon in app/assets by default?","['Request', 'Mention']",False
906,3737595,"and tests, the existing ones passes? do we need new ones?","['Question', 'Accept']",False
906,3739490,Done :-),"['Fixing', 'Answer']",False
906,3741064,Squash the commits into one please and push -f,"['Suggestion', 'Request']",False
906,3743736,"PR contains *.swp files, remove them please",['Request'],False
906,3743846,"Ok, I saw the .swp files.. sorry, I'll remove them.",['Apology'],False
906,3744001,"I already squashed the commits into one and make a new pull request: https://github.com/rails/rails/pull/4803

I'll close this one, ok?!","['Accept', 'URL']",False
917,3736427,Thanks for the fix! This would close #4758,['Gratitude'],False
923,3764165,Done in another PR. Closing.,['Reject'],False
921,3608397,"Nice, I like the method not hitting the database, but don't like it using the where method, I've implemented it using a none_value attribute here: https://github.com/rails/rails/pull/4609

 ",['URL'],False
921,3762016,https://github.com/rails/rails/pull/4805 is merged. Closing.,"['Accept', 'URL']",False
919,5495860,"All of the tests pass.

cc @tenderlove ","['Mention', 'Confirmation']",False
919,5505610,"Any thoughts about the names by the way?  'Filter' sounds too general, can be reserved for more complex operations.  Maybe `#deep_slice` and `#deep_except`?","['Question', 'Suggestion']",False
919,5730207,"Hey guys. We think that this kind of things should go to plugins. Active Support is for things that we use in the Rails code and common patterns.

Thank you for the pull request.","['Gratitude', 'Suggestion']",False
927,3769181,"*bump*

Would it make this any more compelling if I pointed out that this isn't just an optimization to reduce the number of objects created.   By running, eg, 

```ruby
client = company.clients.find_or_initialize_by_foo('bar')
client.save
company.save
```

you end up persisting two Client objects to the database - one in the return value from `find_or_initialize`, and one that's autosaved along with the `company.save`.",['Code'],False
927,3769304,"merged, thanks",['Accept'],False
924,3764366,"Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.",['Request'],False
924,3946677,"Hi Aaron,
I've submitted the pull request against master and tested everything
out. It awaits your leisure:

https://github.com/rails/rails/pull/4834

Cheers,
sk

On Wed, Feb 1, 2012 at 1:38 PM, Aaron Patterson
<reply@reply.github.com>
wrote:
> Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/4810#issuecomment-3764366",['Request'],False
924,4139215,"Hi Aaron,
Was looking at https://github.com/rails/rails/compare/v3.2.1...v3.2.2.rc1
and I noticed that the change to pslq didn't get backported. Do you
think that this will make 3.2.2?

Cheers,
sk

On Mon, Feb 13, 2012 at 1:55 PM, Sean Kirby <sskirby@gmail.com> wrote:
> Hi Aaron,
> I've submitted the pull request against master and tested everything
> out. It awaits your leisure:
>
> https://github.com/rails/rails/pull/4834
>
> Cheers,
> sk
>
> On Wed, Feb 1, 2012 at 1:38 PM, Aaron Patterson
> <reply@reply.github.com>
> wrote:
>> Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.
>>
>> ---
>> Reply to this email directly or view it on GitHub:
>> https://github.com/rails/rails/pull/4810#issuecomment-3764366",['Question'],False
924,4142581,"@sskirby thanks for reviewing the commits!  Yes, I meant to backport this before the release but totally forgot.  This will be in 3.2.2 final.",['Mention'],False
926,3767456,"We should honestly get rid of identity map. It was a great effort but the current limitations make it unusable in most apps. Alternatively, we can fix it and make it default.",['Suggestion'],False
926,3768577,"@josevalim agree.  [1, 2, 3, not it](http://www.urbandictionary.com/define.php?term=123%20not%20it).","['Mention', 'URL']",False
926,3774024,@josevalim what would be needed to make it usuable?,"['Mention', 'Question']",False
926,4707480,"I guess that should be closed now that IM was removed from master, thoughts?","['Question', 'Reject']",False
926,5530217,@carlosantoniodasilva agreed.,['Mention'],False
918,3737047,Can we add a test for at least 1 of those keywords?,"['Request', 'Question']",False
918,3737987,Is not enough to just prepend self always instead of checking against RUBY_KEYWORDS ?,['Question'],False
918,3738006,"Yeah, probably :P","['Confirmation', 'Answer']",False
918,3738444,@ayamomiji please do it and squash your commits :),"['Mention', 'Request']",False
918,3753661,"But i cannot just prepend `self.` always, this causes the DirtyTest to raise errors like these:

```
test_setting_attribute_will_result_in_change(DirtyTest):
NoMethodError: private method `attribute_changed?' called for #<DirtyTest::DirtyModel:0x007faa6b038b40>
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:373:in `method_missing'
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:314:in `name_changed?'
...

NoMethodError: private method `attribute_will_change!' called for #<DirtyTest::DirtyModel:0x007faa6b057568 @name=nil, @color=nil>
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:373:in `method_missing'
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:314:in `color_will_change!'
...
```","['Code', 'Bug']",False
918,3753752,"i'll use `send` instead of prepending `self.` for prevent make aliases on private attributes.
i'm not sure should attributes always be public?",['Question'],False
918,4450456,What's happening here? :) ,"['Digression', 'Question']",False
918,5523658,Is this still an issue?,['Question'],False
918,5532907,"/cc @josevalim I don't see another way of doing this but I don't like it neither :/. Or we leave the Ruby keywords list or we remove the CALL_COMPILABLE_REGEXP optimization and always do send(:'#{send}', #{extra})","['Mention', 'Suggestion']",False
918,5544342,+1 for always do `send`.,['+1 (Plus One)'],False
918,5550786,":-1: I think this is just hacky. :( If they are reserved, we shouldn't be messing with it. We should do make behavior as predictable as possible. In other languages, users have to respect the reserved words. I think we should too. Just my $0.02",['Objection'],False
918,5556157,"@isaacsanders disagree, you can define a method called begin for your classes in pure Ruby. So why stopping people for doing that on AM attributes?","['Mention', 'Question']",False
918,5556311,I don't know. It is just my opinion. I feel bad that I can't vocalize why I feel the way I do.,"['Digression', 'Objection']",False
918,5559397,"@isaacsanders no worries :), I was giving my opinion too :heart: :heart: :heart:",['Mention'],False
918,5672714,@spastorino @josevalim are we good to go here? :),['Mention'],False
918,5672827,"@carlosantoniodasilva read my comment where I've /cced to @josevalim, let's wait for him","['Mention', 'Request']",False
918,5674748,"We should just use `self.` The reason `self.` is making dirty tests fail is because your changes are affecting a place it should not to. There are two methods in the attributes module that calls `define_optimized_call`, one is alias attribute and there is a second one. You are mistakenly affecting the second one. Here is a patch for example that makes your tests pass:

https://gist.github.com/2686886

Can you please update accordingly?",['Suggestion'],False
918,5921779,@josevalim are we good to go now? :),"['Mention', 'Question']",False
934,3778224,/cc @josevalim ,['Mention'],False
934,3778481,"@jeremy it looks good to me, let's merge?",['Mention'],False
934,3780153,"Nice job, especially with updated docs and guide.

There are a lot of other refactorings and style changes included, too, making it hard to review the code carefully.

:+1: here but please do separate pulls for refactoring and style changes next time!","['+1 (Plus One)', 'Gratitude']",False
934,3780285,"@jeremy thanks, we will be paying more attention to that from now on.",['Mention'],False
933,3740561,"Pretty please. Some of us still use Rails 2.3.x, and latest 2.3.x with latest rubygems results in ~40 lines of deprecation warnings from rubygems on startup. 

See: https://github.com/rubygems/rubygems/issues/145   

The rubygems team does not seem to consider it a problem. ",['URL'],False
933,3778169,"@jrochkind can you test this patch on your app, as I said in the note above I wasn't able to find instructions on how to setup a 2-3-stable development env so some feedback would be useful",['Mention'],False
933,3778246,"(about to be on vacation for two weeks, will try to do after I return.  
If I can figure out how to apply a patch to rails in a 2-3 app myself,  
I don't know either.)

On Feb 2, 2012, at 8:53 AM, Elia Schito wrote:

> @jrochkind can you test this patch on your app, as I said in the  
> note above I wasn't able to find instructions on how to setup a 2-3- 
> stable development env so some feedback would be useful
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/4422#issuecomment-3778169","['Mention', 'Answer']",False
933,3778305,"It's probably enough to put:

```ruby
require 'rails/gem_dependency'

module Rails::GemDependency
  def self.add_frozen_gem_path
    @@paths_loaded ||= begin
      original_source_index = Gem::Specification.respond_to?(:dirs) ? Gem::SourceIndex.new(Gem::Specification.dirs) : Gem.source_index
      source_index = Rails::VendorGemSourceIndex.new(original_source_index)
      Gem.clear_paths
      Gem.source_index = source_index
      # loaded before us - we can't change them, so mark them
      Gem.loaded_specs.each do |name, spec|
        @@framework_gems[name] = spec
      end
      true
    end
  end
end
```

right before `Rails.boot!` in your application `config/boot.rb`.
",['Code'],False
933,4403969,"@elia The snippet in your last comment doesn't quite work. I got this error when I tried it:

    GemDependency is not a module (TypeError)

Changing module to class results in the error going away and the original warning being silenced. Have not tried this in production yet.",['Mention'],False
933,4424373,"@jwarchol that was a paste from a hack directly in rubygems :blush:

I tried and for me doesn't work *before* `Rails.boot!` but only **after**:

```ruby
# config/boot.rb stuff here...
# possibly bundler stuff here...

# All that for this:
Rails.boot!

require 'rails/gem_dependency'

class Rails::GemDependency
  def self.add_frozen_gem_path
    @@paths_loaded ||= begin
      original_source_index = Gem::Specification.respond_to?(:dirs) ? Gem::SourceIndex.new(Gem::Specification.dirs) : Gem.source_index
      source_index = Rails::VendorGemSourceIndex.new(original_source_index)
      Gem.clear_paths
      Gem.source_index = source_index
      # loaded before us - we can't change them, so mark them
      Gem.loaded_specs.each do |name, spec|
        @@framework_gems[name] = spec
      end
      true
    end
  end
end

```
","['Code', 'Mention']",False
933,4495483,"I'm working on removing all deprecations for all gem version in [elia#fix-railties-tests-for-latest-rubygems](https://github.com/elia/rails/tree/fix-railties-tests-for-latest-rubygems)

Right now I think I'm done from rubygems 1.3 up to 1.7, I also added some info on setting up dev environment in the README

Any feedback/help is really appreciated :bowtie:","['URL', 'Fixing']",False
933,5544380,"@jeremy @jonleighton @tenderlove hey guys, this pull request is pointing 2-3-stable branch. Could you take a look on it and see if we will accept or close it?

Thanks.",['Mention'],False
933,5561514,"I'm not seeing a final resolution or verified fix here. @elia could you open a pull request for your changes, instead?","['Mention', 'Objection']",False
933,5570277,"@jeremy, @rafaelfranca: see pull #6202, closing this one.",['Mention'],False
929,3774199,"Thanks :).

In principle I am hesitant to add that check, because it may hide that some code is not passing the bindings in its instrumentation call. Binds are a collection and so when no binds are used there's a collection, empty, but not `nil`.

There was a recent issue related to CACHE queries that I fixed in de161003c36a0cd967aa393e7706b12055770174 and will ship in 3.2.2. Have you seen any other use case?
","['Question', 'Gratitude']",False
929,3775395,"The cases where I was seeing this error appear were all using `find` with an `:include`, for example:

```ruby
User.find(
  current_user.id,
  :include => [
    :credit_card,
    :user_image,
    :sent_offers => {
      :sender => :user_image,
      :receiver => :user_image,
      :listing => [:listing_image, :listing_images]
    },
    :received_offers => {
      :sender => :user_image,
      :receiver => :user_image,
      :listing => [:listing_image, :listing_images]
    }
  ]
)
```","['Bug', 'Code']",False
929,3786584,"I cannot reproduce this failure on 3-2-stable with user has many posts. See the session:


    fxn@rails:~/tmp/test-4844 $ grep threshold config/environments/development.rb 
      config.active_record.auto_explain_threshold_in_seconds = 0
    fxn@rails:~/tmp/test-4844 $ script/rails c
    Loading development environment (Rails 3.2.1)
    1.9.3-p0 :001 > User.find(1, :include => :posts)
      User Load (3.3ms)  SELECT ""users"".* FROM ""users"" WHERE ""users"".""id"" = ? LIMIT 1  [[""id"", 1]]
      Post Load (0.5ms)  SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""user_id"" IN (1)
      EXPLAIN (0.6ms)  EXPLAIN QUERY PLAN SELECT ""users"".* FROM ""users"" WHERE ""users"".""id"" = ? LIMIT 1  [[""id"", 1]]
      EXPLAIN (0.1ms)  EXPLAIN QUERY PLAN SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""user_id"" IN (1)
    EXPLAIN for: SELECT  ""users"".* FROM ""users""  WHERE ""users"".""id"" = ? LIMIT 1 [[""id"", 1]]
    0|0|0|SEARCH TABLE users USING INTEGER PRIMARY KEY (rowid=?) (~1 rows)

    EXPLAIN for: SELECT ""posts"".* FROM ""posts""  WHERE ""posts"".""user_id"" IN (1)
    0|0|0|SCAN TABLE posts (~100000 rows)
    0|0|0|EXECUTE LIST SUBQUERY 1

     => #<User id: 1, created_at: ""2012-01-31 07:59:45"", updated_at: ""2012-01-31 07:59:45""> 

Could you post a way to reproduce the error?","['Code', 'Bug']",False
929,3907927,I was just getting this issue on 3.2.1. I changed to 3-2-stable and it's fixed it. Good work.,"['Gratitude', 'Confirmation', 'Fixing']",False
929,3908004,"@ihid excellent, thanks very much for the feedback.

The CACHE notification have binds now (and anyway we are no longer monitoring CACHE notifications). So I think we can close this issue.

@sferik if you find this error again please feel free to reopen.",['Mention'],False
929,3908885,Sounds good. Thanks for following up.,['Gratitude'],False
938,3810303,"Now, I realize that we updated rack-test to 0.6.1 on master, 3-2-stable, and 3-1stable.
Sorry, we miss this PR...

I'm closing this issue.
Thanks !",['Apology'],False
936,3798519,"Also spotted this, but the user argument is still missing.
`set_psql_env` should be handling this, but the rake tasks fail unless I provide an explicit user argument:

    `psql -U #{abcs[env]['username']} -f ""#{filename}"" #{abcs[env]['database']}`",['Bug'],False
936,3806968,"That's very strange, Chris, because my change only removes passing in the template as the last argument. If what you are saying is correct, db:test:prepare should not be working at all in master. Which means no one using PostgreSQL is able to run tests via the standard rake task.

Now that I think of it, however, I did only test the change as it applies to the 3-2-stable branch and not master. I will re-test against master. If something is wrong, I suspect that it's not because of the changes in this patch.",['Fixing'],False
936,3809545,"Well, by default psql uses the current OS user name if one isn't provided on the command line. Are you also running the rake tasks as a user that does not have direct access to the db? If so I'll have to check what's wrong with my environment.",['Question'],False
936,3831567,Just tested my patch against the latest master branch and (after applying https://github.com/rails/rails/pull/4910) everything seems to work just fine. I do not have a pg user that matches my username.,['URL'],False
936,3854345,"Just wondering if the suspicion that a username needs to be explicitly passed in to psql is what's keeping this pull request from being accepted.

If that's the case, the username issue is really a completely different issue and has nothing to do with the changes in this pull request. It should not be blocking this pull request, it should be in it's own ticket.",['Suggestion'],False
936,3857897,"@sskirby agreed. I've tested your patch in another environment and everything's working fine.
+1 for the pull request",['+1 (Plus One)'],False
931,1070412,SQLite 3 tests pass.,['Confirmation'],False
931,1095354,I'd like to avoid changing method signatures until Rails 4.0.  This change will break backwards compatibility with 3rd party adapters.,"['Suggestion', 'Objection']",False
931,1115044,@tenderlove should we leave this open then? or can we close?,"['Mention', 'Question']",False
931,1119560,Set up a milestone and add it?,['Question'],False
931,1119568,"Yes, we should set up a rails 4 milestone and add this.","['Suggestion', 'Confirmation']",False
931,1638469,How about changing its name to something like deprecated for rails 3-1 so people know it's going to go away? That would also minimize the confusion that @smartinez87 cites.,"['Question', 'Suggestion', 'Mention']",False
931,2334958,Milestoned @ Rails 4.0,"['Mention', 'Confirmation']",False
931,3374154,master is rails 4 now right? should this be merged?,['Question'],False
931,3376489,Yeah! Master is Rails 4.0 :heart:,"['Answer', 'Confirmation', 'Gratitude']",False
931,3776180,@smartinez87 I think it'd be good to rebase so it can be merged now :),"['Suggestion', 'Mention']",False
931,3777191,"had trouble rebasing master again, so opened a new PR #4850","['Objection', 'Bug', 'Fixing']",False
931,3782045,"closing this, since #4850 was merged",['Reject'],False
942,3800707,"I don't think we should even call the responder. We should just yield the block, as in respond_to.",['Suggestion'],False
942,3801285,"Ah yeah, you're right. Fixing that now.",['Fixing'],False
942,3801329,`retrieve_response_from_mimes` could probably return the collector and then we ask it directly if there is a response (and invoke) or fallback to the default one (with the responder).,['Suggestion'],False
942,3804100,Code has been updated.,['Answer'],False
942,3810688,"Yay, don't forget #4870 for 3-2-stable as well.",['Request'],False
935,3797518,NIce but the option name is not clear for me. Maybe skip_after_callbacks_if_halted or something like that instead?,['Suggestion'],False
935,3797566,`halted` is something internal. `:terminator` is part of the API. What about `skip_after_callbacks_if_terminated` ?,"['Suggestion', 'Question']",False
935,3797592,Sounds great.,['Confirmation'],False
935,3809525,Renamed.,['Confirmation'],False
935,3809563,"Awesome, thanks!",['Gratitude'],False
945,3825958,"Agreed it is better but if we are going to use present?, we need to require
the proper from AS.","['Confirmation', 'Answer']",False
945,3825970,Its already loaded. Have tested the test cases which is running fine.,['Answer'],False
945,3825987,Are you running the test case in isolation mode?,['Question'],False
945,3826021,Am running all the active model test cases.,['Answer'],False
945,3826050,"You need to run them in isolation in order to catch missing requires. In any case, we should just add the missing require.",['Suggestion'],False
945,3826066,will do if it is missed,['Confirmation'],False
945,3826529,"I made another pull request for this issue,   please refer #4904",['Request'],False
950,2079945,"Could you rebase your commits into one please ?
There's also a test missing :(",['Request'],False
950,3817666,"I think that this issue was fixed on 3-1-stable, 3-2-stable, and master.
I think that I should close this issue. What do you think ?

BTW, I cannot find a testcase for non english filename, and I'll send PR for it.",['Question'],False
950,3829851,"Hi ! @tanin47 
I'm closing this issue, because it seems that this issue is fixed already on 3-1-stable, 3-2-stable, master.
Please comment to this issue, if needed :-)","['Mention', 'Confirmation']",False
950,3849731,Alright :),['Answer'],False
948,3824513,/cc @jonleighton ,['Mention'],False
948,3828319,"Thanks for the patch, but this is not the right way to fix it. We need to fix the attribute accessor within AR to actually return the correct value.","['Fixing', 'Gratitude']",False
948,3829370,"Attribute accessor is working. All test are passing (with and without patch also).

You can try this example with and without my patch

``` ruby
require ""rubygems""
require ""action_view""
require ""active_record""
require ""logger""

ActiveRecord::Base.logger = Logger.new(STDOUT)
ActiveRecord::Base.establish_connection(
  :adapter => 'sqlite3', 
  :database => ':memory:')

ActiveRecord::Schema.define do
  create_table :items, :force=>true do |t|
    t.string :name
  end
end

class MySerializer
  def load(str)
    str.swapcase
  end

  def dump(str)
    str.swapcase
  end
end

class Item < ActiveRecord::Base
  serialize :name, MySerializer.new
end

@item = Item.new
@item.name = ""lowerUPPER""

puts @item.name
puts @item.attributes[""name""]

@item.save!

@saved_item = Item.last

puts @saved_item.name
puts @saved_item.attributes[""name""]

include ActionView::Helpers::FormHelper
puts text_field(:item,:name)
puts text_field(:saved_item,:name)

```

With patch

``` ruby

""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
<input id=""item_name"" name=""item[name]"" size=""30"" type=""text"" value=""LOWERupper"" />
<input id=""saved_item_name"" name=""saved_item[name]"" size=""30"" type=""text"" value=""LOWERupper"" />
```

Without patch

``` ruby
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
<input id=""item_name"" name=""item[name]"" size=""30"" type=""text"" value=""#&lt;struct ActiveRecord::AttributeMethods::Serialization::Attribute coder=#&lt;MySerializer:0x0000000187dad8&gt;, value=&quot;lowerUPPER&quot;, state=:unserialized&gt;"" />
<input id=""saved_item_name"" name=""saved_item[name]"" size=""30"" type=""text"" value=""#&lt;struct ActiveRecord::AttributeMethods::Serialization::Attribute coder=#&lt;MySerializer:0x0000000187dad8&gt;, value=&quot;lowerUPPER&quot;, state=:unserialized&gt;"" />
```

Maybe I'm not getting it. Can you tell me where I'm wrong thinking about this problem @jonleighton? Attribute reader is returning unserialized value. But in form helpers serialized values are used. That's how this was working in Rails 3.1.3.",['Code'],False
948,3829442,"It's the `_before_type_cast` accessor that is broken, i.e. `@saved_item.name_before_type_cast`","['Bug', 'Answer', 'Code']",False
948,3829518,So ```@saved_item.name_before_type_cast``` should be ```LOWERupper``` in my example @jonleighton ?,['Mention'],False
948,3836776,We noticed this bug on v3.2.1. It's definitely a regression from 3.1.1.,"['Bug', 'Confirmation']",False
948,3842266,@listrophy no. 3.1.3 is working still.,['Mention'],False
947,3827936,Commits Squashed to one.,['Answer'],False
947,4795780,@josevalim could you please review / merge?,['Mention'],False
946,2309566,+1 .. drove me nuts for an hour!!,['+1 (Plus One)'],False
946,2309746,.. and is a serious bug which leads to not beeing able to delete any objects when using auth headers,['Bug'],False
946,3827727,hey guys ... where is the problem to merge this ???,['Question'],False
946,4098792,This should have some test included but I can verify the code in this pull requests works... but then again a similar bug (with #build) which also has a test accompanying it has yet to be merged...,['Bug'],False
946,4825229,ActiveResource has moved to you own repository. I'm closing this. Please open a new pull request in the [ActiveResource](https://github.com/rails/activeresource) repository if you want.,['URL'],False
955,3831091,Does this fix #2575?,['Question'],False
955,3831245,It seems that this problem is same one ;-),['Confirmation'],False
955,3831376,@ihid Do you think about this PR ? Will we have any problem ? (or should close #2575 too ?),['Mention'],False
955,3831995,"I've got no issue with this PR at all. It's good. Thanks! :)
I'll check later to check it fixes my issue. I'll either mark the issue as closed or send a further PR that fixes that as well.  ","['Gratitude', 'Accept']",False
955,3905611,Great update guys - wonderful to see this fixed :-) Is it too much to ask to have it posted here when it is inserted into core?,"['Gratitude', 'Question']",False
955,3906603,"Oh, by the way, with core, I mean stable release","['Confirmation', 'Answer', 'Suggestion']",False
955,3910687,"I closed the other ticket and then realised I still had a monkeypatch there that was causing it to work regardless of your patch. I've just spent half an hour trying to get master branch working on my codebase and I'm giving up. I get so many dependancies failing in my Gemfile.

I'm pretty certain that what you've got there will fix it, so I'm just going to leave the other ticket closed and I'll keep an eye on it. Thanks, @kennyj.","['Mention', 'Confirmation', 'Fixing']",False
955,3910707,"@kennyj, sorry - could you put a PR for 3-2-stable too please so I can get rid of my monkey-patch? :)",['Mention'],False
955,4296191,Sorry to jump on the end of this ticket but.. any idea why this would cause resolve/refinerycms#1383 ? ,['Question'],False
958,3833589,"Seems good, but I'm a little annoyed because this value is OS (and possibly filesystem) specific.  I'm annoyed that Ruby doesn't provide an API to `pathconf` so that we can determine the correct length.  Without that value, we're just going to keep chasing numbers until this value is set to the lowest common denominator. :(",['Objection'],False
958,3838420,I agree; it does feel crufty. Am open to a better solution if available...,"['Accept', 'Confirmation']",False
958,4074602,"Just checked on Linux

```
2.6.38-13-generic #54-Ubuntu SMP Tue Jan 3 13:38:12 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux
Natty
```

in my case
On Encrypted FS(Cryptfs):

```
test will fail on filename size >= 144
And will pass on FILENAME_MAX_SIZE = 143
```

Ubuntu community says that is known filesize bug (on cryptfs) and filesize on current dir underlying fs cannot be determined by syscalls from ruby.
This is related to @tenderlove conversation with Motohiro KOSAKI & Yui NARUSE
on https://bugs.ruby-lang.org/issues/5974

On Ext4 unencrypted:

```
test will pass on 230 as expected
```


On FreeBSD UFS unencrypted tests passed on FILENAME_MAX_SIZE = 230 

What about cryptfs on Linux - current FILENAME_MAX_SIZE value will make cache files with long names(usually escaped utf strings) unusable before it hooked and truncated by rails.cache api calls

* Maybe it will be useful to make a hash of limits + fs byte overheads for each FS. But IMO this will be very ugly :)
* Or get a lowest limit on filename size - 143 for ecryptfs and use it for FILENAME_MAX_SIZE - this is ugly too IMO :(

In my particular case - i only can use a constant override to decrease FILENAME_MAX_SIZE to use a cache on dev and prod machines with cryptfs :( Sad




",['Code'],False
958,15665329,"Just ran into this issue on 3.2.11 and ended up overriding the constant to 223. I probably won't submit a pull request to change it in master because 228 should be good enough for most cases, and because we should find a more robust solution as @tenderlove suggests. Maybe catching the ENAMETOOLONG and retrying with a shorter max length, but that may break existing keys.

That said, I'll at least document why I went with 223 instead of 228:
Tempfile adds `""#{t}-#{$$}-#{rand(0x100000000).to_s(36)}-#{n}.lock""` to the end of the filename.
`t` is the date; always 8 chars.
`$$` is the pid; on linux this defaults to a max of 32768, but can be configured to a max of 4.2million or 7 chars.
`rand.to_s` base 36 encode of a 32bit number; max of 7 chars
`n` is the retry count; should never happen, but lets say it could get up to 2 digits before the universe explodes.
That adds up to 32 characters, and 255 - 32 = 223. 

So, 228 should work fine in most real world cases where the max pid is 5 digits long and there are no retries and the max filename length is 255.",['Bug'],False
959,3292205,"Any of the Rails team had a chance to look at this. I added in some tests. Thoughts, comments?  Feedback welcome. ",['Question'],False
959,3292314," i dig it. only thought is are you intentionally not saying ""bundle exec rake db:migrate""?",['Question'],False
959,3292856,"Great suggestion, i'll add it in!","['Gratitude', 'Accept', 'Confirmation']",False
959,3293603,I dig it.  +1,['+1 (Plus One)'],False
959,3294425,+1 makes sense.,['+1 (Plus One)'],False
959,3303225,This will be quite helpful. :+1:,['+1 (Plus One)'],False
959,3325395,+1,['+1 (Plus One)'],False
959,3589175,cool +1,['+1 (Plus One)'],False
959,3815698,+1,['+1 (Plus One)'],False
959,3832106,"@josevalim hate to bug on this one, but can you merge this in or give me some comments? The sooner no one asks me why they're getting a NoMethodError when they haven't migrated the database, the better. If there is someone else that needs to join the conversation let me know, and we can get them in here.","['Mention', 'Request']",False
959,3832192,/cc @tenderlove ,['Mention'],False
959,3833551,"I'm uneasy about this change.  Having the exception handling code checking the migrator does not sound awesome (especially if this is happening in production).  I'm -1 on this change, but I'm willing to hear other opinions. /cc @jonleighton ","['Objection', 'Mention']",False
959,3834163,"I am also a +1 for this, but I understand @tenderlove's concern. How about adding a `!Rails.env.production? &&` clause to each of those 'if' statements checking `if ActiveRecord::Migrator.needs_migration?`. That might address everyone's concerns.","['Suggestion', 'Mention']",False
959,3836554,"@tenderlove & @jonleighton I'm very open to implementation suggestions. Not performing this check in production on _every_ error makes sense. We could add a environment check per @scottwb's suggestion, or make it a config option. Perhaps coming up with a standard way to add debugging suggestions to development error messages could make this pattern more sustainable, but i'm not exactly sure what that would look like. Let me know what you think.","['Suggestion', 'Mention']",False
959,3840553,"This would save me some pain.
+1 and agree we want to be able to enable this for dev only.",['+1 (Plus One)'],False
959,3842993,Making this a `config` option is a good idea. This way I can enable it not only in development environment but also in my other custom environments that resemble development.,"['Confirmation', 'Accept']",False
959,3844555,"I think the idea is good but we shouldn't solve it by changing Active Record. For a start, picking up on specific errors is always going to leave other errors uncaught that were also caused by missing migrations.

I think we should make the feature configurable, and have it work like so by default:

* Development: raise an error on page load if there are pending migrations
* Test: display a warning when test is run if there are pending migrations
* Production: no change",['Suggestion'],False
959,3851336,"@jonleighton I think that addresses everyones concerns and accomplishes everything I want. I can go ahead and rip out the ActiveRecord bits from this pull request and just leave in the migration checking code. 

Would you prefer a separate  pull request for warning/error messages or just amending this one? I'm thinking by default we can have it off, and to turn it on you can do something like this to development/test.rb

```ruby
config.migration_pending = :error
config.migration_pending = :warn
```
","['Question', 'Mention']",False
959,3851478,"As just discussed with @waseem, one could apply a similar approach to the [following based on EpicFail](https://github.com/bsodmike/EpicFail/blob/master/lib/epic_fail/exceptions/rack.rb):

```ruby
module EpicFail
  module Exceptions
    class Rack
      #...
      
      def notify_exception(e, env)
        # Exception: backtrace  exception  message
        EpicFail::Failure.create!(:exception => ""#{e.class}"", :message => ""#{e.message}"", :backtrace => ""#{e.backtrace}"")
      end
    end
  end
end
```

and perform

```ruby
ActiveRecord::Migrator.current_version != (ActiveRecord::Migrator.migrations(migrations_paths).last.try(:version)||0)
```

to detect a pending migration.  `e.message` can be updated accordingly and presented in the rendered error.  All of the above as per @jonleighton still apply.  Thoughts?",['Code'],False
959,3897192,"

Setting up the configuration is straight forward: 

active_record/lib/active_record/base.rb

```ruby

##
# :singleton-method:
# Specify how to notify the user when pending migrations are detected
# use :warn, :error, or :none
cattr_accessor :on_pending_migration , :instance_writer => false
@@on_pending_migration = :none

```


Then actually raising/warning the message is straightforward

```ruby

# Notifies the developer if there are pending migrations
# the type of notification can be configured. Example:
#
#   config.active_record.on_pending_migration = :error
def notify_pending_migrations
  case ActiveRecord::Base.on_pending_migration
  when :error
    raise ActiveRecordError::PendingMigration, ""There are pending migrations run 'bundle exec rake db:migrate' to resolve them"" if ActiveRecord::Migrator.needs_migration?
  when :warn
    warn ""There are pending migrations run 'bundle exec rake db:migrate' to resolve them"" if ActiveRecord::Migrator.needs_migration?
  end
end

```


The thing I'm unsure of is where to call `notify_pending_migrations`. Since migrations are an ActiveRecord specific concept, I would like to keep the code within AR (not rely on a controller/view/etc. to relay the message). It also needs to work in the console and when running on a server. If we don't check _every_ round trip to the server we can't be sure that new migrations haven't been introduced. So we could hook into something like  `ActiveRecord::Base.table_name` that gets called on each round trip to the DB, though that would be a lot of redundant checks. Perhaps there is a better place to do the check?",['Code'],False
959,5519053,Any thoughts on this @tenderlove / @jonleighton?,['Mention'],False
959,5761141,"I like the idea a lot but I don't like to have to wait for the server to start and browse the app to get the error, It'd be better to throw the error when the server is starting, something like this:

    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate'

Which is what kinda happens with Bundler:

    $ rails server
    Could not find gem 'meh' in the gems available on this machine.
    Try running `bundle install`.

I could work on that patch. What do you guys think?","['Suggestion', 'Bug']",False
959,5761213,"I think we can at least get in the `needs_migration?` helper. Then people can proceed to check on initialization, add a middleware in development and so forth.","['Suggestion', 'Request']",False
959,5770170,"I'd still like this when the server is starting, but in a second thought, what if the user rolls back? the schema wouldn't be up to date and the server wouldn't start, that might not be ok, so we could add an option to the configuration (and configure in config/development.rb), something like this:
    
    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate' or use config.whatever_the_name_config_option_is = false

There's another thing, `needs_migration?` would be better to me if it were `pending_migrations?`","['Suggestion', 'Bug']",False
959,5771108,"`pending_migrations?` is fine. I don't we should check it on startup by default. You gave one possible example for it failing, but there are other occasions as well (like progressive updates in production).",['Accept'],False
959,5771575,"@josevalim I think this is a helpful thing in development only, in production?, not all, and yeah, it shouldn't be enabled by default either, even on development mode, I'm pretty sure there are people out there with a git post-commit hook or something like that checking for pending migrations already, so we could add a commented out config option in config/development.rb:

    # Enable pending migrations checking on startup (default is false)
    # config.check_pending_migrations_on_startup = true

    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate' or set config.check_pending_migrations_on_startup to false

What do you think?","['Suggestion', 'Mention']",False
959,6232858,Closed in favor of #6665,['Reject'],False
962,2438341,"Hrm, I am unsure if this the concern of to_json? Shouldn't escape_json do this instead?","['Suggestion', 'Question']",False
962,2438618,"Where may I find escape_json ?

PS. I do think this is a concern of to_json. See the definition of `string` at http://json.org/ and see also http://noteslog.com/post/the-solidus-issue/
 
> The reason for allowing the slash to be escaped is for making it safe to embed the JSON substring `</script>` in HTML.
",['Question'],False
962,2438686,"I'm thinking maybe it should have `ActiveSupport.escape_script_tags_in_json` (similar to `ActiveSupport.escape_html_entities_in_json`)

Set by default to +true+

And when +true+ only escape `</script>` strings, to avoid too much unnecessary escaping.

",['Suggestion'],False
962,2438911,"Sorry, it is json_escape (and not escape_json):

https://github.com/rails/rails/blob/aa11f7332c1abadea23576805985f402298273f9/activesupport/lib/active_support/core_ext/string/output_safety.rb#L53


*
Jos Valim
www.plataformatec.com.br
Founder and Lead Developer
*","['Apology', 'URL']",False
962,2439298,"Don't like that at all! The output is not valid JSON anymore, which is a waste. You'd have to parse it to JSON again on the client. Better to simply send valid JSON.","['Objection', 'Answer']",False
962,2439302,"Hrm, right. Ok, I am leaving this open for more feedback then. /cc @jeremy","['Confirmation', 'Mention', 'Request']",False
962,3451822,"I agree with @lawrencepit that this would be useful!  It's a common pattern for backbone.js apps to embed json directly in a &lt;script&gt; tag (in order to avoid an extra round trip to load a model).  I'm agnostic as to whether escaping of ""&lt;/script&gt;"" -> ""&lt;\/script&gt;"" should happen in to_json (since it doesn't effect json used in other context except &lt;script&gt; tags), but it sure would be nice if there was a helper for it (javascript_json_escape?)","['Confirmation', 'Mention']",False
962,3836181,":up: Any new suggestions how to deal with that problem? `escape_script_tags_in_json` works fine, but it cost too much...",['Question'],False
962,5248007,"The whole javascript / JSON escaping situation seems like a mess to me.

We have `json_escape` which looks useful but definitely isn't and `escape_javascript` which while having a better use case is named inconsistently and doesn't cover escaping JSON. Not to mention the `j` aliasing!

I also disagree with @lawrencepit's solution as `{""name"":""<script>alert('foo');</script>""}` is perfectly valid JSON, the issue being solved here is with the browser and so belongs in a view helper.

We need some joined up thinking and consider this and the following issues as a whole

* https://github.com/rails/rails/pull/3578
* https://github.com/rails/rails/pull/5127",['Objection'],False
962,5257905,"@bestie not sure what you're disagreeing with. The string you quote is valid JSON, and so is `<script>{""name"":""<script>alert('foo');<\/script>""}`.

Sometimes you have to be practical. If you push this to a view helper it will use *a lot* more resources. My original solution works. And it conforms to the JSON specs. Everybody happy I'd say.","['Answer', 'Mention']",False
962,5292491,"@lawrencepit I'm disagreeing with `to_json` changing a valid JSON string for the benefit of the browser, it's simply the wrong place for it to happen.

I also don't take your point on performance, a call to `gsub` in `to_json` equivalent to a `gsub` in a helper.",['Mention'],False
962,5296994,"I disagree it's in the wrong place. It follows the JSON spec. Read it. It specifically mentions the solidus in the string form. If you escape the solidus it's still perfectly valid JSON, just more perfect.","['Objection', 'Answer', 'Reject']",False
962,5646755,":thumbsup: @lawrencepit  it doesn't break the whole JSON string but makes it safer for use case above.
But, IMHO, escaping HTML is more important here.   config.active_support.escape_html_entities_in_json = true
 is not working for
```
 render json: {x:""<script>alert(1)</script>""}
```
",['Mention'],False
962,5647532,"I'm also gonna give a :thumbsup: to @lawrencepit on this one. After reading the JSON spec closely I realised the string with the escaped solidus is equivalent, so escaping it is optional.

To express in Ruby
```ruby
{""key"" => ""<script>something</script>""}.to_json == {""key"" => ""<script>something<\/script>""}.to_json
```
and also
```ruby
JSON.parse(""{\""key\"":\""<script>something</script>\""}"") == JSON.parse(""{\""key\"":\""<script>something<\/script>\""}"")
```
both producing
```ruby
{""key""=>""<script>something</script>""}
```

My issue was that I thought the suggestion was to make a real change to JSON encoding, in reality this is completely in-line with the JSON spec, implementing an optional extra, and makes putting JSON into the browser way more convenient.

I still think we have a problem escaping JSON in Rails, but this is going to be convenient for a lot people and is easy innocuous change to make.

@josevalim was your issue the same as mine? Maybe you will change your mind also?",['Code'],False
962,6495175,"Oh, similar issue here.

We can close this issue since we merged making escape_html_entities_in_json to true by default.
/cc @josevalim ","['Accept', 'Mention']",False
962,8582828,"> We can close this issue since we merged making escape_html_entities_in_json to true by default.

Sounds good. If anyone can demonstrate this is still a problem after that change, let me know and I'll re-open. Thanks.",['Accept'],False
972,3839787,"@carlosantoniodasilva @guilleiguaran 

I added this testcase for fixing https://github.com/rails/rails/issues/4749.
I'm confusing... Why should we use 3-2-stable when using --edge option ?

related to https://github.com/rails/rails/pull/4912","['Mention', 'Question', 'Objection', 'URL']",False
972,3840051,"@kennyj hm yeah, I didn't check it further, just added the test fix. Seems like the `:branch` shouldn't really exist, let me check it better.","['Mention', '+1 (Plus One)', 'Suggestion']",False
972,3840062,"This confusing, generating a new app passing --edge option using 3.2.x also generate apps with conflicts about dependencies.","['Objection', 'Mention']",False
972,3840157,"Yeah, but with the `:branch` option:

```ruby
gem 'sass-rails',   :git => 'git://github.com/rails/sass-rails.git',   :branch => '3-2-stable'
gem 'coffee-rails', :git => 'git://github.com/rails/coffee-rails.git', :branch => '3-2-stable'
```

I get the same error as result:

```
Bundler could not find compatible versions for gem ""railties"":
  In Gemfile:
    sass-rails (>= 0) ruby depends on
      railties (~> 3.2.0) ruby

    rails (>= 0) ruby depends on
      railties (4.0.0.beta)
```

If I remove the `:branch`, it bundles successfully.","['Code', 'Fixing', 'URL']",False
972,3840245,I get same result when I was tackling #4749.,"['Confirmation', 'Answer']",False
972,3841636,"BTW, My confirmation way is https://github.com/kennyj/rails/commit/8bf3c6d8165fa6442b3ae2f86a955c82d0abf99b#commitcomment-921532",['URL'],False
972,3841691,"You're right guys, my commit needs to be reverted","['Confirmation', 'Accept']",False
1035,3396429,"IMO it is not a good idea to call OrderedHash a Hash, i hope that some time in the future Hash in Ruby will become unordered again, and ordered hash will be called OrderedHash.

http://bugs.ruby-lang.org/issues/5123",['Objection'],False
1035,3396434,nice - should we deprecate the constructor/class too so it can eventually be removed?,['Question'],False
1035,3396522,"No, but i think that it is a bad idea to call ordered hash a hash, not because it can be removed, but because it is good to document in the code whether the ordering is used.

In my opinion it was a bad idea in the first place to specify that Hash in Ruby 1.9 is ordered, i think it shouldn't be.",['Objection'],False
1035,3875575,"OrderedHash serializes as an omap in yaml so there's still valid functionality there.

Additionally, deprecating it is just giving busy work to users who upgrade, there's no harm in having a few lines of code lying around to avoid having thousands of people getting thousands of error messages.

We could take another pull request which removed any remaining unnecessary uses of OrderedHash internally, but there's no need to do this.",['Suggestion'],False
1030,3838721,Whoops. Sorry. Made a mess. Closing this out in favor of this pull request: https://github.com/rails/rails/pull/4916,['URL'],False
529,3638801,/cc @tenderlove ,['Mention'],False
529,3691905,@tenderlove Could you glance at the related change #3457?,['Request'],False
1034,3874346,"If we are doing this, it shouldnt be a constant, but a Rails accessor. And please send feature requests to master. Thanks.","['Confirmation', 'Request']",False
89,5518881,Any thoughts on this @tenderlove / @jonleighton?,"['Mention', 'Question']",False
89,6453591,I am curious too. Seems like a nifty feature.,['Confirmation'],False
89,6465826,Added code and tests for this feature. Please comment! Thanks.,['Request'],False
89,6465897,"I think we should be able not to have a proc, but a ""normal"" value too.

    class_attribute :bar, default: 'foo'",['Suggestion'],False
89,6465939,I realize that I went slightly against my own spec – I'll update it such that the proc is passed the attribute name.,"['Fixing', 'Confirmation']",False
89,6474136,"Rather than add an option here, you can override the reader method in the abstract superclass:

```ruby
class Abstract
  class_attribute :bar

  def self.bar
    raise NotImplementedError
  end
end

class Subclass < Abstract
  self.bar = 'now defined'
end
```","['Code', 'Suggestion']",False
89,6494703,"@jeremy this is true, but that does kind of grapple against the declarative nature of class_attribute. By allowing for a callable thing to be passed as an option, it keeps the logic localized.",['Mention'],False
89,6494759,It adds complexity to an otherwise very simple declaration. Ruby doesn't have defaults on `attr_accessor` either and we get along ok :),"['Answer', 'Objection', 'Suggestion']",False
285,3690313,"I like it. It will reduce the mistakes related to join tables a lot. If other core team members agree with this patch, we could even add a generator shortcut like: `rails g migration join_table_users_and_labels` (yes, I am a lazy bastard)","['Suggestion', 'Confirmation', 'Accept', 'Answer']",False
285,3691368,"Seems easy to forget that there's a special way to create join tables, though.

Could we solve the original problem by just populating timestamps on join tables, too?","['Suggestion', 'Question']",False
285,3691382,"@jeremy I am also fine with populating timestamps on join tables, although it seems @jonleighton doesn't like the idea much.",['Mention'],False
285,3691694,"I'm not a fan of more complexity there either, but it feels worth being able to use a ""stock"" `create_table` as a join table.

Less for people to think about or look up in docs, and it's interchangeable with a `has_many :through` without migrating.","['Suggestion', 'Objection']",False
818,4860830,"your PR needs a rebase!


Thanks :-)","['Suggestion', 'Gratitude', 'Objection']",False
818,4868185,Voilà !,"['Answer', 'Non-english']",False
818,4920171,"thanks for rebasing. Let me get someone to review this :-) 

Cheers, 
Arun

cc/ @spastorino can you look this PR ?",['Gratitude'],False
818,5544331,@jeremy please take a look in this pull request and also see if [this comment](https://github.com/rails/rails/pull/4254/files#L0R442) is still relevant,"['Mention', 'Request']",False
818,5616495,"Ok, looking good to me! Thanks for your patience, @alexeymuranov  :)","['Mention', 'Confirmation', 'Gratitude']",False
818,5619839,yay!,['Gratitude'],False
647,3692683,Why are you resubmitting the same PR once every few days?? #4600 #4622 #4638,['Question'],False
647,3692720,"@vijaydev I am sorry but there was some problem with my fork so had to delete them, reopen the PR.",['Mention'],False
647,3965292,Why is this change needed? ,['Question'],False
647,3967069,"@vijaydev  as there is already a ````logger```` method defined which returns ````@target.logger```` , so instead of calling ````@target.logger ```` again, it makes sense to use the ````logger```` method. ",['Mention'],False
647,3977596,"@railsaholic, u r right!!","['Confirmation', 'Mention']",False
647,4546947,@josevalim  Is it good enough?  Thanks,"['Question', 'Mention']",False
647,4547125,"Actually this only adds one more method call without any profit.
Plus if `logger` method is redefined by user, but `logger?` is not for some reason - this can lead to bugs as checked and returned objects can be different","['Suggestion', 'Answer', 'Bug']",False
647,5438847,"@railsaholic thank you for your patch, but I believe the method is clearer by using `@target.logger` since it already tests for `@target.respond_to?(:logger)` in the same line.",['Mention'],False
821,3671649,"@rafaelfranca Hey, we don't allow changelogs to be edited in docrails.",['Mention'],False
821,3671696,"Yeah, you are right. Sorry, I thought that was a typo in a Guide",['Apology'],False
822,3671731,Why use a symbol instead of just passing the separator as a string?,['Question'],False
822,3680990,"It just looks aesthetically acceptable to me.
If you think it's useless, I'll close this pull request.",['Accept'],False
822,3682692,@josevalim wdyt? ,['Mention'],False
822,3682873,Thanks but I will close this since I checked with the others and they are :-1: on it as well.,"['Gratitude', 'Reject']",False
820,3669834,"Using `:rubygems` in the Gemfile means that it's actually accessing http://rubygems.org instead of https.  I'd like to propose that we revert this change as I think https is a better default.  Thoughts?


FYI - Some time back I had submitted a pull request to bundler to change the default usage of `:rubygems` to be https but it was not merged due to SemVer.  More info here: https://github.com/carlhuda/bundler/pull/1585",['Suggestion'],False
820,3670624,There's honestly no benefit to using HTTPS when requesting rubygems. I don't see why the argument is made one way or another here.,['Objection'],False
824,3673204,"Rather than disable the GC, why don't we just close the tempfile after performing the mv?  It seems like we could just flush the tempfile, move, then close.

/cc @jeremy ","['Suggestion', 'Answer']",False
824,5518302,Any thoughts on this @tenderlove?,"['Mention', 'Question', 'Fixing']",False
824,5520309,"Closing the tempfile shouldn't expose it to possible GC - wtf?

/blame @NZKoz ",['Objection'],False
824,5520483,@jeremy tempfiles are rm'd from the filesystem [via a finalizer](https://github.com/ruby/ruby/blob/trunk/lib/tempfile.rb#L133-134). /play tmyk,"['Mention', 'Answer']",False
824,5520532,"Yeah, but there's still a live reference to the Tempfile object. Closing the file descriptor shouldn't cause it to be eligible for GC.","['Objection', 'Bug', 'Answer']",False
824,5520816,"You're right.  The only thing I can think is that somehow [`check_name` somehow collides with the actual tempfile name](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/file/atomic.rb#L35-38), or somehow the FS is cleaning up the temp file dir.  Either way, I don't see how GC could have anything to do with this.","['Suggestion', 'Confirmation', 'Answer']",False
824,5522448,"Yeah, I fail to see how GC could be causing this,  sticking GC.start in the method didn't trigger it.

seems more likely that @tenderlove's check_name theory is the culprit.","['Suggestion', 'Mention']",False
824,5522492,I'm closing this until we have a repro.  Thanks!,"['Confirmation', 'Reject']",False
831,3667844,"Is there any failing test so we can check with that?? 

",['Question'],False
831,3677403,"No I can not, because apparently it works fine.

I am not sure why it was not working for me, nor am I sure why it does work since Date#advance is not defined in Time::Calculations and none of the requires at the top of Time::Calculations add it.

    rails[master]/ › irb
    >> require 'active_support/duration'
    => true
    >> require 'active_support/core_ext/time/zones'
    => true
    >> require 'active_support/core_ext/time/conversions'
    => true
    >> Date.new.advance minutes: 1
    NoMethodError: undefined method `advance' for #<Date: -4712-01-01 (-1/2,0,2299161)>
        from (irb):4
        from /home/caleb/.rvm/rubies/ruby-1.9.2-p290/bin/irb:16:in `<main>'
    >> Time.new.to_date.advance minutes: 1
    NoMethodError: undefined method `advance' for #<Date: 2012-01-26 (4911905/2,0,2299161)>
            from (irb):5
            from /home/caleb/.rvm/rubies/ruby-1.9.2-p290/bin/irb:16:in `<main>'

But...

    rails[master]/ › irb
    >> require 'active_support/core_ext/time/calculations'
    => true
    >> Date.new.advance minutes: 1
    => #<Date: -4712-01-01 (-1/2,0,2299161)>

So it clearly works somehow.  I'm just not sure where active_support/core_ext/date/calculations is being required, or more specifically where Date#advance is being defined.


",['Fixing'],False
829,3674757,This breaks shared_examples_for in rspec so it'd be awesome if this could be backported to 3.2 as well.,['Suggestion'],False
826,3673908,"Thanks for the patch. I've added some comments. Please address them and file a new PR against master, not 3-2-stable.",['Request'],False
826,3673919,Another comment: new applications should be generated with `config.active_record.dependent_restrict_raises = false`.,['Suggestion'],False
826,3673926,Please also specify in the documentation that an error will be added to the model.,"['Suggestion', 'Request']",False
826,3673928,"Also, needs a CHANGELOG entry.",['Suggestion'],False
828,3669873,Bad Pull Request. Please fix this. Or create new one.,['Objection'],False
828,3669884,Yep. Definitely a bad one. Sorry about that.,['Apology'],False
833,3396184,"+1 @chinshr and I recently came across this issue at work, would be good to see this pulled.","['+1 (Plus One)', 'Mention']",False
833,3667867,Can you please do a rebase with your PR. I think some of the change are already there.,['Request'],False
833,3680756,@arunagw I rebased but the issue is still present.,"['Bug', 'Mention']",False
833,4017417,cc/ @tenderlove ,['Mention'],False
833,4024906,"Can we do this test without an `instance_variable_set`?  I believe the logger could be nil, but surely we should test the public API that causes it to be nil.","['Request', 'Question']",False
833,4390245,"@pwim seems your changes is already done here b5c939dcb3979901fc31f8c79a4fde58999052e8

Can you please fix the test and fix this PR??

Cheers, 
Arun","['Request', 'Fixing']",False
833,4406745,"Yes, the changes are there so this PR is no longer necessary.","['Confirmation', 'Answer']",False
833,4409652,@pwim Cool thanks :-),"['Gratitude', 'Mention']",False
843,3687199,"I found this

```
./railties/guides/source/configuring.textile:* +config.colorize_logging+ specifies whether or not to use ANSI color codes when logging information. Defaults to true.
```",['Code'],False
838,3684839,+1,['+1 (Plus One)'],False
838,3684852,+1,['+1 (Plus One)'],False
838,3684963,+1,['+1 (Plus One)'],False
838,3684975,+1,['+1 (Plus One)'],False
838,3685044,+1,['+1 (Plus One)'],False
838,5487327,"The tests all pass;  Though should the following lines `Time.now.to_f` be changed to `Time.now.to_i` ?

cc @tenderlove ",['Mention'],False
838,5493358,I don't think we need to change the `Time.now` line.,['Reject'],False
846,3696474,"Umm... Thanks, again!",['Gratitude'],False
849,2188173,cc @spastorino,['Mention'],False
849,2188174,cc @josevalim,['Mention'],False
849,3702780,"This patch breaks mswin32 ruby. Because mswin32 version of ruby installed rake.bat instead of rake with shebang line and rake.bat is bat file (special type of windows shell script) embeded ruby script in it.
The patch makes re-launch command line as 'ruby.exe rake.bat assets:precompile'. Then ruby will read bat file directly and makes error : PATH/rake.bat:1: syntax error, unexpected tIDENTIFIER, expecting $end
Here is fixed version of the patch.   https://gist.github.com/1695503

I wonder if you pull the patch, thanks.",['Bug'],False
849,3702853,@arton please provide a PR so everyone can follow the discussion,['Mention'],False
849,3703025,"@spastorino Oh, sorry. I'll try it.",['Mention'],False
848,3700412,Way easier to read :) :+1:,['+1 (Plus One)'],False
848,3700816,:+1:,['+1 (Plus One)'],False
845,3543368,Thanks for the pull. I am in general not a fan of overriding `to_s`. But let's see what other core members think about it. /cc @tenderlove @jonleighton @fxn ,"['Gratitude', 'Suggestion', 'Mention']",False
845,3545690,"I agree with @josevalim; `render` is domain specific terminology, whereas `to_s` is not. If these classes were public then maybe I would be persuaded otherwise, but I think we are agreed that they should remain private, hence there is no great advantage in making it easier for people to use in their erb files.","['Mention', 'Accept', 'Confirmation']",False
845,3547932,":-1: to change `render` to `to_s`, for the same reasons that @jonleighton. But I liked the others changes.","['Mention', 'Suggestion', 'Objection']",False
845,3694975,"I believe the most important changes were already applied by @rafaelfranca's pull request, so this issue could be closed.","['Mention', 'Reject']",False
844,3694939,"Awesome, this feature is a lot more useful this way, great work :+1:","['Gratitude', '+1 (Plus One)']",False
844,3698612,:+1: Fantastic work @Manoj! Looking forward to seeing this merged! /cc @jonleighton ,['+1 (Plus One)'],False
844,3699560,"Added some more comments, thanks.",['Gratitude'],False
844,3707470,@asanghi @carlosantoniodasilva @NoICE Thank you all for your input. :),"['Mention', 'Gratitude']",False
844,3707472,"@jonleighton Thanks for the comments, I have addressed the suggested modifications. Please comment. :)","['Mention', 'Gratitude']",False
844,3707902,I'd simplified how the error message is defined [15154c0](https://github.com/pacoguzman/rails/commit/15154c0d8c656b664fb0d387951a5bd62b0a9da7),"['URL', 'Bug']",False
844,3722339,@pacoguzman thx for the refactoring :),"['Mention', 'Gratitude']",False
844,3729275,added some more comments. please also pull in @pacoguzman's refactorings.,"['Mention', 'Request']",False
844,3735550,"@jonleighton addressed the suggested improvements, also included @pacoguzman's refactorings. :)",['Mention'],False
844,3739478,"@jonleighton Any chance we can get this ""dont raise an exception"" feature backported to Rails 3.2.x ? Or has that boat has totally sailed? 

There won't be any deprecation warning in 3.2 of course but at least we'll be able to use the feature by using the configuration option. What do you think?",['Question'],False
844,3744166,@asanghi I think the ship has sailed I'm afraid - we can't add more features to 3.2 now it has been released.,"['Answer', 'Mention']",False
844,4032150,"I'm not sure if this is the right place to ask, but don't forget to document `:restrict` here: http://guides.rubyonrails.org/association_basics.html

Thanks, looking forward to using this feature.",['URL'],False
844,4032359,"@jaredbeck done .. committed to docrails https://github.com/lifo/docrails/commit/f49ec92866f6d8f27617b5723bff99ac0f7ca92f
/cc @vijaydev ",['Mention'],False
844,7564210,I really don't like this global setting. Let's push this down to where it's being defined and go explicit. So have dependent: :restrict_with_exception and :restrict_with_validation or something like that.,['Suggestion'],False
844,10632543,"If I try to delete associated model with nested attributes will it work correctly? I think that parent model won't hold error messages so. I don't see tests for this case, so I see that it won't work as it expected",['Question'],False
856,3707987,"this part already merged with given commit 
https://github.com/rails/rails/commit/e89a7f5ceeadc7b7d654c82b730d6340176e5a99

closing.",['URL'],False
853,1126561,"Are you sure this would work as intended? IIRC, Rails stores (date)times in UTC. My system runs in CEST (UTC+2), the application's time zone is set to 'Berlin' (also CEST/UTC+2) but the values are stored as UTC.

I have:
TimeEntry.create!(:date => '01.05.2011', :starts_at => '09:00', :ends_at => '19:00')

Querying this directly via connection.select_value gives me 2011-05-01 07:00:00. If I use the ActiveRecord object in stead, I'm getting Sun, 01 May 2011 09:00:00 CEST +02:00.

Note that this could also be because my PostgreSQL server is configured this way – it's one of my first PG projects. :-) (Yes, I've seen that your patch is for MySQL – but the way Rails stores datetimes with regard to time zones is the same across databases, right?) But if I'm right, your patch would probably have to be adapted to ensure that the time zone's always UTC. If I'm wrong, don't mind me. :-)",['Question'],False
853,1127086,"Hi, clemens. I am sorry, but I don't get what you are trying to say or why  are you talking about PostgreSQL. This patch is about getting useful values from `UNIX_TIMESTAMP` or other MySQL functions, which rely on the setting of  time zone of the MySQL RDBMS (`CURRENT_TIMESTAMP()`, `CURRENT_TIME()`, `CURRENT_DATE()`, and `FROM_UNIXTIME()`). 

As I wrote in the first post, the setting of the time zone of the MySQL RDBMS is usually `SYSTEM`, which means, that the time zone is set to whatever the system administrator decided, which will usually be the local time zone  of the place, where the system physically resides.

You have correctly pointed out, that the values stored by Rails in `datetime` columns are usually in `UTC`.  What you get if you query (from Rails app.) the `UNIX_TIMESTAMP` of any such value?  (Sidenote: `UNIX_TIMESTAMP` function returns an integer value, so no time-related conversion in Rails takes place.) Now is the answer ""that depens, probably something incorrect, because the `UTC` value was interpreted (in MySQL) as a value in `SYSTEM` time zone, which is ... (_something nobody cares, because you are using some hosting abroad_)"".  My intend is to use this patch to set the time zone of my sessions to `UTC` to always get proper values from functions like `UNIX_TIMESTAMP` applied to `datetime` type of values.  If someone is using `config.active_record.default_timezone = :local`, then he'll probably not set his sessions time zone to `UTC`.","['Code', 'Objection']",False
853,2335034,"I recommend you use a datetime column and the UTC_TIMESTAMP() function instead.

Otherwise, this is such a niche case that I don't think it qualifies for inclusion in main database.yml config. It's something you can set yourself in a config/initializer, though!",['Suggestion'],False
853,3706672,"@jeremy This is primarily a problem for legacy databases. Or for those of us with large datasets ie billions of rows the space saving made by using timestamp can really add up.

At the moment I do the following in config initializer


    require 'active_record/connection_adapters/mysql2_adapter'
    module ActiveRecord
      module ConnectionAdapters
        class Mysql2Adapter
          private
          alias old_configure_connection configure_connection
          def configure_connection
            old_configure_connection
            execute(""SET SESSION time_zone='+0:00'"", :skip_logging)
          end
        end
      end
    end

It would be great if there was a nicer way",['Code'],False
853,3768283,I ran into this today as well.. big pain to track this down.,['Confirmation'],False
853,3768295,"Note: not Rails' fault this provides more detail:

http://bugs.mysql.com/bug.php?id=15654",['URL'],False
858,3711269,This looks great! Gives the exact behavior I was looking for in the issue,['Confirmation'],False
858,3725366,"+1, good for me",['+1 (Plus One)'],False
858,3745537,Please send this pull request to master and not 3-2-stable.  We can decide whether or not to backport after it has been applied to master.,['Request'],False
858,3745795,"@tenderlove, [done](https://github.com/rails/rails/pull/4806). It'd be nice if you leave some comments on the inconsistent behavior I described in the comment to the original issue. Should we do smth about that?",['Mention'],False
857,3710321,Seems fine to me but please don't change the code under vendor,"['Request', 'Confirmation']",False
857,3710425,"Fixed, sorry I missed that",['Apology'],False
857,3711000,"In most of these cases, `for` is easier to read than the `#each` equivalent.

No sense changing them wholesale because a Reddit thread says they're uncommon!","['Suggestion', 'Answer']",False
857,3711318,"I've applied the patch not because of Reddit thread, probably I should've commented my thoughts first :(.
I've applied it because I find the code better to read but if you don't like feel free to revert it","['Answer', 'Fixing']",False
857,3711387,"Thanks for the feedback. Now that I look at it again, I agree that `for` loops are easier to read when dealing with ranges.

Here's a [pull request](https://github.com/rails/rails/pull/4747) to revert to using `for` loops for ranges.","['Accept', 'Gratitude']",False
879,3725116,That isn't a typo. That's the 5 hours time difference between UTC and EST.,['Objection'],False
879,3725959,Oh. Thanks for the clarification. I see that the zone is set to EST up higher in the doc.,['Gratitude'],False
854,3707154,Not sure about this patch. This can hide errors when you actually want to pluck given an order. I think it is actually up to your application to call `unscoped/reorder/only/except` when you want to ignore the previous conditions.,"['Suggestion', 'Answer', 'Bug']",False
854,3707156,"Anyway, thanks for the pull request and the well described issue. I will leave it open to see what others think.",['Gratitude'],False
854,3725922,Can anyone shed some light? Is currently a blocker for us (as described in #4758),"['Question', 'Request']",False
854,3735505,"@josevalim I agree with you in general, but this is breaking the _ids method on some associations where that previously worked on 3.1. So I think we need to deal with that in some way. Probably we should revert the _ids method to not use `pluck`?","['Mention', 'Suggestion']",False
854,3735626,"The problem is in `uniq` that was added to `ids_reader`. In previous version of `ids_read` there was no uniqueness.
See this line in collection_association.rb `relation.uniq.pluck(column)`. See commit 109db5a that introduced that change.
`uniq` gives SELECT DISTINCT and that's why error is thrown.

Let's ask @lest why he added `uniq` in relation.",['Mention'],False
854,3735686,"Yeah, we can either do the uniq in Ruby or change it to not use pluck.
Probably the second.","['Answer', 'Suggestion']",False
854,3736338,"Uniqueness wasn't present in previous versions of ids_reader, that's why we can just remove `uniq` from relation. See #4783","['Answer', 'Suggestion']",False
861,3713965,`for` loops use each underneath and it's not idiomatic.,"['Answer', 'Suggestion']",False
861,3714054,Not keen on this either. IMO for in ruby is basically vestigial limb inherited from earlier block-less languages.,['Suggestion'],False
861,3738365,"imho, in most of these cases upto is better then using each and ranges :)",['Suggestion'],False
861,3738524,Doesn't make much sense for me either. :-1:,['Objection'],False
861,3745311,"I agree with @jurriaan, it seems better that we use `upto` rather than loops and ranges.  Anyway, I don't find `for` to be readable at all.  </2cents>",['Mention'],False
896,3011301,"Not sure when sqlite3-journal files generated. 

Also your PR needs a rebase.",['Suggestion'],False
896,3730889,Closing this for now. Please submit a new PR again.,"['Request', 'Reject']",False
883,3611476,"You might want to just update the code in the original pull request, to keep the conversation together there.

BTW I'm +1 on this idea. .where('1 = 0') is a lame hack.","['+1 (Plus One)', 'Suggestion']",False
883,3617656,"I'm OK with this, but I'd like more opinions.  @jonleighton ?",['Mention'],False
883,3621135,"I'm okay with this too, but I think it would be better if:

* The rationale was explained in the documentation (also explained in terms of the 'null object pattern' as that's what this is)
* There was a CHANGELOG entry
* Ideally I'd prefer if we used polymorphism. I.e. if Relation#none returned an instance of a NullRelation that implemented this behaviour, rather than having to have a `@none_value` var and special code in `exec_queries`.

Thanks.",['Suggestion'],False
883,3637043,"I agree with @jonleighton.  @xuanxu can you make those changes, and we'll merge it in.  Thanks for the contribution! :-)",['Mention'],False
883,3637693,"OK, I will try to make those changes","['Fixing', 'Answer']",False
883,3727293,"@tenderlove Done!: #4768
¿should I backport it to 3.2?",['Question'],False
883,3745091,"@jonleighton can you review?

@xuanxu no, we will not backport this (as it is a new feature).",['Mention'],False
869,3720125,cc/ @jonleighton ,['Mention'],False
869,3746270,This broke the build with identity map turned on.  Can you please fix the tests and resend?  Thanks.,"['Request', 'Question']",False
869,3755456,"Sorry about that, my bad.
I got a fix working, but one test still fails:

test_instantiation_doesnt_try_to_require_corresponding_file(InheritanceComputeTypeTest) [../inheritance_test.rb:267]:
ActiveRecord::RecordNotFound expected but nothing was raised.

I am looking into it.","['Fixing', 'Code']",False
869,3766792,I submitted https://github.com/rails/rails/pull/4833 as a fix for the failing tests in active_record,"['URL', 'Answer', 'Fixing']",False
897,1871355,"Nice fix. It would certainly solve our problems with getting a users IP when the user, proxy and app server are all on the LAN. We've had to fall back to reading X_FORWARDED_FOR directly.","['URL', 'Confirmation']",False
897,2720910,"Very useful, I hope someone merge it soon ^^","['Gratitude', 'Request', 'Confirmation', 'Suggestion']",False
897,3730895,@gsterndale your PR needs a rebase. I think some cod changes is done in the same file.,"['Mention', 'Suggestion']",False
897,3851077,Thanks @arunagw rebased.,"['Mention', 'Gratitude']",False
897,3851142,cc/ @josevalim ,['Mention'],False
897,4243925,Will this be included in 3.2.2 final?,['Question'],False
897,10257684,It would be nice to get this into 3.2.x at some point. I've been monkey-patching this for months. @spastorino can you do anything?,"['Mention', 'Request', 'Suggestion']",False
897,34154738,Looks like this never made it in to 3.2.16 even though it was merged to master 2 years ago?! *confused*,"['Objection', 'Question']",False
897,34164527,"@courtland @donaldpiret : If you look at the merge commit, you can see just under the message the releases that include it. Moreover, 3.2.x don't receive any new fixes anymore (apart from security ones).","['Mention', 'Suggestion']",False
897,34183059,"@robin850 Thanks for clarifying, that makes sense!","['Gratitude', 'Mention']",False
901,3730961,Your PR needs a rebase. Some code changes is done in this file. I think after that we can bring more attention on this from team.,['Suggestion'],False
901,3798820,"Rebased master onto my branch and squashed the commits.

Personally, I ended up throwing in the towel on using Perforce directly and now use it via git-p4. I still think there should be options to skip/configure the git specific stuff though.","['Fixing', 'Digression', 'Suggestion']",False
901,5476451,"The tests encounter a parse error at 
rails/railties/lib/rails/generators/rails/app/app_generator.rb:302

ruby-1.9.3-p194","['URL', 'Bug']",False
901,5479882,"Apparently the same tests are being added to both app_generator and plugin_new_generator, confirm? If so, you can probably move them to [SharedGeneratorTests](https://github.com/rails/rails/blob/master/railties/test/generators/shared_generator_tests.rb), that is included in both.","['URL', 'Request']",False
901,5495894,I'll take care of that tonight and try to do a rebase on master as well.,['Fixing'],False
901,5500892,"I spoke too soon. I'm having trouble successfully installing the gem dependencies as described in the [edgeguide](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#set-up-and-run-the-tests). I get compatibility errors from bundler. Until i can figure out what to do about those, I can't run any tests.","['URL', 'Bug']",False
901,5961827,what's happening with this PR guys ??,['Question'],False
901,6134656,"I've just had baby, so I haven't had any time to make the suggested changes
and rebase.

On Mon, May 28, 2012 at 5:26 AM, Arun Agrawal <
reply@reply.github.com
> wrote:

> what's happening with this PR guys ??
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/2808#issuecomment-5961827
>","['Apology', 'Answer']",False
901,8494071,Closed in favor of #7614,"['Reject', 'Accept']",False
907,3007701,"Thanks for reporting the bug. I think perhaps we should be using `base_class` here. E.g. something like:

``` ruby
def sequence_name
  if base_class == self
    @seqence_name ||= reset_sequence_name
  else
    (@sequence_name ||= nil) || base_class.sequence_name
  end
end
```

Could you look into that please?
    ",['Code'],False
907,3007796,"Yes, it works, I also updated my pull request.","['Accept', 'Confirmation', 'Answer']",False
907,3731311,"This seems to break code where an inheritance tree defines both a table_name_prefix and defines a sequence pattern for all models inheriting from this tree.

Given:

```ruby
class A < B
end

class B < ActiveRecord::Base
  self.abstract_class = true
  self.table_name_prefix = 'core.'
  self.sequence_name = :autogenerated
end
```

The queries will work correctly, but because of the behavior of base_class, when the connection asks for the sequence_name, base_class returns A and not B.  A then resets the sequence_name and it is no longer pulled from the super, instead, you get a sequence name 'core.a_seq'

Seems we are missing a test case where the sequence_name is set in the base class and is retained in the subclass.

Are there any suggestions for work arounds? ",['Code'],False
903,2104229,There is a problem with this approach: calling `count` on an ActiveRecord::Relation mitigates any limit(n) that was previously set,['Objection'],False
903,2104283,"Inspect is meant to be used in tests and console only, not in a codebase.
Therefore I don't see any moment when we wouldn't want to have this set to true.
Moreover, if we're comparing a lot of objects in a test, the result will be biased.

-1",['Objection'],False
903,2113054,"The problem only exists when in production one has a exception notifier that sends an email containing the backtrace + an inspection of the env variables back at the developers. I believe that filling the production machine's memory with a huge inspection string is not one of the admin's favorite things.

My solution might be a bit ugly but in development it served me and a couple of my colleagues well when a broken Arel query inspection started filling in more than 2GB of ram.","['Suggestion', 'Answer']",False
903,3730914,What's happening to this PR guys! Are we still on this?? Or this can be closed??,['Question'],False
903,4450718,"Closing this for now. Please reopen this with more details. 


Cheers, 
Arun","['Reject', 'Request']",False
916,3735248,"Cheery-picked to `3-2-stable`. If you would like, please submit a backport for `3-1-stable`.",['Request'],False
906,3731635,"Humm, the generated url was not shown, I'll paste the code in the gist: https://gist.github.com/1707977",['URL'],False
906,3734442,"This change is backwards incompatible for people relying on the old behavior. That said, could you please add an entry to the CHANGELOG saying that this helper will now use the favicon in app/assets by default?","['Request', 'Mention']",False
906,3737595,"and tests, the existing ones passes? do we need new ones?","['Question', 'Accept']",False
906,3739490,Done :-),"['Fixing', 'Answer']",False
906,3741064,Squash the commits into one please and push -f,"['Suggestion', 'Request']",False
906,3743736,"PR contains *.swp files, remove them please",['Request'],False
906,3743846,"Ok, I saw the .swp files.. sorry, I'll remove them.",['Apology'],False
906,3744001,"I already squashed the commits into one and make a new pull request: https://github.com/rails/rails/pull/4803

I'll close this one, ok?!","['Accept', 'URL']",False
917,3736427,Thanks for the fix! This would close #4758,['Gratitude'],False
923,3764165,Done in another PR. Closing.,['Reject'],False
921,3608397,"Nice, I like the method not hitting the database, but don't like it using the where method, I've implemented it using a none_value attribute here: https://github.com/rails/rails/pull/4609

 ",['URL'],False
921,3762016,https://github.com/rails/rails/pull/4805 is merged. Closing.,"['Accept', 'URL']",False
919,5495860,"All of the tests pass.

cc @tenderlove ","['Mention', 'Confirmation']",False
919,5505610,"Any thoughts about the names by the way?  'Filter' sounds too general, can be reserved for more complex operations.  Maybe `#deep_slice` and `#deep_except`?","['Question', 'Suggestion']",False
919,5730207,"Hey guys. We think that this kind of things should go to plugins. Active Support is for things that we use in the Rails code and common patterns.

Thank you for the pull request.","['Gratitude', 'Suggestion']",False
927,3769181,"*bump*

Would it make this any more compelling if I pointed out that this isn't just an optimization to reduce the number of objects created.   By running, eg, 

```ruby
client = company.clients.find_or_initialize_by_foo('bar')
client.save
company.save
```

you end up persisting two Client objects to the database - one in the return value from `find_or_initialize`, and one that's autosaved along with the `company.save`.",['Code'],False
927,3769304,"merged, thanks",['Accept'],False
924,3764366,"Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.",['Request'],False
924,3946677,"Hi Aaron,
I've submitted the pull request against master and tested everything
out. It awaits your leisure:

https://github.com/rails/rails/pull/4834

Cheers,
sk

On Wed, Feb 1, 2012 at 1:38 PM, Aaron Patterson
<reply@reply.github.com>
wrote:
> Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/4810#issuecomment-3764366",['Request'],False
924,4139215,"Hi Aaron,
Was looking at https://github.com/rails/rails/compare/v3.2.1...v3.2.2.rc1
and I noticed that the change to pslq didn't get backported. Do you
think that this will make 3.2.2?

Cheers,
sk

On Mon, Feb 13, 2012 at 1:55 PM, Sean Kirby <sskirby@gmail.com> wrote:
> Hi Aaron,
> I've submitted the pull request against master and tested everything
> out. It awaits your leisure:
>
> https://github.com/rails/rails/pull/4834
>
> Cheers,
> sk
>
> On Wed, Feb 1, 2012 at 1:38 PM, Aaron Patterson
> <reply@reply.github.com>
> wrote:
>> Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.
>>
>> ---
>> Reply to this email directly or view it on GitHub:
>> https://github.com/rails/rails/pull/4810#issuecomment-3764366",['Question'],False
924,4142581,"@sskirby thanks for reviewing the commits!  Yes, I meant to backport this before the release but totally forgot.  This will be in 3.2.2 final.",['Mention'],False
926,3767456,"We should honestly get rid of identity map. It was a great effort but the current limitations make it unusable in most apps. Alternatively, we can fix it and make it default.",['Suggestion'],False
926,3768577,"@josevalim agree.  [1, 2, 3, not it](http://www.urbandictionary.com/define.php?term=123%20not%20it).","['Mention', 'URL']",False
926,3774024,@josevalim what would be needed to make it usuable?,"['Mention', 'Question']",False
926,4707480,"I guess that should be closed now that IM was removed from master, thoughts?","['Question', 'Reject']",False
926,5530217,@carlosantoniodasilva agreed.,['Mention'],False
918,3737047,Can we add a test for at least 1 of those keywords?,"['Request', 'Question']",False
918,3737987,Is not enough to just prepend self always instead of checking against RUBY_KEYWORDS ?,['Question'],False
918,3738006,"Yeah, probably :P","['Confirmation', 'Answer']",False
918,3738444,@ayamomiji please do it and squash your commits :),"['Mention', 'Request']",False
918,3753661,"But i cannot just prepend `self.` always, this causes the DirtyTest to raise errors like these:

```
test_setting_attribute_will_result_in_change(DirtyTest):
NoMethodError: private method `attribute_changed?' called for #<DirtyTest::DirtyModel:0x007faa6b038b40>
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:373:in `method_missing'
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:314:in `name_changed?'
...

NoMethodError: private method `attribute_will_change!' called for #<DirtyTest::DirtyModel:0x007faa6b057568 @name=nil, @color=nil>
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:373:in `method_missing'
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:314:in `color_will_change!'
...
```","['Code', 'Bug']",False
918,3753752,"i'll use `send` instead of prepending `self.` for prevent make aliases on private attributes.
i'm not sure should attributes always be public?",['Question'],False
918,4450456,What's happening here? :) ,"['Digression', 'Question']",False
918,5523658,Is this still an issue?,['Question'],False
918,5532907,"/cc @josevalim I don't see another way of doing this but I don't like it neither :/. Or we leave the Ruby keywords list or we remove the CALL_COMPILABLE_REGEXP optimization and always do send(:'#{send}', #{extra})","['Mention', 'Suggestion']",False
918,5544342,+1 for always do `send`.,['+1 (Plus One)'],False
918,5550786,":-1: I think this is just hacky. :( If they are reserved, we shouldn't be messing with it. We should do make behavior as predictable as possible. In other languages, users have to respect the reserved words. I think we should too. Just my $0.02",['Objection'],False
918,5556157,"@isaacsanders disagree, you can define a method called begin for your classes in pure Ruby. So why stopping people for doing that on AM attributes?","['Mention', 'Question']",False
918,5556311,I don't know. It is just my opinion. I feel bad that I can't vocalize why I feel the way I do.,"['Digression', 'Objection']",False
918,5559397,"@isaacsanders no worries :), I was giving my opinion too :heart: :heart: :heart:",['Mention'],False
918,5672714,@spastorino @josevalim are we good to go here? :),['Mention'],False
918,5672827,"@carlosantoniodasilva read my comment where I've /cced to @josevalim, let's wait for him","['Mention', 'Request']",False
918,5674748,"We should just use `self.` The reason `self.` is making dirty tests fail is because your changes are affecting a place it should not to. There are two methods in the attributes module that calls `define_optimized_call`, one is alias attribute and there is a second one. You are mistakenly affecting the second one. Here is a patch for example that makes your tests pass:

https://gist.github.com/2686886

Can you please update accordingly?",['Suggestion'],False
918,5921779,@josevalim are we good to go now? :),"['Mention', 'Question']",False
934,3778224,/cc @josevalim ,['Mention'],False
934,3778481,"@jeremy it looks good to me, let's merge?",['Mention'],False
934,3780153,"Nice job, especially with updated docs and guide.

There are a lot of other refactorings and style changes included, too, making it hard to review the code carefully.

:+1: here but please do separate pulls for refactoring and style changes next time!","['+1 (Plus One)', 'Gratitude']",False
934,3780285,"@jeremy thanks, we will be paying more attention to that from now on.",['Mention'],False
933,3740561,"Pretty please. Some of us still use Rails 2.3.x, and latest 2.3.x with latest rubygems results in ~40 lines of deprecation warnings from rubygems on startup. 

See: https://github.com/rubygems/rubygems/issues/145   

The rubygems team does not seem to consider it a problem. ",['URL'],False
933,3778169,"@jrochkind can you test this patch on your app, as I said in the note above I wasn't able to find instructions on how to setup a 2-3-stable development env so some feedback would be useful",['Mention'],False
933,3778246,"(about to be on vacation for two weeks, will try to do after I return.  
If I can figure out how to apply a patch to rails in a 2-3 app myself,  
I don't know either.)

On Feb 2, 2012, at 8:53 AM, Elia Schito wrote:

> @jrochkind can you test this patch on your app, as I said in the  
> note above I wasn't able to find instructions on how to setup a 2-3- 
> stable development env so some feedback would be useful
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/4422#issuecomment-3778169","['Mention', 'Answer']",False
933,3778305,"It's probably enough to put:

```ruby
require 'rails/gem_dependency'

module Rails::GemDependency
  def self.add_frozen_gem_path
    @@paths_loaded ||= begin
      original_source_index = Gem::Specification.respond_to?(:dirs) ? Gem::SourceIndex.new(Gem::Specification.dirs) : Gem.source_index
      source_index = Rails::VendorGemSourceIndex.new(original_source_index)
      Gem.clear_paths
      Gem.source_index = source_index
      # loaded before us - we can't change them, so mark them
      Gem.loaded_specs.each do |name, spec|
        @@framework_gems[name] = spec
      end
      true
    end
  end
end
```

right before `Rails.boot!` in your application `config/boot.rb`.
",['Code'],False
933,4403969,"@elia The snippet in your last comment doesn't quite work. I got this error when I tried it:

    GemDependency is not a module (TypeError)

Changing module to class results in the error going away and the original warning being silenced. Have not tried this in production yet.",['Mention'],False
933,4424373,"@jwarchol that was a paste from a hack directly in rubygems :blush:

I tried and for me doesn't work *before* `Rails.boot!` but only **after**:

```ruby
# config/boot.rb stuff here...
# possibly bundler stuff here...

# All that for this:
Rails.boot!

require 'rails/gem_dependency'

class Rails::GemDependency
  def self.add_frozen_gem_path
    @@paths_loaded ||= begin
      original_source_index = Gem::Specification.respond_to?(:dirs) ? Gem::SourceIndex.new(Gem::Specification.dirs) : Gem.source_index
      source_index = Rails::VendorGemSourceIndex.new(original_source_index)
      Gem.clear_paths
      Gem.source_index = source_index
      # loaded before us - we can't change them, so mark them
      Gem.loaded_specs.each do |name, spec|
        @@framework_gems[name] = spec
      end
      true
    end
  end
end

```
","['Code', 'Mention']",False
933,4495483,"I'm working on removing all deprecations for all gem version in [elia#fix-railties-tests-for-latest-rubygems](https://github.com/elia/rails/tree/fix-railties-tests-for-latest-rubygems)

Right now I think I'm done from rubygems 1.3 up to 1.7, I also added some info on setting up dev environment in the README

Any feedback/help is really appreciated :bowtie:","['URL', 'Fixing']",False
933,5544380,"@jeremy @jonleighton @tenderlove hey guys, this pull request is pointing 2-3-stable branch. Could you take a look on it and see if we will accept or close it?

Thanks.",['Mention'],False
933,5561514,"I'm not seeing a final resolution or verified fix here. @elia could you open a pull request for your changes, instead?","['Mention', 'Objection']",False
933,5570277,"@jeremy, @rafaelfranca: see pull #6202, closing this one.",['Mention'],False
929,3774199,"Thanks :).

In principle I am hesitant to add that check, because it may hide that some code is not passing the bindings in its instrumentation call. Binds are a collection and so when no binds are used there's a collection, empty, but not `nil`.

There was a recent issue related to CACHE queries that I fixed in de161003c36a0cd967aa393e7706b12055770174 and will ship in 3.2.2. Have you seen any other use case?
","['Question', 'Gratitude']",False
929,3775395,"The cases where I was seeing this error appear were all using `find` with an `:include`, for example:

```ruby
User.find(
  current_user.id,
  :include => [
    :credit_card,
    :user_image,
    :sent_offers => {
      :sender => :user_image,
      :receiver => :user_image,
      :listing => [:listing_image, :listing_images]
    },
    :received_offers => {
      :sender => :user_image,
      :receiver => :user_image,
      :listing => [:listing_image, :listing_images]
    }
  ]
)
```","['Bug', 'Code']",False
929,3786584,"I cannot reproduce this failure on 3-2-stable with user has many posts. See the session:


    fxn@rails:~/tmp/test-4844 $ grep threshold config/environments/development.rb 
      config.active_record.auto_explain_threshold_in_seconds = 0
    fxn@rails:~/tmp/test-4844 $ script/rails c
    Loading development environment (Rails 3.2.1)
    1.9.3-p0 :001 > User.find(1, :include => :posts)
      User Load (3.3ms)  SELECT ""users"".* FROM ""users"" WHERE ""users"".""id"" = ? LIMIT 1  [[""id"", 1]]
      Post Load (0.5ms)  SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""user_id"" IN (1)
      EXPLAIN (0.6ms)  EXPLAIN QUERY PLAN SELECT ""users"".* FROM ""users"" WHERE ""users"".""id"" = ? LIMIT 1  [[""id"", 1]]
      EXPLAIN (0.1ms)  EXPLAIN QUERY PLAN SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""user_id"" IN (1)
    EXPLAIN for: SELECT  ""users"".* FROM ""users""  WHERE ""users"".""id"" = ? LIMIT 1 [[""id"", 1]]
    0|0|0|SEARCH TABLE users USING INTEGER PRIMARY KEY (rowid=?) (~1 rows)

    EXPLAIN for: SELECT ""posts"".* FROM ""posts""  WHERE ""posts"".""user_id"" IN (1)
    0|0|0|SCAN TABLE posts (~100000 rows)
    0|0|0|EXECUTE LIST SUBQUERY 1

     => #<User id: 1, created_at: ""2012-01-31 07:59:45"", updated_at: ""2012-01-31 07:59:45""> 

Could you post a way to reproduce the error?","['Code', 'Bug']",False
929,3907927,I was just getting this issue on 3.2.1. I changed to 3-2-stable and it's fixed it. Good work.,"['Gratitude', 'Confirmation', 'Fixing']",False
929,3908004,"@ihid excellent, thanks very much for the feedback.

The CACHE notification have binds now (and anyway we are no longer monitoring CACHE notifications). So I think we can close this issue.

@sferik if you find this error again please feel free to reopen.",['Mention'],False
929,3908885,Sounds good. Thanks for following up.,['Gratitude'],False
938,3810303,"Now, I realize that we updated rack-test to 0.6.1 on master, 3-2-stable, and 3-1stable.
Sorry, we miss this PR...

I'm closing this issue.
Thanks !",['Apology'],False
936,3798519,"Also spotted this, but the user argument is still missing.
`set_psql_env` should be handling this, but the rake tasks fail unless I provide an explicit user argument:

    `psql -U #{abcs[env]['username']} -f ""#{filename}"" #{abcs[env]['database']}`",['Bug'],False
936,3806968,"That's very strange, Chris, because my change only removes passing in the template as the last argument. If what you are saying is correct, db:test:prepare should not be working at all in master. Which means no one using PostgreSQL is able to run tests via the standard rake task.

Now that I think of it, however, I did only test the change as it applies to the 3-2-stable branch and not master. I will re-test against master. If something is wrong, I suspect that it's not because of the changes in this patch.",['Fixing'],False
936,3809545,"Well, by default psql uses the current OS user name if one isn't provided on the command line. Are you also running the rake tasks as a user that does not have direct access to the db? If so I'll have to check what's wrong with my environment.",['Question'],False
936,3831567,Just tested my patch against the latest master branch and (after applying https://github.com/rails/rails/pull/4910) everything seems to work just fine. I do not have a pg user that matches my username.,['URL'],False
936,3854345,"Just wondering if the suspicion that a username needs to be explicitly passed in to psql is what's keeping this pull request from being accepted.

If that's the case, the username issue is really a completely different issue and has nothing to do with the changes in this pull request. It should not be blocking this pull request, it should be in it's own ticket.",['Suggestion'],False
936,3857897,"@sskirby agreed. I've tested your patch in another environment and everything's working fine.
+1 for the pull request",['+1 (Plus One)'],False
931,1070412,SQLite 3 tests pass.,['Confirmation'],False
931,1095354,I'd like to avoid changing method signatures until Rails 4.0.  This change will break backwards compatibility with 3rd party adapters.,"['Suggestion', 'Objection']",False
931,1115044,@tenderlove should we leave this open then? or can we close?,"['Mention', 'Question']",False
931,1119560,Set up a milestone and add it?,['Question'],False
931,1119568,"Yes, we should set up a rails 4 milestone and add this.","['Suggestion', 'Confirmation']",False
931,1638469,How about changing its name to something like deprecated for rails 3-1 so people know it's going to go away? That would also minimize the confusion that @smartinez87 cites.,"['Question', 'Suggestion', 'Mention']",False
931,2334958,Milestoned @ Rails 4.0,"['Mention', 'Confirmation']",False
931,3374154,master is rails 4 now right? should this be merged?,['Question'],False
931,3376489,Yeah! Master is Rails 4.0 :heart:,"['Answer', 'Confirmation', 'Gratitude']",False
931,3776180,@smartinez87 I think it'd be good to rebase so it can be merged now :),"['Suggestion', 'Mention']",False
931,3777191,"had trouble rebasing master again, so opened a new PR #4850","['Objection', 'Bug', 'Fixing']",False
931,3782045,"closing this, since #4850 was merged",['Reject'],False
942,3800707,"I don't think we should even call the responder. We should just yield the block, as in respond_to.",['Suggestion'],False
942,3801285,"Ah yeah, you're right. Fixing that now.",['Fixing'],False
942,3801329,`retrieve_response_from_mimes` could probably return the collector and then we ask it directly if there is a response (and invoke) or fallback to the default one (with the responder).,['Suggestion'],False
942,3804100,Code has been updated.,['Answer'],False
942,3810688,"Yay, don't forget #4870 for 3-2-stable as well.",['Request'],False
935,3797518,NIce but the option name is not clear for me. Maybe skip_after_callbacks_if_halted or something like that instead?,['Suggestion'],False
935,3797566,`halted` is something internal. `:terminator` is part of the API. What about `skip_after_callbacks_if_terminated` ?,"['Suggestion', 'Question']",False
935,3797592,Sounds great.,['Confirmation'],False
935,3809525,Renamed.,['Confirmation'],False
935,3809563,"Awesome, thanks!",['Gratitude'],False
945,3825958,"Agreed it is better but if we are going to use present?, we need to require
the proper from AS.","['Confirmation', 'Answer']",False
945,3825970,Its already loaded. Have tested the test cases which is running fine.,['Answer'],False
945,3825987,Are you running the test case in isolation mode?,['Question'],False
945,3826021,Am running all the active model test cases.,['Answer'],False
945,3826050,"You need to run them in isolation in order to catch missing requires. In any case, we should just add the missing require.",['Suggestion'],False
945,3826066,will do if it is missed,['Confirmation'],False
945,3826529,"I made another pull request for this issue,   please refer #4904",['Request'],False
950,2079945,"Could you rebase your commits into one please ?
There's also a test missing :(",['Request'],False
950,3817666,"I think that this issue was fixed on 3-1-stable, 3-2-stable, and master.
I think that I should close this issue. What do you think ?

BTW, I cannot find a testcase for non english filename, and I'll send PR for it.",['Question'],False
950,3829851,"Hi ! @tanin47 
I'm closing this issue, because it seems that this issue is fixed already on 3-1-stable, 3-2-stable, master.
Please comment to this issue, if needed :-)","['Mention', 'Confirmation']",False
950,3849731,Alright :),['Answer'],False
948,3824513,/cc @jonleighton ,['Mention'],False
948,3828319,"Thanks for the patch, but this is not the right way to fix it. We need to fix the attribute accessor within AR to actually return the correct value.","['Fixing', 'Gratitude']",False
948,3829370,"Attribute accessor is working. All test are passing (with and without patch also).

You can try this example with and without my patch

``` ruby
require ""rubygems""
require ""action_view""
require ""active_record""
require ""logger""

ActiveRecord::Base.logger = Logger.new(STDOUT)
ActiveRecord::Base.establish_connection(
  :adapter => 'sqlite3', 
  :database => ':memory:')

ActiveRecord::Schema.define do
  create_table :items, :force=>true do |t|
    t.string :name
  end
end

class MySerializer
  def load(str)
    str.swapcase
  end

  def dump(str)
    str.swapcase
  end
end

class Item < ActiveRecord::Base
  serialize :name, MySerializer.new
end

@item = Item.new
@item.name = ""lowerUPPER""

puts @item.name
puts @item.attributes[""name""]

@item.save!

@saved_item = Item.last

puts @saved_item.name
puts @saved_item.attributes[""name""]

include ActionView::Helpers::FormHelper
puts text_field(:item,:name)
puts text_field(:saved_item,:name)

```

With patch

``` ruby

""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
<input id=""item_name"" name=""item[name]"" size=""30"" type=""text"" value=""LOWERupper"" />
<input id=""saved_item_name"" name=""saved_item[name]"" size=""30"" type=""text"" value=""LOWERupper"" />
```

Without patch

``` ruby
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
<input id=""item_name"" name=""item[name]"" size=""30"" type=""text"" value=""#&lt;struct ActiveRecord::AttributeMethods::Serialization::Attribute coder=#&lt;MySerializer:0x0000000187dad8&gt;, value=&quot;lowerUPPER&quot;, state=:unserialized&gt;"" />
<input id=""saved_item_name"" name=""saved_item[name]"" size=""30"" type=""text"" value=""#&lt;struct ActiveRecord::AttributeMethods::Serialization::Attribute coder=#&lt;MySerializer:0x0000000187dad8&gt;, value=&quot;lowerUPPER&quot;, state=:unserialized&gt;"" />
```

Maybe I'm not getting it. Can you tell me where I'm wrong thinking about this problem @jonleighton? Attribute reader is returning unserialized value. But in form helpers serialized values are used. That's how this was working in Rails 3.1.3.",['Code'],False
948,3829442,"It's the `_before_type_cast` accessor that is broken, i.e. `@saved_item.name_before_type_cast`","['Bug', 'Answer', 'Code']",False
948,3829518,So ```@saved_item.name_before_type_cast``` should be ```LOWERupper``` in my example @jonleighton ?,['Mention'],False
948,3836776,We noticed this bug on v3.2.1. It's definitely a regression from 3.1.1.,"['Bug', 'Confirmation']",False
948,3842266,@listrophy no. 3.1.3 is working still.,['Mention'],False
947,3827936,Commits Squashed to one.,['Answer'],False
947,4795780,@josevalim could you please review / merge?,['Mention'],False
946,2309566,+1 .. drove me nuts for an hour!!,['+1 (Plus One)'],False
946,2309746,.. and is a serious bug which leads to not beeing able to delete any objects when using auth headers,['Bug'],False
946,3827727,hey guys ... where is the problem to merge this ???,['Question'],False
946,4098792,This should have some test included but I can verify the code in this pull requests works... but then again a similar bug (with #build) which also has a test accompanying it has yet to be merged...,['Bug'],False
946,4825229,ActiveResource has moved to you own repository. I'm closing this. Please open a new pull request in the [ActiveResource](https://github.com/rails/activeresource) repository if you want.,['URL'],False
955,3831091,Does this fix #2575?,['Question'],False
955,3831245,It seems that this problem is same one ;-),['Confirmation'],False
955,3831376,@ihid Do you think about this PR ? Will we have any problem ? (or should close #2575 too ?),['Mention'],False
955,3831995,"I've got no issue with this PR at all. It's good. Thanks! :)
I'll check later to check it fixes my issue. I'll either mark the issue as closed or send a further PR that fixes that as well.  ","['Gratitude', 'Accept']",False
955,3905611,Great update guys - wonderful to see this fixed :-) Is it too much to ask to have it posted here when it is inserted into core?,"['Gratitude', 'Question']",False
955,3906603,"Oh, by the way, with core, I mean stable release","['Confirmation', 'Answer', 'Suggestion']",False
955,3910687,"I closed the other ticket and then realised I still had a monkeypatch there that was causing it to work regardless of your patch. I've just spent half an hour trying to get master branch working on my codebase and I'm giving up. I get so many dependancies failing in my Gemfile.

I'm pretty certain that what you've got there will fix it, so I'm just going to leave the other ticket closed and I'll keep an eye on it. Thanks, @kennyj.","['Mention', 'Confirmation', 'Fixing']",False
955,3910707,"@kennyj, sorry - could you put a PR for 3-2-stable too please so I can get rid of my monkey-patch? :)",['Mention'],False
955,4296191,Sorry to jump on the end of this ticket but.. any idea why this would cause resolve/refinerycms#1383 ? ,['Question'],False
958,3833589,"Seems good, but I'm a little annoyed because this value is OS (and possibly filesystem) specific.  I'm annoyed that Ruby doesn't provide an API to `pathconf` so that we can determine the correct length.  Without that value, we're just going to keep chasing numbers until this value is set to the lowest common denominator. :(",['Objection'],False
958,3838420,I agree; it does feel crufty. Am open to a better solution if available...,"['Accept', 'Confirmation']",False
958,4074602,"Just checked on Linux

```
2.6.38-13-generic #54-Ubuntu SMP Tue Jan 3 13:38:12 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux
Natty
```

in my case
On Encrypted FS(Cryptfs):

```
test will fail on filename size >= 144
And will pass on FILENAME_MAX_SIZE = 143
```

Ubuntu community says that is known filesize bug (on cryptfs) and filesize on current dir underlying fs cannot be determined by syscalls from ruby.
This is related to @tenderlove conversation with Motohiro KOSAKI & Yui NARUSE
on https://bugs.ruby-lang.org/issues/5974

On Ext4 unencrypted:

```
test will pass on 230 as expected
```


On FreeBSD UFS unencrypted tests passed on FILENAME_MAX_SIZE = 230 

What about cryptfs on Linux - current FILENAME_MAX_SIZE value will make cache files with long names(usually escaped utf strings) unusable before it hooked and truncated by rails.cache api calls

* Maybe it will be useful to make a hash of limits + fs byte overheads for each FS. But IMO this will be very ugly :)
* Or get a lowest limit on filename size - 143 for ecryptfs and use it for FILENAME_MAX_SIZE - this is ugly too IMO :(

In my particular case - i only can use a constant override to decrease FILENAME_MAX_SIZE to use a cache on dev and prod machines with cryptfs :( Sad




",['Code'],False
958,15665329,"Just ran into this issue on 3.2.11 and ended up overriding the constant to 223. I probably won't submit a pull request to change it in master because 228 should be good enough for most cases, and because we should find a more robust solution as @tenderlove suggests. Maybe catching the ENAMETOOLONG and retrying with a shorter max length, but that may break existing keys.

That said, I'll at least document why I went with 223 instead of 228:
Tempfile adds `""#{t}-#{$$}-#{rand(0x100000000).to_s(36)}-#{n}.lock""` to the end of the filename.
`t` is the date; always 8 chars.
`$$` is the pid; on linux this defaults to a max of 32768, but can be configured to a max of 4.2million or 7 chars.
`rand.to_s` base 36 encode of a 32bit number; max of 7 chars
`n` is the retry count; should never happen, but lets say it could get up to 2 digits before the universe explodes.
That adds up to 32 characters, and 255 - 32 = 223. 

So, 228 should work fine in most real world cases where the max pid is 5 digits long and there are no retries and the max filename length is 255.",['Bug'],False
959,3292205,"Any of the Rails team had a chance to look at this. I added in some tests. Thoughts, comments?  Feedback welcome. ",['Question'],False
959,3292314," i dig it. only thought is are you intentionally not saying ""bundle exec rake db:migrate""?",['Question'],False
959,3292856,"Great suggestion, i'll add it in!","['Gratitude', 'Accept', 'Confirmation']",False
959,3293603,I dig it.  +1,['+1 (Plus One)'],False
959,3294425,+1 makes sense.,['+1 (Plus One)'],False
959,3303225,This will be quite helpful. :+1:,['+1 (Plus One)'],False
959,3325395,+1,['+1 (Plus One)'],False
959,3589175,cool +1,['+1 (Plus One)'],False
959,3815698,+1,['+1 (Plus One)'],False
959,3832106,"@josevalim hate to bug on this one, but can you merge this in or give me some comments? The sooner no one asks me why they're getting a NoMethodError when they haven't migrated the database, the better. If there is someone else that needs to join the conversation let me know, and we can get them in here.","['Mention', 'Request']",False
959,3832192,/cc @tenderlove ,['Mention'],False
959,3833551,"I'm uneasy about this change.  Having the exception handling code checking the migrator does not sound awesome (especially if this is happening in production).  I'm -1 on this change, but I'm willing to hear other opinions. /cc @jonleighton ","['Objection', 'Mention']",False
959,3834163,"I am also a +1 for this, but I understand @tenderlove's concern. How about adding a `!Rails.env.production? &&` clause to each of those 'if' statements checking `if ActiveRecord::Migrator.needs_migration?`. That might address everyone's concerns.","['Suggestion', 'Mention']",False
959,3836554,"@tenderlove & @jonleighton I'm very open to implementation suggestions. Not performing this check in production on _every_ error makes sense. We could add a environment check per @scottwb's suggestion, or make it a config option. Perhaps coming up with a standard way to add debugging suggestions to development error messages could make this pattern more sustainable, but i'm not exactly sure what that would look like. Let me know what you think.","['Suggestion', 'Mention']",False
959,3840553,"This would save me some pain.
+1 and agree we want to be able to enable this for dev only.",['+1 (Plus One)'],False
959,3842993,Making this a `config` option is a good idea. This way I can enable it not only in development environment but also in my other custom environments that resemble development.,"['Confirmation', 'Accept']",False
959,3844555,"I think the idea is good but we shouldn't solve it by changing Active Record. For a start, picking up on specific errors is always going to leave other errors uncaught that were also caused by missing migrations.

I think we should make the feature configurable, and have it work like so by default:

* Development: raise an error on page load if there are pending migrations
* Test: display a warning when test is run if there are pending migrations
* Production: no change",['Suggestion'],False
959,3851336,"@jonleighton I think that addresses everyones concerns and accomplishes everything I want. I can go ahead and rip out the ActiveRecord bits from this pull request and just leave in the migration checking code. 

Would you prefer a separate  pull request for warning/error messages or just amending this one? I'm thinking by default we can have it off, and to turn it on you can do something like this to development/test.rb

```ruby
config.migration_pending = :error
config.migration_pending = :warn
```
","['Question', 'Mention']",False
959,3851478,"As just discussed with @waseem, one could apply a similar approach to the [following based on EpicFail](https://github.com/bsodmike/EpicFail/blob/master/lib/epic_fail/exceptions/rack.rb):

```ruby
module EpicFail
  module Exceptions
    class Rack
      #...
      
      def notify_exception(e, env)
        # Exception: backtrace  exception  message
        EpicFail::Failure.create!(:exception => ""#{e.class}"", :message => ""#{e.message}"", :backtrace => ""#{e.backtrace}"")
      end
    end
  end
end
```

and perform

```ruby
ActiveRecord::Migrator.current_version != (ActiveRecord::Migrator.migrations(migrations_paths).last.try(:version)||0)
```

to detect a pending migration.  `e.message` can be updated accordingly and presented in the rendered error.  All of the above as per @jonleighton still apply.  Thoughts?",['Code'],False
959,3897192,"

Setting up the configuration is straight forward: 

active_record/lib/active_record/base.rb

```ruby

##
# :singleton-method:
# Specify how to notify the user when pending migrations are detected
# use :warn, :error, or :none
cattr_accessor :on_pending_migration , :instance_writer => false
@@on_pending_migration = :none

```


Then actually raising/warning the message is straightforward

```ruby

# Notifies the developer if there are pending migrations
# the type of notification can be configured. Example:
#
#   config.active_record.on_pending_migration = :error
def notify_pending_migrations
  case ActiveRecord::Base.on_pending_migration
  when :error
    raise ActiveRecordError::PendingMigration, ""There are pending migrations run 'bundle exec rake db:migrate' to resolve them"" if ActiveRecord::Migrator.needs_migration?
  when :warn
    warn ""There are pending migrations run 'bundle exec rake db:migrate' to resolve them"" if ActiveRecord::Migrator.needs_migration?
  end
end

```


The thing I'm unsure of is where to call `notify_pending_migrations`. Since migrations are an ActiveRecord specific concept, I would like to keep the code within AR (not rely on a controller/view/etc. to relay the message). It also needs to work in the console and when running on a server. If we don't check _every_ round trip to the server we can't be sure that new migrations haven't been introduced. So we could hook into something like  `ActiveRecord::Base.table_name` that gets called on each round trip to the DB, though that would be a lot of redundant checks. Perhaps there is a better place to do the check?",['Code'],False
959,5519053,Any thoughts on this @tenderlove / @jonleighton?,['Mention'],False
959,5761141,"I like the idea a lot but I don't like to have to wait for the server to start and browse the app to get the error, It'd be better to throw the error when the server is starting, something like this:

    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate'

Which is what kinda happens with Bundler:

    $ rails server
    Could not find gem 'meh' in the gems available on this machine.
    Try running `bundle install`.

I could work on that patch. What do you guys think?","['Suggestion', 'Bug']",False
959,5761213,"I think we can at least get in the `needs_migration?` helper. Then people can proceed to check on initialization, add a middleware in development and so forth.","['Suggestion', 'Request']",False
959,5770170,"I'd still like this when the server is starting, but in a second thought, what if the user rolls back? the schema wouldn't be up to date and the server wouldn't start, that might not be ok, so we could add an option to the configuration (and configure in config/development.rb), something like this:
    
    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate' or use config.whatever_the_name_config_option_is = false

There's another thing, `needs_migration?` would be better to me if it were `pending_migrations?`","['Suggestion', 'Bug']",False
959,5771108,"`pending_migrations?` is fine. I don't we should check it on startup by default. You gave one possible example for it failing, but there are other occasions as well (like progressive updates in production).",['Accept'],False
959,5771575,"@josevalim I think this is a helpful thing in development only, in production?, not all, and yeah, it shouldn't be enabled by default either, even on development mode, I'm pretty sure there are people out there with a git post-commit hook or something like that checking for pending migrations already, so we could add a commented out config option in config/development.rb:

    # Enable pending migrations checking on startup (default is false)
    # config.check_pending_migrations_on_startup = true

    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate' or set config.check_pending_migrations_on_startup to false

What do you think?","['Suggestion', 'Mention']",False
959,6232858,Closed in favor of #6665,['Reject'],False
962,2438341,"Hrm, I am unsure if this the concern of to_json? Shouldn't escape_json do this instead?","['Suggestion', 'Question']",False
962,2438618,"Where may I find escape_json ?

PS. I do think this is a concern of to_json. See the definition of `string` at http://json.org/ and see also http://noteslog.com/post/the-solidus-issue/
 
> The reason for allowing the slash to be escaped is for making it safe to embed the JSON substring `</script>` in HTML.
",['Question'],False
962,2438686,"I'm thinking maybe it should have `ActiveSupport.escape_script_tags_in_json` (similar to `ActiveSupport.escape_html_entities_in_json`)

Set by default to +true+

And when +true+ only escape `</script>` strings, to avoid too much unnecessary escaping.

",['Suggestion'],False
962,2438911,"Sorry, it is json_escape (and not escape_json):

https://github.com/rails/rails/blob/aa11f7332c1abadea23576805985f402298273f9/activesupport/lib/active_support/core_ext/string/output_safety.rb#L53


*
Jos Valim
www.plataformatec.com.br
Founder and Lead Developer
*","['Apology', 'URL']",False
962,2439298,"Don't like that at all! The output is not valid JSON anymore, which is a waste. You'd have to parse it to JSON again on the client. Better to simply send valid JSON.","['Objection', 'Answer']",False
962,2439302,"Hrm, right. Ok, I am leaving this open for more feedback then. /cc @jeremy","['Confirmation', 'Mention', 'Request']",False
962,3451822,"I agree with @lawrencepit that this would be useful!  It's a common pattern for backbone.js apps to embed json directly in a &lt;script&gt; tag (in order to avoid an extra round trip to load a model).  I'm agnostic as to whether escaping of ""&lt;/script&gt;"" -> ""&lt;\/script&gt;"" should happen in to_json (since it doesn't effect json used in other context except &lt;script&gt; tags), but it sure would be nice if there was a helper for it (javascript_json_escape?)","['Confirmation', 'Mention']",False
962,3836181,":up: Any new suggestions how to deal with that problem? `escape_script_tags_in_json` works fine, but it cost too much...",['Question'],False
962,5248007,"The whole javascript / JSON escaping situation seems like a mess to me.

We have `json_escape` which looks useful but definitely isn't and `escape_javascript` which while having a better use case is named inconsistently and doesn't cover escaping JSON. Not to mention the `j` aliasing!

I also disagree with @lawrencepit's solution as `{""name"":""<script>alert('foo');</script>""}` is perfectly valid JSON, the issue being solved here is with the browser and so belongs in a view helper.

We need some joined up thinking and consider this and the following issues as a whole

* https://github.com/rails/rails/pull/3578
* https://github.com/rails/rails/pull/5127",['Objection'],False
962,5257905,"@bestie not sure what you're disagreeing with. The string you quote is valid JSON, and so is `<script>{""name"":""<script>alert('foo');<\/script>""}`.

Sometimes you have to be practical. If you push this to a view helper it will use *a lot* more resources. My original solution works. And it conforms to the JSON specs. Everybody happy I'd say.","['Answer', 'Mention']",False
962,5292491,"@lawrencepit I'm disagreeing with `to_json` changing a valid JSON string for the benefit of the browser, it's simply the wrong place for it to happen.

I also don't take your point on performance, a call to `gsub` in `to_json` equivalent to a `gsub` in a helper.",['Mention'],False
962,5296994,"I disagree it's in the wrong place. It follows the JSON spec. Read it. It specifically mentions the solidus in the string form. If you escape the solidus it's still perfectly valid JSON, just more perfect.","['Objection', 'Answer', 'Reject']",False
962,5646755,":thumbsup: @lawrencepit  it doesn't break the whole JSON string but makes it safer for use case above.
But, IMHO, escaping HTML is more important here.   config.active_support.escape_html_entities_in_json = true
 is not working for
```
 render json: {x:""<script>alert(1)</script>""}
```
",['Mention'],False
962,5647532,"I'm also gonna give a :thumbsup: to @lawrencepit on this one. After reading the JSON spec closely I realised the string with the escaped solidus is equivalent, so escaping it is optional.

To express in Ruby
```ruby
{""key"" => ""<script>something</script>""}.to_json == {""key"" => ""<script>something<\/script>""}.to_json
```
and also
```ruby
JSON.parse(""{\""key\"":\""<script>something</script>\""}"") == JSON.parse(""{\""key\"":\""<script>something<\/script>\""}"")
```
both producing
```ruby
{""key""=>""<script>something</script>""}
```

My issue was that I thought the suggestion was to make a real change to JSON encoding, in reality this is completely in-line with the JSON spec, implementing an optional extra, and makes putting JSON into the browser way more convenient.

I still think we have a problem escaping JSON in Rails, but this is going to be convenient for a lot people and is easy innocuous change to make.

@josevalim was your issue the same as mine? Maybe you will change your mind also?",['Code'],False
962,6495175,"Oh, similar issue here.

We can close this issue since we merged making escape_html_entities_in_json to true by default.
/cc @josevalim ","['Accept', 'Mention']",False
962,8582828,"> We can close this issue since we merged making escape_html_entities_in_json to true by default.

Sounds good. If anyone can demonstrate this is still a problem after that change, let me know and I'll re-open. Thanks.",['Accept'],False
972,3839787,"@carlosantoniodasilva @guilleiguaran 

I added this testcase for fixing https://github.com/rails/rails/issues/4749.
I'm confusing... Why should we use 3-2-stable when using --edge option ?

related to https://github.com/rails/rails/pull/4912","['Mention', 'Question', 'Objection', 'URL']",False
972,3840051,"@kennyj hm yeah, I didn't check it further, just added the test fix. Seems like the `:branch` shouldn't really exist, let me check it better.","['Mention', '+1 (Plus One)', 'Suggestion']",False
972,3840062,"This confusing, generating a new app passing --edge option using 3.2.x also generate apps with conflicts about dependencies.","['Objection', 'Mention']",False
972,3840157,"Yeah, but with the `:branch` option:

```ruby
gem 'sass-rails',   :git => 'git://github.com/rails/sass-rails.git',   :branch => '3-2-stable'
gem 'coffee-rails', :git => 'git://github.com/rails/coffee-rails.git', :branch => '3-2-stable'
```

I get the same error as result:

```
Bundler could not find compatible versions for gem ""railties"":
  In Gemfile:
    sass-rails (>= 0) ruby depends on
      railties (~> 3.2.0) ruby

    rails (>= 0) ruby depends on
      railties (4.0.0.beta)
```

If I remove the `:branch`, it bundles successfully.","['Code', 'Fixing', 'URL']",False
972,3840245,I get same result when I was tackling #4749.,"['Confirmation', 'Answer']",False
972,3841636,"BTW, My confirmation way is https://github.com/kennyj/rails/commit/8bf3c6d8165fa6442b3ae2f86a955c82d0abf99b#commitcomment-921532",['URL'],False
972,3841691,"You're right guys, my commit needs to be reverted","['Confirmation', 'Accept']",False
1035,3396429,"IMO it is not a good idea to call OrderedHash a Hash, i hope that some time in the future Hash in Ruby will become unordered again, and ordered hash will be called OrderedHash.

http://bugs.ruby-lang.org/issues/5123",['Objection'],False
1035,3396434,nice - should we deprecate the constructor/class too so it can eventually be removed?,['Question'],False
1035,3396522,"No, but i think that it is a bad idea to call ordered hash a hash, not because it can be removed, but because it is good to document in the code whether the ordering is used.

In my opinion it was a bad idea in the first place to specify that Hash in Ruby 1.9 is ordered, i think it shouldn't be.",['Objection'],False
1035,3875575,"OrderedHash serializes as an omap in yaml so there's still valid functionality there.

Additionally, deprecating it is just giving busy work to users who upgrade, there's no harm in having a few lines of code lying around to avoid having thousands of people getting thousands of error messages.

We could take another pull request which removed any remaining unnecessary uses of OrderedHash internally, but there's no need to do this.",['Suggestion'],False
1030,3838721,Whoops. Sorry. Made a mess. Closing this out in favor of this pull request: https://github.com/rails/rails/pull/4916,['URL'],False
529,3638801,/cc @tenderlove ,['Mention'],False
529,3691905,@tenderlove Could you glance at the related change #3457?,['Request'],False
1034,3874346,"If we are doing this, it shouldnt be a constant, but a Rails accessor. And please send feature requests to master. Thanks.","['Confirmation', 'Request']",False
89,5518881,Any thoughts on this @tenderlove / @jonleighton?,"['Mention', 'Question']",False
89,6453591,I am curious too. Seems like a nifty feature.,['Confirmation'],False
89,6465826,Added code and tests for this feature. Please comment! Thanks.,['Request'],False
89,6465897,"I think we should be able not to have a proc, but a ""normal"" value too.

    class_attribute :bar, default: 'foo'",['Suggestion'],False
89,6465939,I realize that I went slightly against my own spec – I'll update it such that the proc is passed the attribute name.,"['Fixing', 'Confirmation']",False
89,6474136,"Rather than add an option here, you can override the reader method in the abstract superclass:

```ruby
class Abstract
  class_attribute :bar

  def self.bar
    raise NotImplementedError
  end
end

class Subclass < Abstract
  self.bar = 'now defined'
end
```","['Code', 'Suggestion']",False
89,6494703,"@jeremy this is true, but that does kind of grapple against the declarative nature of class_attribute. By allowing for a callable thing to be passed as an option, it keeps the logic localized.",['Mention'],False
89,6494759,It adds complexity to an otherwise very simple declaration. Ruby doesn't have defaults on `attr_accessor` either and we get along ok :),"['Answer', 'Objection', 'Suggestion']",False
285,3690313,"I like it. It will reduce the mistakes related to join tables a lot. If other core team members agree with this patch, we could even add a generator shortcut like: `rails g migration join_table_users_and_labels` (yes, I am a lazy bastard)","['Suggestion', 'Confirmation', 'Accept', 'Answer']",False
285,3691368,"Seems easy to forget that there's a special way to create join tables, though.

Could we solve the original problem by just populating timestamps on join tables, too?","['Suggestion', 'Question']",False
285,3691382,"@jeremy I am also fine with populating timestamps on join tables, although it seems @jonleighton doesn't like the idea much.",['Mention'],False
285,3691694,"I'm not a fan of more complexity there either, but it feels worth being able to use a ""stock"" `create_table` as a join table.

Less for people to think about or look up in docs, and it's interchangeable with a `has_many :through` without migrating.","['Suggestion', 'Objection']",False
818,4860830,"your PR needs a rebase!


Thanks :-)","['Suggestion', 'Gratitude', 'Objection']",False
818,4868185,Voilà !,"['Answer', 'Non-english']",False
818,4920171,"thanks for rebasing. Let me get someone to review this :-) 

Cheers, 
Arun

cc/ @spastorino can you look this PR ?",['Gratitude'],False
818,5544331,@jeremy please take a look in this pull request and also see if [this comment](https://github.com/rails/rails/pull/4254/files#L0R442) is still relevant,"['Mention', 'Request']",False
818,5616495,"Ok, looking good to me! Thanks for your patience, @alexeymuranov  :)","['Mention', 'Confirmation', 'Gratitude']",False
818,5619839,yay!,['Gratitude'],False
647,3692683,Why are you resubmitting the same PR once every few days?? #4600 #4622 #4638,['Question'],False
647,3692720,"@vijaydev I am sorry but there was some problem with my fork so had to delete them, reopen the PR.",['Mention'],False
647,3965292,Why is this change needed? ,['Question'],False
647,3967069,"@vijaydev  as there is already a ````logger```` method defined which returns ````@target.logger```` , so instead of calling ````@target.logger ```` again, it makes sense to use the ````logger```` method. ",['Mention'],False
647,3977596,"@railsaholic, u r right!!","['Confirmation', 'Mention']",False
647,4546947,@josevalim  Is it good enough?  Thanks,"['Question', 'Mention']",False
647,4547125,"Actually this only adds one more method call without any profit.
Plus if `logger` method is redefined by user, but `logger?` is not for some reason - this can lead to bugs as checked and returned objects can be different","['Suggestion', 'Answer', 'Bug']",False
647,5438847,"@railsaholic thank you for your patch, but I believe the method is clearer by using `@target.logger` since it already tests for `@target.respond_to?(:logger)` in the same line.",['Mention'],False
821,3671649,"@rafaelfranca Hey, we don't allow changelogs to be edited in docrails.",['Mention'],False
821,3671696,"Yeah, you are right. Sorry, I thought that was a typo in a Guide",['Apology'],False
822,3671731,Why use a symbol instead of just passing the separator as a string?,['Question'],False
822,3680990,"It just looks aesthetically acceptable to me.
If you think it's useless, I'll close this pull request.",['Accept'],False
822,3682692,@josevalim wdyt? ,['Mention'],False
822,3682873,Thanks but I will close this since I checked with the others and they are :-1: on it as well.,"['Gratitude', 'Reject']",False
820,3669834,"Using `:rubygems` in the Gemfile means that it's actually accessing http://rubygems.org instead of https.  I'd like to propose that we revert this change as I think https is a better default.  Thoughts?


FYI - Some time back I had submitted a pull request to bundler to change the default usage of `:rubygems` to be https but it was not merged due to SemVer.  More info here: https://github.com/carlhuda/bundler/pull/1585",['Suggestion'],False
820,3670624,There's honestly no benefit to using HTTPS when requesting rubygems. I don't see why the argument is made one way or another here.,['Objection'],False
824,3673204,"Rather than disable the GC, why don't we just close the tempfile after performing the mv?  It seems like we could just flush the tempfile, move, then close.

/cc @jeremy ","['Suggestion', 'Answer']",False
824,5518302,Any thoughts on this @tenderlove?,"['Mention', 'Question', 'Fixing']",False
824,5520309,"Closing the tempfile shouldn't expose it to possible GC - wtf?

/blame @NZKoz ",['Objection'],False
824,5520483,@jeremy tempfiles are rm'd from the filesystem [via a finalizer](https://github.com/ruby/ruby/blob/trunk/lib/tempfile.rb#L133-134). /play tmyk,"['Mention', 'Answer']",False
824,5520532,"Yeah, but there's still a live reference to the Tempfile object. Closing the file descriptor shouldn't cause it to be eligible for GC.","['Objection', 'Bug', 'Answer']",False
824,5520816,"You're right.  The only thing I can think is that somehow [`check_name` somehow collides with the actual tempfile name](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/file/atomic.rb#L35-38), or somehow the FS is cleaning up the temp file dir.  Either way, I don't see how GC could have anything to do with this.","['Suggestion', 'Confirmation', 'Answer']",False
824,5522448,"Yeah, I fail to see how GC could be causing this,  sticking GC.start in the method didn't trigger it.

seems more likely that @tenderlove's check_name theory is the culprit.","['Suggestion', 'Mention']",False
824,5522492,I'm closing this until we have a repro.  Thanks!,"['Confirmation', 'Reject']",False
831,3667844,"Is there any failing test so we can check with that?? 

",['Question'],False
831,3677403,"No I can not, because apparently it works fine.

I am not sure why it was not working for me, nor am I sure why it does work since Date#advance is not defined in Time::Calculations and none of the requires at the top of Time::Calculations add it.

    rails[master]/ › irb
    >> require 'active_support/duration'
    => true
    >> require 'active_support/core_ext/time/zones'
    => true
    >> require 'active_support/core_ext/time/conversions'
    => true
    >> Date.new.advance minutes: 1
    NoMethodError: undefined method `advance' for #<Date: -4712-01-01 (-1/2,0,2299161)>
        from (irb):4
        from /home/caleb/.rvm/rubies/ruby-1.9.2-p290/bin/irb:16:in `<main>'
    >> Time.new.to_date.advance minutes: 1
    NoMethodError: undefined method `advance' for #<Date: 2012-01-26 (4911905/2,0,2299161)>
            from (irb):5
            from /home/caleb/.rvm/rubies/ruby-1.9.2-p290/bin/irb:16:in `<main>'

But...

    rails[master]/ › irb
    >> require 'active_support/core_ext/time/calculations'
    => true
    >> Date.new.advance minutes: 1
    => #<Date: -4712-01-01 (-1/2,0,2299161)>

So it clearly works somehow.  I'm just not sure where active_support/core_ext/date/calculations is being required, or more specifically where Date#advance is being defined.


",['Fixing'],False
829,3674757,This breaks shared_examples_for in rspec so it'd be awesome if this could be backported to 3.2 as well.,['Suggestion'],False
826,3673908,"Thanks for the patch. I've added some comments. Please address them and file a new PR against master, not 3-2-stable.",['Request'],False
826,3673919,Another comment: new applications should be generated with `config.active_record.dependent_restrict_raises = false`.,['Suggestion'],False
826,3673926,Please also specify in the documentation that an error will be added to the model.,"['Suggestion', 'Request']",False
826,3673928,"Also, needs a CHANGELOG entry.",['Suggestion'],False
828,3669873,Bad Pull Request. Please fix this. Or create new one.,['Objection'],False
828,3669884,Yep. Definitely a bad one. Sorry about that.,['Apology'],False
833,3396184,"+1 @chinshr and I recently came across this issue at work, would be good to see this pulled.","['+1 (Plus One)', 'Mention']",False
833,3667867,Can you please do a rebase with your PR. I think some of the change are already there.,['Request'],False
833,3680756,@arunagw I rebased but the issue is still present.,"['Bug', 'Mention']",False
833,4017417,cc/ @tenderlove ,['Mention'],False
833,4024906,"Can we do this test without an `instance_variable_set`?  I believe the logger could be nil, but surely we should test the public API that causes it to be nil.","['Request', 'Question']",False
833,4390245,"@pwim seems your changes is already done here b5c939dcb3979901fc31f8c79a4fde58999052e8

Can you please fix the test and fix this PR??

Cheers, 
Arun","['Request', 'Fixing']",False
833,4406745,"Yes, the changes are there so this PR is no longer necessary.","['Confirmation', 'Answer']",False
833,4409652,@pwim Cool thanks :-),"['Gratitude', 'Mention']",False
843,3687199,"I found this

```
./railties/guides/source/configuring.textile:* +config.colorize_logging+ specifies whether or not to use ANSI color codes when logging information. Defaults to true.
```",['Code'],False
838,3684839,+1,['+1 (Plus One)'],False
838,3684852,+1,['+1 (Plus One)'],False
838,3684963,+1,['+1 (Plus One)'],False
838,3684975,+1,['+1 (Plus One)'],False
838,3685044,+1,['+1 (Plus One)'],False
838,5487327,"The tests all pass;  Though should the following lines `Time.now.to_f` be changed to `Time.now.to_i` ?

cc @tenderlove ",['Mention'],False
838,5493358,I don't think we need to change the `Time.now` line.,['Reject'],False
846,3696474,"Umm... Thanks, again!",['Gratitude'],False
849,2188173,cc @spastorino,['Mention'],False
849,2188174,cc @josevalim,['Mention'],False
849,3702780,"This patch breaks mswin32 ruby. Because mswin32 version of ruby installed rake.bat instead of rake with shebang line and rake.bat is bat file (special type of windows shell script) embeded ruby script in it.
The patch makes re-launch command line as 'ruby.exe rake.bat assets:precompile'. Then ruby will read bat file directly and makes error : PATH/rake.bat:1: syntax error, unexpected tIDENTIFIER, expecting $end
Here is fixed version of the patch.   https://gist.github.com/1695503

I wonder if you pull the patch, thanks.",['Bug'],False
849,3702853,@arton please provide a PR so everyone can follow the discussion,['Mention'],False
849,3703025,"@spastorino Oh, sorry. I'll try it.",['Mention'],False
848,3700412,Way easier to read :) :+1:,['+1 (Plus One)'],False
848,3700816,:+1:,['+1 (Plus One)'],False
845,3543368,Thanks for the pull. I am in general not a fan of overriding `to_s`. But let's see what other core members think about it. /cc @tenderlove @jonleighton @fxn ,"['Gratitude', 'Suggestion', 'Mention']",False
845,3545690,"I agree with @josevalim; `render` is domain specific terminology, whereas `to_s` is not. If these classes were public then maybe I would be persuaded otherwise, but I think we are agreed that they should remain private, hence there is no great advantage in making it easier for people to use in their erb files.","['Mention', 'Accept', 'Confirmation']",False
845,3547932,":-1: to change `render` to `to_s`, for the same reasons that @jonleighton. But I liked the others changes.","['Mention', 'Suggestion', 'Objection']",False
845,3694975,"I believe the most important changes were already applied by @rafaelfranca's pull request, so this issue could be closed.","['Mention', 'Reject']",False
844,3694939,"Awesome, this feature is a lot more useful this way, great work :+1:","['Gratitude', '+1 (Plus One)']",False
844,3698612,:+1: Fantastic work @Manoj! Looking forward to seeing this merged! /cc @jonleighton ,['+1 (Plus One)'],False
844,3699560,"Added some more comments, thanks.",['Gratitude'],False
844,3707470,@asanghi @carlosantoniodasilva @NoICE Thank you all for your input. :),"['Mention', 'Gratitude']",False
844,3707472,"@jonleighton Thanks for the comments, I have addressed the suggested modifications. Please comment. :)","['Mention', 'Gratitude']",False
844,3707902,I'd simplified how the error message is defined [15154c0](https://github.com/pacoguzman/rails/commit/15154c0d8c656b664fb0d387951a5bd62b0a9da7),"['URL', 'Bug']",False
844,3722339,@pacoguzman thx for the refactoring :),"['Mention', 'Gratitude']",False
844,3729275,added some more comments. please also pull in @pacoguzman's refactorings.,"['Mention', 'Request']",False
844,3735550,"@jonleighton addressed the suggested improvements, also included @pacoguzman's refactorings. :)",['Mention'],False
844,3739478,"@jonleighton Any chance we can get this ""dont raise an exception"" feature backported to Rails 3.2.x ? Or has that boat has totally sailed? 

There won't be any deprecation warning in 3.2 of course but at least we'll be able to use the feature by using the configuration option. What do you think?",['Question'],False
844,3744166,@asanghi I think the ship has sailed I'm afraid - we can't add more features to 3.2 now it has been released.,"['Answer', 'Mention']",False
844,4032150,"I'm not sure if this is the right place to ask, but don't forget to document `:restrict` here: http://guides.rubyonrails.org/association_basics.html

Thanks, looking forward to using this feature.",['URL'],False
844,4032359,"@jaredbeck done .. committed to docrails https://github.com/lifo/docrails/commit/f49ec92866f6d8f27617b5723bff99ac0f7ca92f
/cc @vijaydev ",['Mention'],False
844,7564210,I really don't like this global setting. Let's push this down to where it's being defined and go explicit. So have dependent: :restrict_with_exception and :restrict_with_validation or something like that.,['Suggestion'],False
844,10632543,"If I try to delete associated model with nested attributes will it work correctly? I think that parent model won't hold error messages so. I don't see tests for this case, so I see that it won't work as it expected",['Question'],False
856,3707987,"this part already merged with given commit 
https://github.com/rails/rails/commit/e89a7f5ceeadc7b7d654c82b730d6340176e5a99

closing.",['URL'],False
853,1126561,"Are you sure this would work as intended? IIRC, Rails stores (date)times in UTC. My system runs in CEST (UTC+2), the application's time zone is set to 'Berlin' (also CEST/UTC+2) but the values are stored as UTC.

I have:
TimeEntry.create!(:date => '01.05.2011', :starts_at => '09:00', :ends_at => '19:00')

Querying this directly via connection.select_value gives me 2011-05-01 07:00:00. If I use the ActiveRecord object in stead, I'm getting Sun, 01 May 2011 09:00:00 CEST +02:00.

Note that this could also be because my PostgreSQL server is configured this way – it's one of my first PG projects. :-) (Yes, I've seen that your patch is for MySQL – but the way Rails stores datetimes with regard to time zones is the same across databases, right?) But if I'm right, your patch would probably have to be adapted to ensure that the time zone's always UTC. If I'm wrong, don't mind me. :-)",['Question'],False
853,1127086,"Hi, clemens. I am sorry, but I don't get what you are trying to say or why  are you talking about PostgreSQL. This patch is about getting useful values from `UNIX_TIMESTAMP` or other MySQL functions, which rely on the setting of  time zone of the MySQL RDBMS (`CURRENT_TIMESTAMP()`, `CURRENT_TIME()`, `CURRENT_DATE()`, and `FROM_UNIXTIME()`). 

As I wrote in the first post, the setting of the time zone of the MySQL RDBMS is usually `SYSTEM`, which means, that the time zone is set to whatever the system administrator decided, which will usually be the local time zone  of the place, where the system physically resides.

You have correctly pointed out, that the values stored by Rails in `datetime` columns are usually in `UTC`.  What you get if you query (from Rails app.) the `UNIX_TIMESTAMP` of any such value?  (Sidenote: `UNIX_TIMESTAMP` function returns an integer value, so no time-related conversion in Rails takes place.) Now is the answer ""that depens, probably something incorrect, because the `UTC` value was interpreted (in MySQL) as a value in `SYSTEM` time zone, which is ... (_something nobody cares, because you are using some hosting abroad_)"".  My intend is to use this patch to set the time zone of my sessions to `UTC` to always get proper values from functions like `UNIX_TIMESTAMP` applied to `datetime` type of values.  If someone is using `config.active_record.default_timezone = :local`, then he'll probably not set his sessions time zone to `UTC`.","['Code', 'Objection']",False
853,2335034,"I recommend you use a datetime column and the UTC_TIMESTAMP() function instead.

Otherwise, this is such a niche case that I don't think it qualifies for inclusion in main database.yml config. It's something you can set yourself in a config/initializer, though!",['Suggestion'],False
853,3706672,"@jeremy This is primarily a problem for legacy databases. Or for those of us with large datasets ie billions of rows the space saving made by using timestamp can really add up.

At the moment I do the following in config initializer


    require 'active_record/connection_adapters/mysql2_adapter'
    module ActiveRecord
      module ConnectionAdapters
        class Mysql2Adapter
          private
          alias old_configure_connection configure_connection
          def configure_connection
            old_configure_connection
            execute(""SET SESSION time_zone='+0:00'"", :skip_logging)
          end
        end
      end
    end

It would be great if there was a nicer way",['Code'],False
853,3768283,I ran into this today as well.. big pain to track this down.,['Confirmation'],False
853,3768295,"Note: not Rails' fault this provides more detail:

http://bugs.mysql.com/bug.php?id=15654",['URL'],False
858,3711269,This looks great! Gives the exact behavior I was looking for in the issue,['Confirmation'],False
858,3725366,"+1, good for me",['+1 (Plus One)'],False
858,3745537,Please send this pull request to master and not 3-2-stable.  We can decide whether or not to backport after it has been applied to master.,['Request'],False
858,3745795,"@tenderlove, [done](https://github.com/rails/rails/pull/4806). It'd be nice if you leave some comments on the inconsistent behavior I described in the comment to the original issue. Should we do smth about that?",['Mention'],False
857,3710321,Seems fine to me but please don't change the code under vendor,"['Request', 'Confirmation']",False
857,3710425,"Fixed, sorry I missed that",['Apology'],False
857,3711000,"In most of these cases, `for` is easier to read than the `#each` equivalent.

No sense changing them wholesale because a Reddit thread says they're uncommon!","['Suggestion', 'Answer']",False
857,3711318,"I've applied the patch not because of Reddit thread, probably I should've commented my thoughts first :(.
I've applied it because I find the code better to read but if you don't like feel free to revert it","['Answer', 'Fixing']",False
857,3711387,"Thanks for the feedback. Now that I look at it again, I agree that `for` loops are easier to read when dealing with ranges.

Here's a [pull request](https://github.com/rails/rails/pull/4747) to revert to using `for` loops for ranges.","['Accept', 'Gratitude']",False
879,3725116,That isn't a typo. That's the 5 hours time difference between UTC and EST.,['Objection'],False
879,3725959,Oh. Thanks for the clarification. I see that the zone is set to EST up higher in the doc.,['Gratitude'],False
854,3707154,Not sure about this patch. This can hide errors when you actually want to pluck given an order. I think it is actually up to your application to call `unscoped/reorder/only/except` when you want to ignore the previous conditions.,"['Suggestion', 'Answer', 'Bug']",False
854,3707156,"Anyway, thanks for the pull request and the well described issue. I will leave it open to see what others think.",['Gratitude'],False
854,3725922,Can anyone shed some light? Is currently a blocker for us (as described in #4758),"['Question', 'Request']",False
854,3735505,"@josevalim I agree with you in general, but this is breaking the _ids method on some associations where that previously worked on 3.1. So I think we need to deal with that in some way. Probably we should revert the _ids method to not use `pluck`?","['Mention', 'Suggestion']",False
854,3735626,"The problem is in `uniq` that was added to `ids_reader`. In previous version of `ids_read` there was no uniqueness.
See this line in collection_association.rb `relation.uniq.pluck(column)`. See commit 109db5a that introduced that change.
`uniq` gives SELECT DISTINCT and that's why error is thrown.

Let's ask @lest why he added `uniq` in relation.",['Mention'],False
854,3735686,"Yeah, we can either do the uniq in Ruby or change it to not use pluck.
Probably the second.","['Answer', 'Suggestion']",False
854,3736338,"Uniqueness wasn't present in previous versions of ids_reader, that's why we can just remove `uniq` from relation. See #4783","['Answer', 'Suggestion']",False
861,3713965,`for` loops use each underneath and it's not idiomatic.,"['Answer', 'Suggestion']",False
861,3714054,Not keen on this either. IMO for in ruby is basically vestigial limb inherited from earlier block-less languages.,['Suggestion'],False
861,3738365,"imho, in most of these cases upto is better then using each and ranges :)",['Suggestion'],False
861,3738524,Doesn't make much sense for me either. :-1:,['Objection'],False
861,3745311,"I agree with @jurriaan, it seems better that we use `upto` rather than loops and ranges.  Anyway, I don't find `for` to be readable at all.  </2cents>",['Mention'],False
896,3011301,"Not sure when sqlite3-journal files generated. 

Also your PR needs a rebase.",['Suggestion'],False
896,3730889,Closing this for now. Please submit a new PR again.,"['Request', 'Reject']",False
883,3611476,"You might want to just update the code in the original pull request, to keep the conversation together there.

BTW I'm +1 on this idea. .where('1 = 0') is a lame hack.","['+1 (Plus One)', 'Suggestion']",False
883,3617656,"I'm OK with this, but I'd like more opinions.  @jonleighton ?",['Mention'],False
883,3621135,"I'm okay with this too, but I think it would be better if:

* The rationale was explained in the documentation (also explained in terms of the 'null object pattern' as that's what this is)
* There was a CHANGELOG entry
* Ideally I'd prefer if we used polymorphism. I.e. if Relation#none returned an instance of a NullRelation that implemented this behaviour, rather than having to have a `@none_value` var and special code in `exec_queries`.

Thanks.",['Suggestion'],False
883,3637043,"I agree with @jonleighton.  @xuanxu can you make those changes, and we'll merge it in.  Thanks for the contribution! :-)",['Mention'],False
883,3637693,"OK, I will try to make those changes","['Fixing', 'Answer']",False
883,3727293,"@tenderlove Done!: #4768
¿should I backport it to 3.2?",['Question'],False
883,3745091,"@jonleighton can you review?

@xuanxu no, we will not backport this (as it is a new feature).",['Mention'],False
869,3720125,cc/ @jonleighton ,['Mention'],False
869,3746270,This broke the build with identity map turned on.  Can you please fix the tests and resend?  Thanks.,"['Request', 'Question']",False
869,3755456,"Sorry about that, my bad.
I got a fix working, but one test still fails:

test_instantiation_doesnt_try_to_require_corresponding_file(InheritanceComputeTypeTest) [../inheritance_test.rb:267]:
ActiveRecord::RecordNotFound expected but nothing was raised.

I am looking into it.","['Fixing', 'Code']",False
869,3766792,I submitted https://github.com/rails/rails/pull/4833 as a fix for the failing tests in active_record,"['URL', 'Answer', 'Fixing']",False
897,1871355,"Nice fix. It would certainly solve our problems with getting a users IP when the user, proxy and app server are all on the LAN. We've had to fall back to reading X_FORWARDED_FOR directly.","['URL', 'Confirmation']",False
897,2720910,"Very useful, I hope someone merge it soon ^^","['Gratitude', 'Request', 'Confirmation', 'Suggestion']",False
897,3730895,@gsterndale your PR needs a rebase. I think some cod changes is done in the same file.,"['Mention', 'Suggestion']",False
897,3851077,Thanks @arunagw rebased.,"['Mention', 'Gratitude']",False
897,3851142,cc/ @josevalim ,['Mention'],False
897,4243925,Will this be included in 3.2.2 final?,['Question'],False
897,10257684,It would be nice to get this into 3.2.x at some point. I've been monkey-patching this for months. @spastorino can you do anything?,"['Mention', 'Request', 'Suggestion']",False
897,34154738,Looks like this never made it in to 3.2.16 even though it was merged to master 2 years ago?! *confused*,"['Objection', 'Question']",False
897,34164527,"@courtland @donaldpiret : If you look at the merge commit, you can see just under the message the releases that include it. Moreover, 3.2.x don't receive any new fixes anymore (apart from security ones).","['Mention', 'Suggestion']",False
897,34183059,"@robin850 Thanks for clarifying, that makes sense!","['Gratitude', 'Mention']",False
901,3730961,Your PR needs a rebase. Some code changes is done in this file. I think after that we can bring more attention on this from team.,['Suggestion'],False
901,3798820,"Rebased master onto my branch and squashed the commits.

Personally, I ended up throwing in the towel on using Perforce directly and now use it via git-p4. I still think there should be options to skip/configure the git specific stuff though.","['Fixing', 'Digression', 'Suggestion']",False
901,5476451,"The tests encounter a parse error at 
rails/railties/lib/rails/generators/rails/app/app_generator.rb:302

ruby-1.9.3-p194","['URL', 'Bug']",False
901,5479882,"Apparently the same tests are being added to both app_generator and plugin_new_generator, confirm? If so, you can probably move them to [SharedGeneratorTests](https://github.com/rails/rails/blob/master/railties/test/generators/shared_generator_tests.rb), that is included in both.","['URL', 'Request']",False
901,5495894,I'll take care of that tonight and try to do a rebase on master as well.,['Fixing'],False
901,5500892,"I spoke too soon. I'm having trouble successfully installing the gem dependencies as described in the [edgeguide](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#set-up-and-run-the-tests). I get compatibility errors from bundler. Until i can figure out what to do about those, I can't run any tests.","['URL', 'Bug']",False
901,5961827,what's happening with this PR guys ??,['Question'],False
901,6134656,"I've just had baby, so I haven't had any time to make the suggested changes
and rebase.

On Mon, May 28, 2012 at 5:26 AM, Arun Agrawal <
reply@reply.github.com
> wrote:

> what's happening with this PR guys ??
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/2808#issuecomment-5961827
>","['Apology', 'Answer']",False
901,8494071,Closed in favor of #7614,"['Reject', 'Accept']",False
907,3007701,"Thanks for reporting the bug. I think perhaps we should be using `base_class` here. E.g. something like:

``` ruby
def sequence_name
  if base_class == self
    @seqence_name ||= reset_sequence_name
  else
    (@sequence_name ||= nil) || base_class.sequence_name
  end
end
```

Could you look into that please?
    ",['Code'],False
907,3007796,"Yes, it works, I also updated my pull request.","['Accept', 'Confirmation', 'Answer']",False
907,3731311,"This seems to break code where an inheritance tree defines both a table_name_prefix and defines a sequence pattern for all models inheriting from this tree.

Given:

```ruby
class A < B
end

class B < ActiveRecord::Base
  self.abstract_class = true
  self.table_name_prefix = 'core.'
  self.sequence_name = :autogenerated
end
```

The queries will work correctly, but because of the behavior of base_class, when the connection asks for the sequence_name, base_class returns A and not B.  A then resets the sequence_name and it is no longer pulled from the super, instead, you get a sequence name 'core.a_seq'

Seems we are missing a test case where the sequence_name is set in the base class and is retained in the subclass.

Are there any suggestions for work arounds? ",['Code'],False
903,2104229,There is a problem with this approach: calling `count` on an ActiveRecord::Relation mitigates any limit(n) that was previously set,['Objection'],False
903,2104283,"Inspect is meant to be used in tests and console only, not in a codebase.
Therefore I don't see any moment when we wouldn't want to have this set to true.
Moreover, if we're comparing a lot of objects in a test, the result will be biased.

-1",['Objection'],False
903,2113054,"The problem only exists when in production one has a exception notifier that sends an email containing the backtrace + an inspection of the env variables back at the developers. I believe that filling the production machine's memory with a huge inspection string is not one of the admin's favorite things.

My solution might be a bit ugly but in development it served me and a couple of my colleagues well when a broken Arel query inspection started filling in more than 2GB of ram.","['Suggestion', 'Answer']",False
903,3730914,What's happening to this PR guys! Are we still on this?? Or this can be closed??,['Question'],False
903,4450718,"Closing this for now. Please reopen this with more details. 


Cheers, 
Arun","['Reject', 'Request']",False
916,3735248,"Cheery-picked to `3-2-stable`. If you would like, please submit a backport for `3-1-stable`.",['Request'],False
906,3731635,"Humm, the generated url was not shown, I'll paste the code in the gist: https://gist.github.com/1707977",['URL'],False
906,3734442,"This change is backwards incompatible for people relying on the old behavior. That said, could you please add an entry to the CHANGELOG saying that this helper will now use the favicon in app/assets by default?","['Request', 'Mention']",False
906,3737595,"and tests, the existing ones passes? do we need new ones?","['Question', 'Accept']",False
906,3739490,Done :-),"['Fixing', 'Answer']",False
906,3741064,Squash the commits into one please and push -f,"['Suggestion', 'Request']",False
906,3743736,"PR contains *.swp files, remove them please",['Request'],False
906,3743846,"Ok, I saw the .swp files.. sorry, I'll remove them.",['Apology'],False
906,3744001,"I already squashed the commits into one and make a new pull request: https://github.com/rails/rails/pull/4803

I'll close this one, ok?!","['Accept', 'URL']",False
917,3736427,Thanks for the fix! This would close #4758,['Gratitude'],False
923,3764165,Done in another PR. Closing.,['Reject'],False
921,3608397,"Nice, I like the method not hitting the database, but don't like it using the where method, I've implemented it using a none_value attribute here: https://github.com/rails/rails/pull/4609

 ",['URL'],False
921,3762016,https://github.com/rails/rails/pull/4805 is merged. Closing.,"['Accept', 'URL']",False
919,5495860,"All of the tests pass.

cc @tenderlove ","['Mention', 'Confirmation']",False
919,5505610,"Any thoughts about the names by the way?  'Filter' sounds too general, can be reserved for more complex operations.  Maybe `#deep_slice` and `#deep_except`?","['Question', 'Suggestion']",False
919,5730207,"Hey guys. We think that this kind of things should go to plugins. Active Support is for things that we use in the Rails code and common patterns.

Thank you for the pull request.","['Gratitude', 'Suggestion']",False
927,3769181,"*bump*

Would it make this any more compelling if I pointed out that this isn't just an optimization to reduce the number of objects created.   By running, eg, 

```ruby
client = company.clients.find_or_initialize_by_foo('bar')
client.save
company.save
```

you end up persisting two Client objects to the database - one in the return value from `find_or_initialize`, and one that's autosaved along with the `company.save`.",['Code'],False
927,3769304,"merged, thanks",['Accept'],False
924,3764366,"Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.",['Request'],False
924,3946677,"Hi Aaron,
I've submitted the pull request against master and tested everything
out. It awaits your leisure:

https://github.com/rails/rails/pull/4834

Cheers,
sk

On Wed, Feb 1, 2012 at 1:38 PM, Aaron Patterson
<reply@reply.github.com>
wrote:
> Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/4810#issuecomment-3764366",['Request'],False
924,4139215,"Hi Aaron,
Was looking at https://github.com/rails/rails/compare/v3.2.1...v3.2.2.rc1
and I noticed that the change to pslq didn't get backported. Do you
think that this will make 3.2.2?

Cheers,
sk

On Mon, Feb 13, 2012 at 1:55 PM, Sean Kirby <sskirby@gmail.com> wrote:
> Hi Aaron,
> I've submitted the pull request against master and tested everything
> out. It awaits your leisure:
>
> https://github.com/rails/rails/pull/4834
>
> Cheers,
> sk
>
> On Wed, Feb 1, 2012 at 1:38 PM, Aaron Patterson
> <reply@reply.github.com>
> wrote:
>> Can you please send this pull request to master?  Once it's merged to master, we'll backport to `3-2-stable`.
>>
>> ---
>> Reply to this email directly or view it on GitHub:
>> https://github.com/rails/rails/pull/4810#issuecomment-3764366",['Question'],False
924,4142581,"@sskirby thanks for reviewing the commits!  Yes, I meant to backport this before the release but totally forgot.  This will be in 3.2.2 final.",['Mention'],False
926,3767456,"We should honestly get rid of identity map. It was a great effort but the current limitations make it unusable in most apps. Alternatively, we can fix it and make it default.",['Suggestion'],False
926,3768577,"@josevalim agree.  [1, 2, 3, not it](http://www.urbandictionary.com/define.php?term=123%20not%20it).","['Mention', 'URL']",False
926,3774024,@josevalim what would be needed to make it usuable?,"['Mention', 'Question']",False
926,4707480,"I guess that should be closed now that IM was removed from master, thoughts?","['Question', 'Reject']",False
926,5530217,@carlosantoniodasilva agreed.,['Mention'],False
918,3737047,Can we add a test for at least 1 of those keywords?,"['Request', 'Question']",False
918,3737987,Is not enough to just prepend self always instead of checking against RUBY_KEYWORDS ?,['Question'],False
918,3738006,"Yeah, probably :P","['Confirmation', 'Answer']",False
918,3738444,@ayamomiji please do it and squash your commits :),"['Mention', 'Request']",False
918,3753661,"But i cannot just prepend `self.` always, this causes the DirtyTest to raise errors like these:

```
test_setting_attribute_will_result_in_change(DirtyTest):
NoMethodError: private method `attribute_changed?' called for #<DirtyTest::DirtyModel:0x007faa6b038b40>
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:373:in `method_missing'
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:314:in `name_changed?'
...

NoMethodError: private method `attribute_will_change!' called for #<DirtyTest::DirtyModel:0x007faa6b057568 @name=nil, @color=nil>
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:373:in `method_missing'
    /Users/ayaya/Projects/rails/activemodel/lib/active_model/attribute_methods.rb:314:in `color_will_change!'
...
```","['Code', 'Bug']",False
918,3753752,"i'll use `send` instead of prepending `self.` for prevent make aliases on private attributes.
i'm not sure should attributes always be public?",['Question'],False
918,4450456,What's happening here? :) ,"['Digression', 'Question']",False
918,5523658,Is this still an issue?,['Question'],False
918,5532907,"/cc @josevalim I don't see another way of doing this but I don't like it neither :/. Or we leave the Ruby keywords list or we remove the CALL_COMPILABLE_REGEXP optimization and always do send(:'#{send}', #{extra})","['Mention', 'Suggestion']",False
918,5544342,+1 for always do `send`.,['+1 (Plus One)'],False
918,5550786,":-1: I think this is just hacky. :( If they are reserved, we shouldn't be messing with it. We should do make behavior as predictable as possible. In other languages, users have to respect the reserved words. I think we should too. Just my $0.02",['Objection'],False
918,5556157,"@isaacsanders disagree, you can define a method called begin for your classes in pure Ruby. So why stopping people for doing that on AM attributes?","['Mention', 'Question']",False
918,5556311,I don't know. It is just my opinion. I feel bad that I can't vocalize why I feel the way I do.,"['Digression', 'Objection']",False
918,5559397,"@isaacsanders no worries :), I was giving my opinion too :heart: :heart: :heart:",['Mention'],False
918,5672714,@spastorino @josevalim are we good to go here? :),['Mention'],False
918,5672827,"@carlosantoniodasilva read my comment where I've /cced to @josevalim, let's wait for him","['Mention', 'Request']",False
918,5674748,"We should just use `self.` The reason `self.` is making dirty tests fail is because your changes are affecting a place it should not to. There are two methods in the attributes module that calls `define_optimized_call`, one is alias attribute and there is a second one. You are mistakenly affecting the second one. Here is a patch for example that makes your tests pass:

https://gist.github.com/2686886

Can you please update accordingly?",['Suggestion'],False
918,5921779,@josevalim are we good to go now? :),"['Mention', 'Question']",False
934,3778224,/cc @josevalim ,['Mention'],False
934,3778481,"@jeremy it looks good to me, let's merge?",['Mention'],False
934,3780153,"Nice job, especially with updated docs and guide.

There are a lot of other refactorings and style changes included, too, making it hard to review the code carefully.

:+1: here but please do separate pulls for refactoring and style changes next time!","['+1 (Plus One)', 'Gratitude']",False
934,3780285,"@jeremy thanks, we will be paying more attention to that from now on.",['Mention'],False
933,3740561,"Pretty please. Some of us still use Rails 2.3.x, and latest 2.3.x with latest rubygems results in ~40 lines of deprecation warnings from rubygems on startup. 

See: https://github.com/rubygems/rubygems/issues/145   

The rubygems team does not seem to consider it a problem. ",['URL'],False
933,3778169,"@jrochkind can you test this patch on your app, as I said in the note above I wasn't able to find instructions on how to setup a 2-3-stable development env so some feedback would be useful",['Mention'],False
933,3778246,"(about to be on vacation for two weeks, will try to do after I return.  
If I can figure out how to apply a patch to rails in a 2-3 app myself,  
I don't know either.)

On Feb 2, 2012, at 8:53 AM, Elia Schito wrote:

> @jrochkind can you test this patch on your app, as I said in the  
> note above I wasn't able to find instructions on how to setup a 2-3- 
> stable development env so some feedback would be useful
>
> ---
> Reply to this email directly or view it on GitHub:
> https://github.com/rails/rails/pull/4422#issuecomment-3778169","['Mention', 'Answer']",False
933,3778305,"It's probably enough to put:

```ruby
require 'rails/gem_dependency'

module Rails::GemDependency
  def self.add_frozen_gem_path
    @@paths_loaded ||= begin
      original_source_index = Gem::Specification.respond_to?(:dirs) ? Gem::SourceIndex.new(Gem::Specification.dirs) : Gem.source_index
      source_index = Rails::VendorGemSourceIndex.new(original_source_index)
      Gem.clear_paths
      Gem.source_index = source_index
      # loaded before us - we can't change them, so mark them
      Gem.loaded_specs.each do |name, spec|
        @@framework_gems[name] = spec
      end
      true
    end
  end
end
```

right before `Rails.boot!` in your application `config/boot.rb`.
",['Code'],False
933,4403969,"@elia The snippet in your last comment doesn't quite work. I got this error when I tried it:

    GemDependency is not a module (TypeError)

Changing module to class results in the error going away and the original warning being silenced. Have not tried this in production yet.",['Mention'],False
933,4424373,"@jwarchol that was a paste from a hack directly in rubygems :blush:

I tried and for me doesn't work *before* `Rails.boot!` but only **after**:

```ruby
# config/boot.rb stuff here...
# possibly bundler stuff here...

# All that for this:
Rails.boot!

require 'rails/gem_dependency'

class Rails::GemDependency
  def self.add_frozen_gem_path
    @@paths_loaded ||= begin
      original_source_index = Gem::Specification.respond_to?(:dirs) ? Gem::SourceIndex.new(Gem::Specification.dirs) : Gem.source_index
      source_index = Rails::VendorGemSourceIndex.new(original_source_index)
      Gem.clear_paths
      Gem.source_index = source_index
      # loaded before us - we can't change them, so mark them
      Gem.loaded_specs.each do |name, spec|
        @@framework_gems[name] = spec
      end
      true
    end
  end
end

```
","['Code', 'Mention']",False
933,4495483,"I'm working on removing all deprecations for all gem version in [elia#fix-railties-tests-for-latest-rubygems](https://github.com/elia/rails/tree/fix-railties-tests-for-latest-rubygems)

Right now I think I'm done from rubygems 1.3 up to 1.7, I also added some info on setting up dev environment in the README

Any feedback/help is really appreciated :bowtie:","['URL', 'Fixing']",False
933,5544380,"@jeremy @jonleighton @tenderlove hey guys, this pull request is pointing 2-3-stable branch. Could you take a look on it and see if we will accept or close it?

Thanks.",['Mention'],False
933,5561514,"I'm not seeing a final resolution or verified fix here. @elia could you open a pull request for your changes, instead?","['Mention', 'Objection']",False
933,5570277,"@jeremy, @rafaelfranca: see pull #6202, closing this one.",['Mention'],False
929,3774199,"Thanks :).

In principle I am hesitant to add that check, because it may hide that some code is not passing the bindings in its instrumentation call. Binds are a collection and so when no binds are used there's a collection, empty, but not `nil`.

There was a recent issue related to CACHE queries that I fixed in de161003c36a0cd967aa393e7706b12055770174 and will ship in 3.2.2. Have you seen any other use case?
","['Question', 'Gratitude']",False
929,3775395,"The cases where I was seeing this error appear were all using `find` with an `:include`, for example:

```ruby
User.find(
  current_user.id,
  :include => [
    :credit_card,
    :user_image,
    :sent_offers => {
      :sender => :user_image,
      :receiver => :user_image,
      :listing => [:listing_image, :listing_images]
    },
    :received_offers => {
      :sender => :user_image,
      :receiver => :user_image,
      :listing => [:listing_image, :listing_images]
    }
  ]
)
```","['Bug', 'Code']",False
929,3786584,"I cannot reproduce this failure on 3-2-stable with user has many posts. See the session:


    fxn@rails:~/tmp/test-4844 $ grep threshold config/environments/development.rb 
      config.active_record.auto_explain_threshold_in_seconds = 0
    fxn@rails:~/tmp/test-4844 $ script/rails c
    Loading development environment (Rails 3.2.1)
    1.9.3-p0 :001 > User.find(1, :include => :posts)
      User Load (3.3ms)  SELECT ""users"".* FROM ""users"" WHERE ""users"".""id"" = ? LIMIT 1  [[""id"", 1]]
      Post Load (0.5ms)  SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""user_id"" IN (1)
      EXPLAIN (0.6ms)  EXPLAIN QUERY PLAN SELECT ""users"".* FROM ""users"" WHERE ""users"".""id"" = ? LIMIT 1  [[""id"", 1]]
      EXPLAIN (0.1ms)  EXPLAIN QUERY PLAN SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""user_id"" IN (1)
    EXPLAIN for: SELECT  ""users"".* FROM ""users""  WHERE ""users"".""id"" = ? LIMIT 1 [[""id"", 1]]
    0|0|0|SEARCH TABLE users USING INTEGER PRIMARY KEY (rowid=?) (~1 rows)

    EXPLAIN for: SELECT ""posts"".* FROM ""posts""  WHERE ""posts"".""user_id"" IN (1)
    0|0|0|SCAN TABLE posts (~100000 rows)
    0|0|0|EXECUTE LIST SUBQUERY 1

     => #<User id: 1, created_at: ""2012-01-31 07:59:45"", updated_at: ""2012-01-31 07:59:45""> 

Could you post a way to reproduce the error?","['Code', 'Bug']",False
929,3907927,I was just getting this issue on 3.2.1. I changed to 3-2-stable and it's fixed it. Good work.,"['Gratitude', 'Confirmation', 'Fixing']",False
929,3908004,"@ihid excellent, thanks very much for the feedback.

The CACHE notification have binds now (and anyway we are no longer monitoring CACHE notifications). So I think we can close this issue.

@sferik if you find this error again please feel free to reopen.",['Mention'],False
929,3908885,Sounds good. Thanks for following up.,['Gratitude'],False
938,3810303,"Now, I realize that we updated rack-test to 0.6.1 on master, 3-2-stable, and 3-1stable.
Sorry, we miss this PR...

I'm closing this issue.
Thanks !",['Apology'],False
936,3798519,"Also spotted this, but the user argument is still missing.
`set_psql_env` should be handling this, but the rake tasks fail unless I provide an explicit user argument:

    `psql -U #{abcs[env]['username']} -f ""#{filename}"" #{abcs[env]['database']}`",['Bug'],False
936,3806968,"That's very strange, Chris, because my change only removes passing in the template as the last argument. If what you are saying is correct, db:test:prepare should not be working at all in master. Which means no one using PostgreSQL is able to run tests via the standard rake task.

Now that I think of it, however, I did only test the change as it applies to the 3-2-stable branch and not master. I will re-test against master. If something is wrong, I suspect that it's not because of the changes in this patch.",['Fixing'],False
936,3809545,"Well, by default psql uses the current OS user name if one isn't provided on the command line. Are you also running the rake tasks as a user that does not have direct access to the db? If so I'll have to check what's wrong with my environment.",['Question'],False
936,3831567,Just tested my patch against the latest master branch and (after applying https://github.com/rails/rails/pull/4910) everything seems to work just fine. I do not have a pg user that matches my username.,['URL'],False
936,3854345,"Just wondering if the suspicion that a username needs to be explicitly passed in to psql is what's keeping this pull request from being accepted.

If that's the case, the username issue is really a completely different issue and has nothing to do with the changes in this pull request. It should not be blocking this pull request, it should be in it's own ticket.",['Suggestion'],False
936,3857897,"@sskirby agreed. I've tested your patch in another environment and everything's working fine.
+1 for the pull request",['+1 (Plus One)'],False
931,1070412,SQLite 3 tests pass.,['Confirmation'],False
931,1095354,I'd like to avoid changing method signatures until Rails 4.0.  This change will break backwards compatibility with 3rd party adapters.,"['Suggestion', 'Objection']",False
931,1115044,@tenderlove should we leave this open then? or can we close?,"['Mention', 'Question']",False
931,1119560,Set up a milestone and add it?,['Question'],False
931,1119568,"Yes, we should set up a rails 4 milestone and add this.","['Suggestion', 'Confirmation']",False
931,1638469,How about changing its name to something like deprecated for rails 3-1 so people know it's going to go away? That would also minimize the confusion that @smartinez87 cites.,"['Question', 'Suggestion', 'Mention']",False
931,2334958,Milestoned @ Rails 4.0,"['Mention', 'Confirmation']",False
931,3374154,master is rails 4 now right? should this be merged?,['Question'],False
931,3376489,Yeah! Master is Rails 4.0 :heart:,"['Answer', 'Confirmation', 'Gratitude']",False
931,3776180,@smartinez87 I think it'd be good to rebase so it can be merged now :),"['Suggestion', 'Mention']",False
931,3777191,"had trouble rebasing master again, so opened a new PR #4850","['Objection', 'Bug', 'Fixing']",False
931,3782045,"closing this, since #4850 was merged",['Reject'],False
942,3800707,"I don't think we should even call the responder. We should just yield the block, as in respond_to.",['Suggestion'],False
942,3801285,"Ah yeah, you're right. Fixing that now.",['Fixing'],False
942,3801329,`retrieve_response_from_mimes` could probably return the collector and then we ask it directly if there is a response (and invoke) or fallback to the default one (with the responder).,['Suggestion'],False
942,3804100,Code has been updated.,['Answer'],False
942,3810688,"Yay, don't forget #4870 for 3-2-stable as well.",['Request'],False
935,3797518,NIce but the option name is not clear for me. Maybe skip_after_callbacks_if_halted or something like that instead?,['Suggestion'],False
935,3797566,`halted` is something internal. `:terminator` is part of the API. What about `skip_after_callbacks_if_terminated` ?,"['Suggestion', 'Question']",False
935,3797592,Sounds great.,['Confirmation'],False
935,3809525,Renamed.,['Confirmation'],False
935,3809563,"Awesome, thanks!",['Gratitude'],False
945,3825958,"Agreed it is better but if we are going to use present?, we need to require
the proper from AS.","['Confirmation', 'Answer']",False
945,3825970,Its already loaded. Have tested the test cases which is running fine.,['Answer'],False
945,3825987,Are you running the test case in isolation mode?,['Question'],False
945,3826021,Am running all the active model test cases.,['Answer'],False
945,3826050,"You need to run them in isolation in order to catch missing requires. In any case, we should just add the missing require.",['Suggestion'],False
945,3826066,will do if it is missed,['Confirmation'],False
945,3826529,"I made another pull request for this issue,   please refer #4904",['Request'],False
950,2079945,"Could you rebase your commits into one please ?
There's also a test missing :(",['Request'],False
950,3817666,"I think that this issue was fixed on 3-1-stable, 3-2-stable, and master.
I think that I should close this issue. What do you think ?

BTW, I cannot find a testcase for non english filename, and I'll send PR for it.",['Question'],False
950,3829851,"Hi ! @tanin47 
I'm closing this issue, because it seems that this issue is fixed already on 3-1-stable, 3-2-stable, master.
Please comment to this issue, if needed :-)","['Mention', 'Confirmation']",False
950,3849731,Alright :),['Answer'],False
948,3824513,/cc @jonleighton ,['Mention'],False
948,3828319,"Thanks for the patch, but this is not the right way to fix it. We need to fix the attribute accessor within AR to actually return the correct value.","['Fixing', 'Gratitude']",False
948,3829370,"Attribute accessor is working. All test are passing (with and without patch also).

You can try this example with and without my patch

``` ruby
require ""rubygems""
require ""action_view""
require ""active_record""
require ""logger""

ActiveRecord::Base.logger = Logger.new(STDOUT)
ActiveRecord::Base.establish_connection(
  :adapter => 'sqlite3', 
  :database => ':memory:')

ActiveRecord::Schema.define do
  create_table :items, :force=>true do |t|
    t.string :name
  end
end

class MySerializer
  def load(str)
    str.swapcase
  end

  def dump(str)
    str.swapcase
  end
end

class Item < ActiveRecord::Base
  serialize :name, MySerializer.new
end

@item = Item.new
@item.name = ""lowerUPPER""

puts @item.name
puts @item.attributes[""name""]

@item.save!

@saved_item = Item.last

puts @saved_item.name
puts @saved_item.attributes[""name""]

include ActionView::Helpers::FormHelper
puts text_field(:item,:name)
puts text_field(:saved_item,:name)

```

With patch

``` ruby

""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
<input id=""item_name"" name=""item[name]"" size=""30"" type=""text"" value=""LOWERupper"" />
<input id=""saved_item_name"" name=""saved_item[name]"" size=""30"" type=""text"" value=""LOWERupper"" />
```

Without patch

``` ruby
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
""lowerUPPER""
<input id=""item_name"" name=""item[name]"" size=""30"" type=""text"" value=""#&lt;struct ActiveRecord::AttributeMethods::Serialization::Attribute coder=#&lt;MySerializer:0x0000000187dad8&gt;, value=&quot;lowerUPPER&quot;, state=:unserialized&gt;"" />
<input id=""saved_item_name"" name=""saved_item[name]"" size=""30"" type=""text"" value=""#&lt;struct ActiveRecord::AttributeMethods::Serialization::Attribute coder=#&lt;MySerializer:0x0000000187dad8&gt;, value=&quot;lowerUPPER&quot;, state=:unserialized&gt;"" />
```

Maybe I'm not getting it. Can you tell me where I'm wrong thinking about this problem @jonleighton? Attribute reader is returning unserialized value. But in form helpers serialized values are used. That's how this was working in Rails 3.1.3.",['Code'],False
948,3829442,"It's the `_before_type_cast` accessor that is broken, i.e. `@saved_item.name_before_type_cast`","['Bug', 'Answer', 'Code']",False
948,3829518,So ```@saved_item.name_before_type_cast``` should be ```LOWERupper``` in my example @jonleighton ?,['Mention'],False
948,3836776,We noticed this bug on v3.2.1. It's definitely a regression from 3.1.1.,"['Bug', 'Confirmation']",False
948,3842266,@listrophy no. 3.1.3 is working still.,['Mention'],False
947,3827936,Commits Squashed to one.,['Answer'],False
947,4795780,@josevalim could you please review / merge?,['Mention'],False
946,2309566,+1 .. drove me nuts for an hour!!,['+1 (Plus One)'],False
946,2309746,.. and is a serious bug which leads to not beeing able to delete any objects when using auth headers,['Bug'],False
946,3827727,hey guys ... where is the problem to merge this ???,['Question'],False
946,4098792,This should have some test included but I can verify the code in this pull requests works... but then again a similar bug (with #build) which also has a test accompanying it has yet to be merged...,['Bug'],False
946,4825229,ActiveResource has moved to you own repository. I'm closing this. Please open a new pull request in the [ActiveResource](https://github.com/rails/activeresource) repository if you want.,['URL'],False
955,3831091,Does this fix #2575?,['Question'],False
955,3831245,It seems that this problem is same one ;-),['Confirmation'],False
955,3831376,@ihid Do you think about this PR ? Will we have any problem ? (or should close #2575 too ?),['Mention'],False
955,3831995,"I've got no issue with this PR at all. It's good. Thanks! :)
I'll check later to check it fixes my issue. I'll either mark the issue as closed or send a further PR that fixes that as well.  ","['Gratitude', 'Accept']",False
955,3905611,Great update guys - wonderful to see this fixed :-) Is it too much to ask to have it posted here when it is inserted into core?,"['Gratitude', 'Question']",False
955,3906603,"Oh, by the way, with core, I mean stable release","['Confirmation', 'Answer', 'Suggestion']",False
955,3910687,"I closed the other ticket and then realised I still had a monkeypatch there that was causing it to work regardless of your patch. I've just spent half an hour trying to get master branch working on my codebase and I'm giving up. I get so many dependancies failing in my Gemfile.

I'm pretty certain that what you've got there will fix it, so I'm just going to leave the other ticket closed and I'll keep an eye on it. Thanks, @kennyj.","['Mention', 'Confirmation', 'Fixing']",False
955,3910707,"@kennyj, sorry - could you put a PR for 3-2-stable too please so I can get rid of my monkey-patch? :)",['Mention'],False
955,4296191,Sorry to jump on the end of this ticket but.. any idea why this would cause resolve/refinerycms#1383 ? ,['Question'],False
958,3833589,"Seems good, but I'm a little annoyed because this value is OS (and possibly filesystem) specific.  I'm annoyed that Ruby doesn't provide an API to `pathconf` so that we can determine the correct length.  Without that value, we're just going to keep chasing numbers until this value is set to the lowest common denominator. :(",['Objection'],False
958,3838420,I agree; it does feel crufty. Am open to a better solution if available...,"['Accept', 'Confirmation']",False
958,4074602,"Just checked on Linux

```
2.6.38-13-generic #54-Ubuntu SMP Tue Jan 3 13:38:12 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux
Natty
```

in my case
On Encrypted FS(Cryptfs):

```
test will fail on filename size >= 144
And will pass on FILENAME_MAX_SIZE = 143
```

Ubuntu community says that is known filesize bug (on cryptfs) and filesize on current dir underlying fs cannot be determined by syscalls from ruby.
This is related to @tenderlove conversation with Motohiro KOSAKI & Yui NARUSE
on https://bugs.ruby-lang.org/issues/5974

On Ext4 unencrypted:

```
test will pass on 230 as expected
```


On FreeBSD UFS unencrypted tests passed on FILENAME_MAX_SIZE = 230 

What about cryptfs on Linux - current FILENAME_MAX_SIZE value will make cache files with long names(usually escaped utf strings) unusable before it hooked and truncated by rails.cache api calls

* Maybe it will be useful to make a hash of limits + fs byte overheads for each FS. But IMO this will be very ugly :)
* Or get a lowest limit on filename size - 143 for ecryptfs and use it for FILENAME_MAX_SIZE - this is ugly too IMO :(

In my particular case - i only can use a constant override to decrease FILENAME_MAX_SIZE to use a cache on dev and prod machines with cryptfs :( Sad




",['Code'],False
958,15665329,"Just ran into this issue on 3.2.11 and ended up overriding the constant to 223. I probably won't submit a pull request to change it in master because 228 should be good enough for most cases, and because we should find a more robust solution as @tenderlove suggests. Maybe catching the ENAMETOOLONG and retrying with a shorter max length, but that may break existing keys.

That said, I'll at least document why I went with 223 instead of 228:
Tempfile adds `""#{t}-#{$$}-#{rand(0x100000000).to_s(36)}-#{n}.lock""` to the end of the filename.
`t` is the date; always 8 chars.
`$$` is the pid; on linux this defaults to a max of 32768, but can be configured to a max of 4.2million or 7 chars.
`rand.to_s` base 36 encode of a 32bit number; max of 7 chars
`n` is the retry count; should never happen, but lets say it could get up to 2 digits before the universe explodes.
That adds up to 32 characters, and 255 - 32 = 223. 

So, 228 should work fine in most real world cases where the max pid is 5 digits long and there are no retries and the max filename length is 255.",['Bug'],False
959,3292205,"Any of the Rails team had a chance to look at this. I added in some tests. Thoughts, comments?  Feedback welcome. ",['Question'],False
959,3292314," i dig it. only thought is are you intentionally not saying ""bundle exec rake db:migrate""?",['Question'],False
959,3292856,"Great suggestion, i'll add it in!","['Gratitude', 'Accept', 'Confirmation']",False
959,3293603,I dig it.  +1,['+1 (Plus One)'],False
959,3294425,+1 makes sense.,['+1 (Plus One)'],False
959,3303225,This will be quite helpful. :+1:,['+1 (Plus One)'],False
959,3325395,+1,['+1 (Plus One)'],False
959,3589175,cool +1,['+1 (Plus One)'],False
959,3815698,+1,['+1 (Plus One)'],False
959,3832106,"@josevalim hate to bug on this one, but can you merge this in or give me some comments? The sooner no one asks me why they're getting a NoMethodError when they haven't migrated the database, the better. If there is someone else that needs to join the conversation let me know, and we can get them in here.","['Mention', 'Request']",False
959,3832192,/cc @tenderlove ,['Mention'],False
959,3833551,"I'm uneasy about this change.  Having the exception handling code checking the migrator does not sound awesome (especially if this is happening in production).  I'm -1 on this change, but I'm willing to hear other opinions. /cc @jonleighton ","['Objection', 'Mention']",False
959,3834163,"I am also a +1 for this, but I understand @tenderlove's concern. How about adding a `!Rails.env.production? &&` clause to each of those 'if' statements checking `if ActiveRecord::Migrator.needs_migration?`. That might address everyone's concerns.","['Suggestion', 'Mention']",False
959,3836554,"@tenderlove & @jonleighton I'm very open to implementation suggestions. Not performing this check in production on _every_ error makes sense. We could add a environment check per @scottwb's suggestion, or make it a config option. Perhaps coming up with a standard way to add debugging suggestions to development error messages could make this pattern more sustainable, but i'm not exactly sure what that would look like. Let me know what you think.","['Suggestion', 'Mention']",False
959,3840553,"This would save me some pain.
+1 and agree we want to be able to enable this for dev only.",['+1 (Plus One)'],False
959,3842993,Making this a `config` option is a good idea. This way I can enable it not only in development environment but also in my other custom environments that resemble development.,"['Confirmation', 'Accept']",False
959,3844555,"I think the idea is good but we shouldn't solve it by changing Active Record. For a start, picking up on specific errors is always going to leave other errors uncaught that were also caused by missing migrations.

I think we should make the feature configurable, and have it work like so by default:

* Development: raise an error on page load if there are pending migrations
* Test: display a warning when test is run if there are pending migrations
* Production: no change",['Suggestion'],False
959,3851336,"@jonleighton I think that addresses everyones concerns and accomplishes everything I want. I can go ahead and rip out the ActiveRecord bits from this pull request and just leave in the migration checking code. 

Would you prefer a separate  pull request for warning/error messages or just amending this one? I'm thinking by default we can have it off, and to turn it on you can do something like this to development/test.rb

```ruby
config.migration_pending = :error
config.migration_pending = :warn
```
","['Question', 'Mention']",False
959,3851478,"As just discussed with @waseem, one could apply a similar approach to the [following based on EpicFail](https://github.com/bsodmike/EpicFail/blob/master/lib/epic_fail/exceptions/rack.rb):

```ruby
module EpicFail
  module Exceptions
    class Rack
      #...
      
      def notify_exception(e, env)
        # Exception: backtrace  exception  message
        EpicFail::Failure.create!(:exception => ""#{e.class}"", :message => ""#{e.message}"", :backtrace => ""#{e.backtrace}"")
      end
    end
  end
end
```

and perform

```ruby
ActiveRecord::Migrator.current_version != (ActiveRecord::Migrator.migrations(migrations_paths).last.try(:version)||0)
```

to detect a pending migration.  `e.message` can be updated accordingly and presented in the rendered error.  All of the above as per @jonleighton still apply.  Thoughts?",['Code'],False
959,3897192,"

Setting up the configuration is straight forward: 

active_record/lib/active_record/base.rb

```ruby

##
# :singleton-method:
# Specify how to notify the user when pending migrations are detected
# use :warn, :error, or :none
cattr_accessor :on_pending_migration , :instance_writer => false
@@on_pending_migration = :none

```


Then actually raising/warning the message is straightforward

```ruby

# Notifies the developer if there are pending migrations
# the type of notification can be configured. Example:
#
#   config.active_record.on_pending_migration = :error
def notify_pending_migrations
  case ActiveRecord::Base.on_pending_migration
  when :error
    raise ActiveRecordError::PendingMigration, ""There are pending migrations run 'bundle exec rake db:migrate' to resolve them"" if ActiveRecord::Migrator.needs_migration?
  when :warn
    warn ""There are pending migrations run 'bundle exec rake db:migrate' to resolve them"" if ActiveRecord::Migrator.needs_migration?
  end
end

```


The thing I'm unsure of is where to call `notify_pending_migrations`. Since migrations are an ActiveRecord specific concept, I would like to keep the code within AR (not rely on a controller/view/etc. to relay the message). It also needs to work in the console and when running on a server. If we don't check _every_ round trip to the server we can't be sure that new migrations haven't been introduced. So we could hook into something like  `ActiveRecord::Base.table_name` that gets called on each round trip to the DB, though that would be a lot of redundant checks. Perhaps there is a better place to do the check?",['Code'],False
959,5519053,Any thoughts on this @tenderlove / @jonleighton?,['Mention'],False
959,5761141,"I like the idea a lot but I don't like to have to wait for the server to start and browse the app to get the error, It'd be better to throw the error when the server is starting, something like this:

    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate'

Which is what kinda happens with Bundler:

    $ rails server
    Could not find gem 'meh' in the gems available on this machine.
    Try running `bundle install`.

I could work on that patch. What do you guys think?","['Suggestion', 'Bug']",False
959,5761213,"I think we can at least get in the `needs_migration?` helper. Then people can proceed to check on initialization, add a middleware in development and so forth.","['Suggestion', 'Request']",False
959,5770170,"I'd still like this when the server is starting, but in a second thought, what if the user rolls back? the schema wouldn't be up to date and the server wouldn't start, that might not be ok, so we could add an option to the configuration (and configure in config/development.rb), something like this:
    
    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate' or use config.whatever_the_name_config_option_is = false

There's another thing, `needs_migration?` would be better to me if it were `pending_migrations?`","['Suggestion', 'Bug']",False
959,5771108,"`pending_migrations?` is fine. I don't we should check it on startup by default. You gave one possible example for it failing, but there are other occasions as well (like progressive updates in production).",['Accept'],False
959,5771575,"@josevalim I think this is a helpful thing in development only, in production?, not all, and yeah, it shouldn't be enabled by default either, even on development mode, I'm pretty sure there are people out there with a git post-commit hook or something like that checking for pending migrations already, so we could add a commented out config option in config/development.rb:

    # Enable pending migrations checking on startup (default is false)
    # config.check_pending_migrations_on_startup = true

    $ rails server
    You have pending migrations.
    Try running 'bundle exec rake db:migrate' or set config.check_pending_migrations_on_startup to false

What do you think?","['Suggestion', 'Mention']",False
959,6232858,Closed in favor of #6665,['Reject'],False
962,2438341,"Hrm, I am unsure if this the concern of to_json? Shouldn't escape_json do this instead?","['Suggestion', 'Question']",False
962,2438618,"Where may I find escape_json ?

PS. I do think this is a concern of to_json. See the definition of `string` at http://json.org/ and see also http://noteslog.com/post/the-solidus-issue/
 
> The reason for allowing the slash to be escaped is for making it safe to embed the JSON substring `</script>` in HTML.
",['Question'],False
962,2438686,"I'm thinking maybe it should have `ActiveSupport.escape_script_tags_in_json` (similar to `ActiveSupport.escape_html_entities_in_json`)

Set by default to +true+

And when +true+ only escape `</script>` strings, to avoid too much unnecessary escaping.

",['Suggestion'],False
962,2438911,"Sorry, it is json_escape (and not escape_json):

https://github.com/rails/rails/blob/aa11f7332c1abadea23576805985f402298273f9/activesupport/lib/active_support/core_ext/string/output_safety.rb#L53


*
Jos Valim
www.plataformatec.com.br
Founder and Lead Developer
*","['Apology', 'URL']",False
962,2439298,"Don't like that at all! The output is not valid JSON anymore, which is a waste. You'd have to parse it to JSON again on the client. Better to simply send valid JSON.","['Objection', 'Answer']",False
962,2439302,"Hrm, right. Ok, I am leaving this open for more feedback then. /cc @jeremy","['Confirmation', 'Mention', 'Request']",False
962,3451822,"I agree with @lawrencepit that this would be useful!  It's a common pattern for backbone.js apps to embed json directly in a &lt;script&gt; tag (in order to avoid an extra round trip to load a model).  I'm agnostic as to whether escaping of ""&lt;/script&gt;"" -> ""&lt;\/script&gt;"" should happen in to_json (since it doesn't effect json used in other context except &lt;script&gt; tags), but it sure would be nice if there was a helper for it (javascript_json_escape?)","['Confirmation', 'Mention']",False
962,3836181,":up: Any new suggestions how to deal with that problem? `escape_script_tags_in_json` works fine, but it cost too much...",['Question'],False
962,5248007,"The whole javascript / JSON escaping situation seems like a mess to me.

We have `json_escape` which looks useful but definitely isn't and `escape_javascript` which while having a better use case is named inconsistently and doesn't cover escaping JSON. Not to mention the `j` aliasing!

I also disagree with @lawrencepit's solution as `{""name"":""<script>alert('foo');</script>""}` is perfectly valid JSON, the issue being solved here is with the browser and so belongs in a view helper.

We need some joined up thinking and consider this and the following issues as a whole

* https://github.com/rails/rails/pull/3578
* https://github.com/rails/rails/pull/5127",['Objection'],False
962,5257905,"@bestie not sure what you're disagreeing with. The string you quote is valid JSON, and so is `<script>{""name"":""<script>alert('foo');<\/script>""}`.

Sometimes you have to be practical. If you push this to a view helper it will use *a lot* more resources. My original solution works. And it conforms to the JSON specs. Everybody happy I'd say.","['Answer', 'Mention']",False
962,5292491,"@lawrencepit I'm disagreeing with `to_json` changing a valid JSON string for the benefit of the browser, it's simply the wrong place for it to happen.

I also don't take your point on performance, a call to `gsub` in `to_json` equivalent to a `gsub` in a helper.",['Mention'],False
962,5296994,"I disagree it's in the wrong place. It follows the JSON spec. Read it. It specifically mentions the solidus in the string form. If you escape the solidus it's still perfectly valid JSON, just more perfect.","['Objection', 'Answer', 'Reject']",False
962,5646755,":thumbsup: @lawrencepit  it doesn't break the whole JSON string but makes it safer for use case above.
But, IMHO, escaping HTML is more important here.   config.active_support.escape_html_entities_in_json = true
 is not working for
```
 render json: {x:""<script>alert(1)</script>""}
```
",['Mention'],False
962,5647532,"I'm also gonna give a :thumbsup: to @lawrencepit on this one. After reading the JSON spec closely I realised the string with the escaped solidus is equivalent, so escaping it is optional.

To express in Ruby
```ruby
{""key"" => ""<script>something</script>""}.to_json == {""key"" => ""<script>something<\/script>""}.to_json
```
and also
```ruby
JSON.parse(""{\""key\"":\""<script>something</script>\""}"") == JSON.parse(""{\""key\"":\""<script>something<\/script>\""}"")
```
both producing
```ruby
{""key""=>""<script>something</script>""}
```

My issue was that I thought the suggestion was to make a real change to JSON encoding, in reality this is completely in-line with the JSON spec, implementing an optional extra, and makes putting JSON into the browser way more convenient.

I still think we have a problem escaping JSON in Rails, but this is going to be convenient for a lot people and is easy innocuous change to make.

@josevalim was your issue the same as mine? Maybe you will change your mind also?",['Code'],False
962,6495175,"Oh, similar issue here.

We can close this issue since we merged making escape_html_entities_in_json to true by default.
/cc @josevalim ","['Accept', 'Mention']",False
962,8582828,"> We can close this issue since we merged making escape_html_entities_in_json to true by default.

Sounds good. If anyone can demonstrate this is still a problem after that change, let me know and I'll re-open. Thanks.",['Accept'],False
972,3839787,"@carlosantoniodasilva @guilleiguaran 

I added this testcase for fixing https://github.com/rails/rails/issues/4749.
I'm confusing... Why should we use 3-2-stable when using --edge option ?

related to https://github.com/rails/rails/pull/4912","['Mention', 'Question', 'Objection', 'URL']",False
972,3840051,"@kennyj hm yeah, I didn't check it further, just added the test fix. Seems like the `:branch` shouldn't really exist, let me check it better.","['Mention', '+1 (Plus One)', 'Suggestion']",False
972,3840062,"This confusing, generating a new app passing --edge option using 3.2.x also generate apps with conflicts about dependencies.","['Objection', 'Mention']",False
972,3840157,"Yeah, but with the `:branch` option:

```ruby
gem 'sass-rails',   :git => 'git://github.com/rails/sass-rails.git',   :branch => '3-2-stable'
gem 'coffee-rails', :git => 'git://github.com/rails/coffee-rails.git', :branch => '3-2-stable'
```

I get the same error as result:

```
Bundler could not find compatible versions for gem ""railties"":
  In Gemfile:
    sass-rails (>= 0) ruby depends on
      railties (~> 3.2.0) ruby

    rails (>= 0) ruby depends on
      railties (4.0.0.beta)
```

If I remove the `:branch`, it bundles successfully.","['Code', 'Fixing', 'URL']",False
972,3840245,I get same result when I was tackling #4749.,"['Confirmation', 'Answer']",False
972,3841636,"BTW, My confirmation way is https://github.com/kennyj/rails/commit/8bf3c6d8165fa6442b3ae2f86a955c82d0abf99b#commitcomment-921532",['URL'],False
972,3841691,"You're right guys, my commit needs to be reverted","['Confirmation', 'Accept']",False
